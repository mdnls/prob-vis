define("model/model", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class CONF {
        constructor(gridBoxSize, colors, padding) {
            this.gridBoxSize = gridBoxSize;
            this.colors = colors;
            this.padding = padding;
        }
    }
    exports.CONF = CONF;
});
define("model/bins", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class BinItem {
        constructor(x, y, itemType) {
            this.populate(x, y, itemType);
        }
        populate(x, y, itemType) {
            this.x = x;
            this.y = y;
            this.itemType = itemType;
        }
    }
    exports.BinItem = BinItem;
    class Histogram {
        constructor(numBins) {
            this.itemType = "default";
            this.histBins = Array.from({ length: numBins }, () => new Array());
            this.listeners = new Array();
            this.selection = -1;
        }
        static fromArray(arr) {
            let hist = new Histogram(arr.length);
            arr.forEach((numItems, index) => { for (let i = 0; i < numItems; i++) {
                hist.addItem(index);
            } });
            return hist;
        }
        static full(length, n) {
            let hist = new Histogram(length);
            hist.setAll(n);
            return hist;
        }
        setAll(count) {
            for (let i = 0; i < this.histBins.length; i++) {
                while (this.histBins[i].length > count) {
                    this.removeItem(i);
                }
                while (this.histBins[i].length < count) {
                    this.addItem(i);
                }
            }
        }
        addItem(bin) {
            this.histBins[bin].push(new BinItem(bin, this.histBins[bin].length, this.itemType));
            this.refresh();
        }
        removeItem(bin) {
            this.histBins[bin].pop();
            this.refresh();
        }
        addBin() {
            this.histBins.push(new Array());
            this.refresh();
        }
        removeBin() {
            this.histBins.pop();
            if (this.selection == this.histBins.length) {
                this.selection = -1;
            }
            this.refresh();
        }
        bins() {
            return Array.from({ length: this.histBins.length }, (v, k) => this.getBin(k));
        }
        getBin(bin) {
            var binArr = this.histBins[bin];
            return Array.from(binArr);
        }
        refresh() {
            this.listeners.forEach((listener) => listener.refresh());
        }
        addListener(listener) {
            this.listeners.push(listener);
        }
        numBins() {
            return this.histBins.length;
        }
        selectBin(selection) {
            if (selection >= 0 && selection < this.histBins.length) {
                this.selection = selection;
                this.refresh();
            }
        }
        selectedBin() {
            return this.selection;
        }
    }
    exports.Histogram = Histogram;
});
define("model/heatmap", ["require", "exports", "model/bins", "papaparse"], function (require, exports, bins_1, papaparse_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Cell {
        constructor(r, c, color, quantity) {
            this.r = r;
            this.c = c;
            this.color = color;
            this.quantity = quantity;
        }
    }
    exports.Cell = Cell;
    var Slice;
    (function (Slice) {
        Slice[Slice["ROWS"] = 0] = "ROWS";
        Slice[Slice["COLS"] = 1] = "COLS";
        Slice[Slice["ROW"] = 2] = "ROW";
        Slice[Slice["COL"] = 3] = "COL";
    })(Slice = exports.Slice || (exports.Slice = {}));
    class MatrixSlice {
        constructor(matrix, mode, index) {
            this.matrix = matrix;
            this.mode = mode;
            if (mode == Slice.ROW || mode == Slice.COL) {
                if (index == undefined) {
                    throw Error("Must provide an index to do a row slice.");
                }
                this.index = index;
            }
            else {
                this.index = -1;
            }
            let toDraw = [];
            let numItems = 25;
            let rows = this.matrix.rows();
            let quantityPerRow = rows.map((cells) => cells.reduce((prev, cur) => cur.quantity + prev, 0));
            let rowsTotal = quantityPerRow.reduce((prev, cur) => cur + prev, 0);
            let cols = this.matrix.cols();
            let quantityPerCol = cols.map((cells) => cells.reduce((prev, cur) => cur.quantity + prev, 0));
            let colsTotal = quantityPerCol.reduce((prev, cur) => cur + prev, 0);
            switch (this.mode) {
                case Slice.ROW:
                    let row = this.matrix.getRow(this.index);
                    if (rowsTotal == 0) {
                        toDraw = row.map((c) => 0);
                    }
                    else {
                        toDraw = row.map((c) => Math.floor(numItems * c.quantity / rowsTotal));
                    }
                    break;
                case Slice.COL:
                    let col = this.matrix.getCol(this.index);
                    if (colsTotal == 0) {
                        toDraw = col.map((c) => 0);
                    }
                    else {
                        toDraw = col.map((c) => Math.floor(numItems * c.quantity / colsTotal));
                    }
                    break;
                case Slice.COLS:
                    if (rowsTotal == 0) {
                        toDraw = rows.map((c) => 0);
                    }
                    else {
                        toDraw = quantityPerRow.map((c) => Math.floor(numItems * c / rowsTotal));
                    }
                    break;
                case Slice.ROWS:
                    if (colsTotal == 0) {
                        toDraw = cols.map((c) => 0);
                    }
                    else {
                        toDraw = quantityPerCol.map((c) => Math.floor(numItems * c / colsTotal));
                    }
                    break;
            }
            this.histogram = bins_1.Histogram.fromArray(toDraw);
        }
        addListener(listener) {
            this.matrix.addListener(listener);
        }
        refresh() {
            this.matrix.refresh();
        }
        addItem(bin) {
            throw Error("Cannot add an item to a matrix slice.");
        }
        removeItem(bin) {
            throw Error("Cannot remove an item from a matrix slice.");
        }
        addBin() {
            throw Error("Cannot add a bin to a matrix slice.");
        }
        removeBin() {
            throw Error("Cannot remove a bin from a matrix slice.");
        }
        bins() {
            return this.histogram.bins();
        }
        getBin(bin) {
            return this.histogram.getBin(bin);
        }
        numBins() {
            return this.histogram.numBins();
        }
        selectBin(selection) {
            this.matrix.selectCol(selection);
            this.histogram.refresh();
            this.matrix.refresh();
        }
        selectedBin() {
            return this.matrix.selectedCol();
        }
    }
    exports.MatrixSlice = MatrixSlice;
    class HeatMap {
        constructor(sideLength) {
            this.mat = Array.from({ length: sideLength }, (v, r) => (Array.from({ length: sideLength }, (v, c) => new Cell(r, c, "#000", 1))));
            this.listeners = new Array();
            this.selection = -1;
        }
        static fromCSVStr(csv) {
            let dataStr = papaparse_1.parse(csv).data;
            let data = dataStr.map((r) => r.map((val) => Number.parseFloat(val)));
            data.forEach((row) => { if (row.length != data.length) {
                throw Error("The input data must be a square matrix");
            } });
            let hm = new HeatMap(data.length);
            data.forEach((row, rIdx) => {
                row.forEach((quantity, cIdx) => hm.setCell(rIdx, cIdx, quantity));
            });
            return hm;
        }
        rowHist() {
            return new MatrixSlice(this, Slice.ROWS);
        }
        colHist() {
            return new MatrixSlice(this, Slice.COLS);
        }
        rowSliceHist(row) {
            return new MatrixSlice(this, Slice.ROW, row);
        }
        refresh() {
            this.listeners.forEach((listener) => listener.refresh());
        }
        addListener(listener) {
            this.listeners.push(listener);
        }
        setCell(row, col, quantity) {
            if (row >= 0 && row < this.mat.length && col >= 0 && col < this.mat.length) {
                this.mat[row][col].quantity = quantity;
            }
        }
        getCell(row, col) {
            return this.mat[row][col];
        }
        getRow(row) {
            return this.mat[row].map((cell) => new Cell(0, cell.c, cell.color, cell.quantity));
        }
        rows() {
            return Array.from(this.mat);
        }
        getCol(col) {
            return this.mat.map((row) => new Cell(row[col].r, 0, row[col].color, row[col].quantity));
        }
        cols() {
            return Array.from({ length: this.mat.length }, (v, k) => this.getCol(k));
        }
        selectCol(col) {
            if (col >= 0 && col < this.mat.length) {
                this.selection = col;
                this.refresh();
            }
        }
        selectedCol() {
            return this.selection;
        }
        sideLength() {
            return this.mat.length;
        }
    }
    exports.HeatMap = HeatMap;
    class UnnormalizedMatrixSlice extends MatrixSlice {
        constructor(matrix, mode, index) {
            super(matrix, mode, index);
            let toDraw = [];
            let rows = this.matrix.rows();
            let quantityPerRow = rows.map((cells) => cells.reduce((prev, cur) => cur.quantity + prev, 0));
            let cols = this.matrix.cols();
            let quantityPerCol = cols.map((cells) => cells.reduce((prev, cur) => cur.quantity + prev, 0));
            switch (this.mode) {
                case Slice.ROW:
                    toDraw = this.matrix.getRow(this.index).map(c => c.quantity);
                    break;
                case Slice.COL:
                    toDraw = this.matrix.getCol(this.index).map(c => c.quantity);
                    break;
                case Slice.COLS:
                    toDraw = quantityPerRow;
                    break;
                case Slice.ROWS:
                    toDraw = quantityPerCol;
                    break;
            }
            this.histogram = bins_1.Histogram.fromArray(toDraw);
        }
    }
    exports.UnnormalizedMatrixSlice = UnnormalizedMatrixSlice;
});
define("view/textbinder", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class LooseTextBinder {
        constructor(textElement, model, updateRule) {
            this.textElement = textElement;
            this.model = model;
            this.updateRule = updateRule;
        }
        refresh() {
            $(this.textElement).text(this.updateRule(this.model));
        }
    }
    exports.LooseTextBinder = LooseTextBinder;
    class TextBinder extends LooseTextBinder {
        constructor(textElement, model, updateRule) {
            super(textElement, model, updateRule);
            model.addListener(this);
        }
    }
    exports.TextBinder = TextBinder;
});
define("data", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chisqr1 = {
        "leftHistBins": [1, 2, 4, 6, 3, 4, 1, 1],
        "rightHistBins": [1, 2, 3, 5, 4, 6, 2, 1]
    };
    exports.simpleHist = {
        "hist": [7, 0, 0, 0, 0, 0, 4, 0]
    };
    exports.chisqr2 = {
        "leftHistBins": [2, 2, 3, 2, 4, 5, 8, 0],
        "centerHistBins": [2, 2, 3, 2, 4, 5, 8, 8],
        "rightHistBins": [2, 2, 2, 2, 3, 3, 3, 3]
    };
    exports.entropyExs = {
        "highEntropy": [3, 4, 3, 3, 3, 4, 3, 3],
        "medEntropy": [1, 2, 4, 7, 7, 4, 2, 1],
        "lowEntropy": [1, 7, 1, 1, 1, 1, 1, 1]
    };
    exports.xEntropyExs = {
        "q": [2, 7, 4, 2, 5, 1, 3, 2]
    };
    exports.transportEx = {
        "matrix": "0,0,0,1,1,0,0,0\n1,0,0,0,2,0,0,0\n0,0,1,1,0,0,0,0\n0,0,0,0,2,0,0,0\n0,2,1,0,0,0,1,0\n0,3,2,0,0,0,0,1\n1,2,0,0,0,1,2,1\n0,0,1,0,0,0,0,0",
        "opt_matrix": "2,0,0,0,0,0,0,0\n0,3,0,0,0,0,0,0\n0,0,2,0,0,0,0,0\n0,2,0,0,0,0,0,0\n0,2,0,0,2,0,0,0\n0,0,3,0,3,0,0,0\n0,0,0,2,0,1,3,1\n0,0,0,0,0,0,0,1"
    };
    exports.optimizers = {
        "wganEasy": {
            "mean": [[-0.01, 0.11], [0.0, 0.15], [0.02, 0.19], [0.03, 0.23], [0.05, 0.27], [0.07, 0.31], [0.09, 0.34], [0.11, 0.38], [0.13, 0.42], [0.16, 0.47], [0.18, 0.51], [0.2, 0.54], [0.23, 0.59], [0.26, 0.64], [0.28, 0.67], [0.31, 0.72], [0.33, 0.76], [0.35, 0.81], [0.38, 0.86], [0.4, 0.9], [0.44, 0.97], [0.46, 0.99], [0.49, 1.04], [0.52, 1.09], [0.54, 1.13], [0.58, 1.18], [0.61, 1.24], [0.64, 1.3], [0.67, 1.34], [0.69, 1.38], [0.73, 1.45], [0.76, 1.48], [0.81, 1.56], [0.84, 1.61], [0.88, 1.68], [0.9, 1.7], [0.94, 1.79], [0.97, 1.83], [1.0, 1.87], [1.05, 1.95], [1.07, 1.98], [1.11, 2.04], [1.14, 2.1], [1.18, 2.14], [1.2, 2.17], [1.24, 2.24], [1.26, 2.27], [1.28, 2.3], [1.31, 2.35], [1.33, 2.38], [1.35, 2.41], [1.36, 2.42], [1.36, 2.44], [1.39, 2.48], [1.4, 2.49], [1.42, 2.52], [1.44, 2.56], [1.45, 2.58], [1.46, 2.6], [1.47, 2.61], [1.47, 2.61], [1.49, 2.64], [1.48, 2.63], [1.48, 2.63], [1.49, 2.65], [1.52, 2.7], [1.5, 2.67], [1.51, 2.69], [1.52, 2.7], [1.51, 2.67], [1.53, 2.73], [1.51, 2.69], [1.5, 2.68], [1.51, 2.68], [1.52, 2.71], [1.51, 2.69], [1.51, 2.69], [1.51, 2.7], [1.51, 2.7], [1.51, 2.71], [1.49, 2.66], [1.49, 2.67], [1.5, 2.7], [1.49, 2.69], [1.49, 2.67], [1.47, 2.66], [1.48, 2.66], [1.46, 2.64], [1.47, 2.65], [1.44, 2.62], [1.44, 2.62], [1.44, 2.63], [1.43, 2.62], [1.42, 2.59], [1.41, 2.58], [1.39, 2.56], [1.39, 2.56], [1.36, 2.52], [1.36, 2.52], [1.33, 2.47], [1.33, 2.48], [1.3, 2.43], [1.3, 2.43], [1.27, 2.4], [1.25, 2.37], [1.23, 2.34], [1.19, 2.28], [1.18, 2.26], [1.16, 2.24], [1.14, 2.21], [1.12, 2.19], [1.1, 2.16], [1.08, 2.11], [1.05, 2.08], [1.05, 2.08], [1.02, 2.03], [1.0, 1.99], [0.99, 1.97], [0.98, 1.95], [0.97, 1.92], [0.96, 1.9], [0.95, 1.9], [0.94, 1.86], [0.94, 1.85], [0.93, 1.83], [0.92, 1.82], [0.91, 1.77], [0.92, 1.77], [0.91, 1.75], [0.92, 1.76], [0.92, 1.73], [0.92, 1.74], [0.92, 1.73], [0.93, 1.73], [0.94, 1.74], [0.92, 1.7], [0.94, 1.7], [0.94, 1.69], [0.95, 1.71], [0.96, 1.7], [0.95, 1.68], [0.97, 1.7], [0.96, 1.68], [0.98, 1.69], [0.98, 1.69], [0.97, 1.67], [1.0, 1.69], [1.0, 1.7], [1.03, 1.72], [1.03, 1.7], [1.04, 1.71], [1.06, 1.74], [1.07, 1.74], [1.08, 1.76], [1.11, 1.79], [1.12, 1.8], [1.14, 1.83], [1.16, 1.85], [1.18, 1.87], [1.2, 1.92], [1.19, 1.92], [1.2, 1.95], [1.23, 1.99], [1.22, 1.98], [1.24, 2.04], [1.24, 2.06], [1.24, 2.09], [1.23, 2.1], [1.25, 2.15], [1.23, 2.15], [1.22, 2.16], [1.22, 2.19], [1.22, 2.21], [1.21, 2.22], [1.19, 2.22], [1.2, 2.25], [1.19, 2.26], [1.17, 2.23], [1.17, 2.27], [1.15, 2.25], [1.13, 2.26], [1.12, 2.24], [1.11, 2.26], [1.1, 2.26], [1.08, 2.23], [1.06, 2.21], [1.03, 2.19], [1.01, 2.16], [1.02, 2.17], [0.98, 2.12], [0.98, 2.13], [0.96, 2.11], [0.95, 2.09], [0.93, 2.03], [0.93, 2.04], [0.92, 2.0], [0.91, 1.96], [0.92, 1.98], [0.93, 1.95], [0.93, 1.93], [0.94, 1.93], [0.94, 1.92], [0.96, 1.93], [0.96, 1.89], [0.97, 1.87], [0.99, 1.88], [1.01, 1.89], [1.02, 1.86], [1.02, 1.87], [1.04, 1.86], [1.05, 1.86], [1.07, 1.85], [1.11, 1.9], [1.13, 1.91], [1.16, 1.94], [1.17, 1.94], [1.2, 1.96], [1.21, 1.96], [1.25, 2.03], [1.24, 2.0], [1.27, 2.05], [1.29, 2.07], [1.29, 2.09], [1.3, 2.11], [1.33, 2.16], [1.31, 2.15], [1.31, 2.16], [1.31, 2.17], [1.31, 2.19], [1.28, 2.19], [1.26, 2.18], [1.25, 2.19], [1.22, 2.17], [1.2, 2.17], [1.18, 2.18], [1.15, 2.13], [1.11, 2.09], [1.07, 2.04], [1.05, 2.05], [1.02, 2.0], [1.01, 2.01], [0.98, 1.97], [0.96, 1.94], [0.97, 1.95], [0.94, 1.93], [0.94, 1.91], [0.93, 1.9], [0.94, 1.91], [0.93, 1.9], [0.93, 1.9], [0.96, 1.93], [0.96, 1.9], [0.96, 1.89], [0.98, 1.92], [1.01, 1.94], [1.03, 1.95], [1.05, 1.96], [1.08, 1.97], [1.11, 2.0], [1.13, 2.0], [1.17, 2.04], [1.17, 2.02], [1.18, 2.03], [1.21, 2.05], [1.22, 2.08], [1.23, 2.08], [1.25, 2.09], [1.24, 2.06], [1.26, 2.11], [1.25, 2.08], [1.25, 2.1], [1.22, 2.07], [1.22, 2.06], [1.19, 2.02], [1.17, 2.03], [1.14, 2.0], [1.11, 1.96], [1.1, 1.96], [1.07, 1.93], [1.03, 1.9], [1.02, 1.89], [0.99, 1.87], [0.99, 1.88], [0.96, 1.86], [0.95, 1.86], [0.92, 1.84], [0.93, 1.86], [0.94, 1.88], [0.94, 1.9], [0.95, 1.93], [0.96, 1.96], [0.97, 1.95], [1.0, 2.02], [1.02, 2.05], [1.05, 2.08], [1.07, 2.09], [1.1, 2.13], [1.12, 2.14], [1.16, 2.17], [1.18, 2.18], [1.19, 2.18], [1.21, 2.17], [1.22, 2.16], [1.23, 2.16], [1.24, 2.14], [1.23, 2.1], [1.22, 2.07], [1.22, 2.05], [1.2, 2.02], [1.17, 1.95], [1.17, 1.93], [1.14, 1.9], [1.13, 1.87], [1.12, 1.86], [1.12, 1.84], [1.1, 1.84], [1.08, 1.83], [1.07, 1.82], [1.08, 1.82], [1.07, 1.84], [1.04, 1.82], [1.04, 1.84], [1.04, 1.87], [1.03, 1.88], [1.05, 1.92], [1.04, 1.93], [1.05, 1.97], [1.04, 1.97], [1.06, 2.03], [1.08, 2.06], [1.09, 2.08], [1.11, 2.13], [1.11, 2.15], [1.13, 2.18], [1.14, 2.18], [1.15, 2.17], [1.13, 2.15], [1.16, 2.19], [1.14, 2.16], [1.13, 2.14], [1.13, 2.13], [1.12, 2.1], [1.09, 2.03], [1.07, 2.0], [1.07, 2.0], [1.05, 1.95], [1.03, 1.9], [1.04, 1.9], [1.02, 1.88], [1.03, 1.87], [1.04, 1.87], [1.01, 1.84], [1.03, 1.86], [1.04, 1.85], [1.05, 1.84], [1.05, 1.88], [1.06, 1.86], [1.08, 1.88], [1.1, 1.91], [1.11, 1.92], [1.16, 1.96], [1.17, 1.99], [1.19, 2.02], [1.21, 2.05], [1.21, 2.06], [1.22, 2.09], [1.23, 2.1], [1.23, 2.15], [1.23, 2.14], [1.21, 2.14], [1.21, 2.16], [1.16, 2.11], [1.16, 2.12], [1.11, 2.08], [1.09, 2.06], [1.07, 2.06], [1.05, 2.03], [1.02, 1.99], [1.02, 1.99], [1.02, 1.99], [1.02, 1.98], [1.0, 1.94], [1.0, 1.93], [1.01, 1.94], [1.0, 1.94], [1.01, 1.93], [1.03, 1.94], [1.02, 1.93], [1.04, 1.94], [1.08, 1.99], [1.08, 1.98], [1.09, 2.0], [1.1, 2.01], [1.11, 2.01], [1.14, 2.03], [1.14, 2.02], [1.17, 2.03], [1.19, 2.04], [1.19, 2.08], [1.19, 2.05], [1.21, 2.07], [1.19, 2.05], [1.2, 2.05], [1.2, 2.05], [1.16, 2.01], [1.14, 1.98], [1.12, 1.97], [1.11, 1.95], [1.1, 1.94], [1.07, 1.93], [1.05, 1.9], [1.04, 1.91], [1.04, 1.93], [1.02, 1.94], [1.0, 1.9], [1.01, 1.93], [1.0, 1.95], [1.02, 1.97], [1.04, 1.99], [1.01, 1.98], [1.02, 2.0], [1.04, 2.0], [1.03, 2.01], [1.04, 1.99], [1.04, 2.01], [1.06, 2.02], [1.07, 2.03], [1.08, 2.05], [1.09, 2.07], [1.09, 2.06], [1.11, 2.08], [1.12, 2.09], [1.13, 2.1], [1.13, 2.07], [1.14, 2.07], [1.13, 2.06], [1.15, 2.04], [1.15, 2.02], [1.16, 2.0], [1.15, 1.99], [1.14, 1.97], [1.12, 1.94], [1.1, 1.9], [1.1, 1.89], [1.11, 1.9], [1.11, 1.87], [1.09, 1.89], [1.08, 1.87], [1.08, 1.9], [1.08, 1.89], [1.09, 1.9], [1.09, 1.94], [1.09, 1.95], [1.09, 1.96], [1.11, 2.0], [1.13, 2.05], [1.11, 2.06], [1.1, 2.05], [1.11, 2.07], [1.1, 2.07], [1.11, 2.11], [1.11, 2.11], [1.1, 2.1], [1.08, 2.09], [1.07, 2.1], [1.07, 2.09], [1.06, 2.07], [1.04, 2.04], [1.04, 2.04], [1.02, 1.98], [1.02, 1.98], [1.01, 1.95], [1.0, 1.93], [1.01, 1.93], [1.0, 1.89], [0.99, 1.87], [1.03, 1.91], [1.02, 1.89], [1.03, 1.91], [1.05, 1.93], [1.06, 1.94], [1.05, 1.93], [1.07, 1.98], [1.06, 1.97], [1.1, 2.0], [1.1, 2.04], [1.11, 2.04], [1.16, 2.09], [1.17, 2.1], [1.19, 2.11], [1.22, 2.13], [1.19, 2.1], [1.22, 2.11], [1.17, 2.08], [1.18, 2.06], [1.17, 2.04], [1.15, 2.02], [1.13, 1.98], [1.12, 1.97], [1.08, 1.93], [1.06, 1.93], [1.06, 1.95], [1.14, 1.97], [1.07, 1.92], [1.03, 1.99], [0.99, 1.89], [1.22, 1.89], [0.95, 1.98], [1.09, 1.87], [1.11, 2.02], [1.1, 2.04], [1.15, 1.98], [1.1, 2.07], [1.05, 2.01], [1.21, 1.91], [1.08, 2.03], [1.02, 1.97], [1.17, 1.93], [1.07, 2.07], [1.16, 2.11], [1.06, 2.03], [1.07, 1.98], [1.07, 1.96], [1.09, 1.93], [1.08, 1.87], [1.07, 1.88], [1.0, 1.95], [1.0, 1.89], [1.13, 1.86], [1.07, 1.91], [1.06, 2.05], [1.07, 2.03], [1.17, 1.93], [1.09, 1.93], [1.04, 1.98], [1.03, 1.99], [1.08, 1.96], [1.12, 1.93], [1.22, 2.03], [1.09, 2.12], [1.04, 2.13], [1.16, 2.09], [1.21, 2.06], [1.03, 2.06], [1.09, 1.96], [1.14, 1.92], [0.94, 1.95], [1.13, 1.92], [1.19, 2.05], [1.08, 2.12], [1.1, 1.96], [1.1, 1.88], [1.08, 1.97], [1.04, 1.95], [1.1, 2.02], [1.03, 1.97], [1.07, 1.96], [1.08, 2.05], [1.08, 2.07], [0.98, 1.88], [0.98, 1.91], [1.0, 1.92], [1.01, 1.87], [1.14, 1.88], [1.19, 1.97], [1.12, 2.04], [1.05, 2.05], [1.07, 2.03], [1.15, 1.95], [1.15, 1.97], [1.1, 2.06], [1.0, 2.14], [1.02, 2.02], [1.14, 1.84], [1.02, 1.97], [1.06, 2.04], [1.11, 2.01], [1.19, 1.96], [1.19, 1.98], [1.07, 2.13], [1.17, 2.07], [1.19, 2.05], [0.98, 1.99], [1.07, 1.97], [1.07, 1.92], [1.1, 1.9], [1.08, 1.92], [0.97, 1.87], [1.05, 1.87], [1.19, 1.9], [1.06, 1.94], [0.99, 1.92], [1.05, 1.93], [1.2, 1.94], [1.11, 1.93], [1.07, 1.88], [1.08, 1.92], [1.12, 1.93], [1.1, 1.91], [1.13, 2.04], [1.08, 1.98], [0.94, 1.85], [1.04, 1.96], [1.09, 2.03], [1.14, 2.08], [1.18, 2.05], [1.24, 2.05], [1.03, 1.96], [1.01, 1.99], [1.09, 2.05], [1.08, 1.98], [1.04, 1.97], [1.03, 2.08], [1.06, 2.03], [0.98, 1.9], [1.07, 1.95], [1.02, 2.01], [1.03, 2.04], [1.04, 1.94], [1.17, 2.02], [1.18, 1.94], [1.27, 2.03], [1.18, 2.1], [1.02, 2.04], [1.07, 1.96], [1.13, 2.0], [1.22, 2.09], [1.01, 1.99], [1.01, 1.96], [1.04, 1.92], [1.26, 2.03], [1.1, 2.07], [0.98, 2.06], [1.27, 2.02], [0.94, 2.05], [1.23, 1.96], [0.99, 1.9], [1.0, 1.92], [1.16, 1.96], [1.11, 1.94], [1.14, 2.04], [0.97, 1.98], [1.14, 2.05], [1.24, 2.06], [1.12, 2.0], [1.04, 1.98], [1.0, 1.99], [1.06, 1.95], [1.13, 2.0], [1.08, 2.02], [1.13, 2.02], [1.26, 2.11], [1.24, 2.03], [1.03, 1.99], [0.93, 1.93], [1.14, 1.99], [1.17, 1.98], [1.09, 2.0], [1.13, 2.03], [1.21, 2.0], [1.21, 2.05], [1.06, 1.96], [0.99, 2.04], [0.98, 1.98], [1.09, 2.02], [1.14, 2.0], [1.25, 2.03], [1.21, 2.09], [1.2, 2.02], [1.03, 2.0], [0.95, 1.98], [1.0, 1.97], [1.11, 1.9], [1.21, 1.94], [1.01, 1.96], [1.02, 1.99], [1.26, 2.07], [1.13, 1.98], [1.07, 1.96], [1.05, 1.95], [0.96, 1.89], [1.15, 1.92], [1.12, 1.91], [0.97, 1.95], [1.07, 2.01], [1.25, 2.08], [1.16, 2.1], [1.02, 2.02], [1.08, 1.9], [1.28, 1.99], [0.98, 2.03], [1.06, 2.01], [1.27, 2.05], [1.08, 1.99], [0.99, 2.06], [1.1, 2.0], [1.2, 2.03], [1.21, 2.01], [1.19, 2.04], [1.04, 2.05], [0.97, 1.99], [1.13, 1.99], [1.27, 2.12], [1.09, 2.02], [1.05, 1.97], [1.06, 1.99], [1.02, 1.95], [0.99, 1.95], [0.97, 1.95], [0.96, 1.99], [1.06, 2.08], [1.11, 2.03], [1.22, 2.07], [1.17, 2.08], [1.18, 2.08], [1.21, 2.1], [1.1, 2.01], [1.18, 2.05], [1.1, 1.92], [1.13, 1.95], [1.16, 2.0], [1.09, 2.15], [1.04, 2.04], [1.05, 2.03], [1.05, 2.03], [1.11, 2.12], [1.18, 2.14], [1.15, 2.14], [1.09, 2.14], [1.06, 2.11], [1.12, 2.08], [1.03, 1.98], [1.02, 1.89], [1.09, 1.94], [1.2, 1.94], [1.23, 1.94], [0.99, 1.98], [1.05, 2.06], [1.17, 2.06], [1.3, 2.07], [1.16, 2.07], [0.92, 1.96], [1.21, 2.07], [1.15, 2.06], [1.12, 2.05], [1.08, 1.95], [1.05, 1.92], [1.13, 1.96], [1.23, 2.12], [1.11, 2.05], [1.0, 1.96], [0.99, 1.87], [1.04, 1.85], [1.16, 1.94], [1.26, 2.03], [1.08, 1.94], [0.94, 1.85], [1.14, 2.1], [1.26, 2.13], [1.1, 2.04], [1.02, 1.88], [1.08, 1.93], [1.26, 2.18], [1.22, 2.01], [0.96, 2.0], [1.06, 1.81], [1.0, 2.08], [1.22, 1.96], [1.04, 2.14], [1.17, 1.9], [1.03, 2.02], [0.99, 1.92], [1.14, 1.9], [1.14, 2.21], [1.14, 1.89], [0.99, 2.01], [1.07, 1.99], [1.13, 1.86], [1.0, 2.07], [1.09, 1.98], [1.22, 1.96], [1.12, 2.2], [1.14, 1.99], [1.1, 1.9], [1.1, 2.06], [1.12, 2.15], [1.14, 2.04], [1.1, 1.92], [1.01, 1.93], [0.96, 1.93], [1.05, 1.91], [1.16, 2.0], [1.06, 2.01], [1.1, 2.05], [1.03, 2.02], [1.03, 2.01], [1.0, 2.02], [1.03, 2.0], [1.11, 2.01], [1.17, 1.99], [1.19, 1.92], [1.13, 2.01], [1.03, 2.07], [1.1, 2.1], [1.15, 2.01], [1.21, 2.02], [1.15, 2.0], [1.06, 2.01], [1.02, 2.09], [0.96, 1.99], [1.03, 1.86], [1.12, 1.86], [1.01, 1.91], [1.13, 2.09], [1.07, 2.07], [1.12, 2.09], [1.18, 1.98], [1.09, 1.88], [1.16, 2.04], [1.19, 2.11], [1.22, 2.12], [1.2, 2.12], [1.06, 2.09], [0.95, 2.0], [1.05, 2.01], [1.29, 2.14], [1.07, 2.02], [0.99, 2.03], [1.02, 2.0], [1.04, 1.96], [1.06, 1.99], [1.07, 1.98], [1.09, 1.95], [1.08, 1.96], [1.04, 1.97], [1.1, 2.0], [1.13, 2.05], [1.08, 2.08], [1.04, 1.94], [1.13, 1.92], [1.05, 1.88], [1.15, 1.93], [1.16, 1.98], [1.09, 2.05], [1.0, 2.07], [1.08, 2.06], [1.09, 2.02], [1.13, 2.08], [1.11, 1.97], [1.01, 1.82], [0.96, 1.89], [0.98, 2.12], [1.12, 1.83], [1.16, 2.25], [1.25, 1.96], [1.03, 2.04], [1.04, 1.94], [1.2, 1.92], [1.23, 2.25], [1.17, 2.02], [1.16, 1.89], [1.08, 2.06], [1.16, 2.14], [1.24, 2.05], [1.16, 1.98], [1.14, 2.13], [1.1, 2.05], [1.07, 1.95], [1.11, 1.95], [1.08, 1.9], [1.16, 2.07], [1.12, 2.13], [1.07, 2.06], [1.17, 1.95], [1.02, 1.88], [1.03, 1.87], [1.04, 1.82], [1.11, 2.02], [1.09, 2.11], [1.01, 2.09]],
            "cov": [[[0.0006, -0.0001], [-0.0001, 0.0007]], [[0.0005, -0.0004], [-0.0004, 0.0016]], [[0.0004, -0.0005], [-0.0005, 0.0038]], [[0.0003, -0.0001], [-0.0001, 0.0058]], [[0.0006, 0.0006], [0.0006, 0.0095]], [[0.0007, 0.0014], [0.0014, 0.0126]], [[0.0013, 0.003], [0.003, 0.0181]], [[0.0019, 0.0047], [0.0047, 0.0221]], [[0.0028, 0.0072], [0.0072, 0.0307]], [[0.0039, 0.0099], [0.0099, 0.0372]], [[0.0052, 0.0127], [0.0127, 0.0434]], [[0.0067, 0.0162], [0.0162, 0.0513]], [[0.0086, 0.0205], [0.0205, 0.0603]], [[0.0109, 0.0249], [0.0249, 0.0685]], [[0.0134, 0.0302], [0.0302, 0.081]], [[0.0157, 0.0356], [0.0356, 0.0951]], [[0.0186, 0.0412], [0.0412, 0.1063]], [[0.022, 0.048], [0.048, 0.1218]], [[0.0263, 0.0563], [0.0563, 0.1397]], [[0.0305, 0.0637], [0.0637, 0.1551]], [[0.0353, 0.0737], [0.0737, 0.1803]], [[0.0385, 0.0783], [0.0783, 0.1884]], [[0.0453, 0.0895], [0.0895, 0.2102]], [[0.0501, 0.0987], [0.0987, 0.2319]], [[0.0582, 0.1112], [0.1112, 0.2509]], [[0.0647, 0.1236], [0.1236, 0.2787]], [[0.071, 0.1358], [0.1358, 0.3073]], [[0.0801, 0.1502], [0.1502, 0.3336]], [[0.0879, 0.1641], [0.1641, 0.3618]], [[0.0917, 0.173], [0.173, 0.3863]], [[0.1097, 0.202], [0.202, 0.4384]], [[0.1142, 0.2041], [0.2041, 0.4329]], [[0.1273, 0.2258], [0.2258, 0.4776]], [[0.1476, 0.2586], [0.2586, 0.535]], [[0.1616, 0.284], [0.284, 0.5892]], [[0.1567, 0.2747], [0.2747, 0.5745]], [[0.1761, 0.3064], [0.3064, 0.6358]], [[0.1854, 0.3224], [0.3224, 0.6662]], [[0.2085, 0.3592], [0.3592, 0.727]], [[0.2204, 0.381], [0.381, 0.7734]], [[0.2387, 0.4067], [0.4067, 0.806]], [[0.2558, 0.4293], [0.4293, 0.8355]], [[0.2584, 0.4478], [0.4478, 0.8964]], [[0.2869, 0.4859], [0.4859, 0.9415]], [[0.2924, 0.4942], [0.4942, 0.9516]], [[0.3129, 0.5371], [0.5371, 1.0425]], [[0.3188, 0.5484], [0.5484, 1.0632]], [[0.3278, 0.5554], [0.5554, 1.0581]], [[0.3581, 0.6032], [0.6032, 1.1356]], [[0.364, 0.6133], [0.6133, 1.1538]], [[0.3699, 0.624], [0.624, 1.1735]], [[0.3844, 0.648], [0.648, 1.2124]], [[0.3643, 0.6288], [0.6288, 1.2059]], [[0.3938, 0.6703], [0.6703, 1.2636]], [[0.3979, 0.6749], [0.6749, 1.2665]], [[0.4311, 0.7232], [0.7232, 1.3356]], [[0.4255, 0.7168], [0.7168, 1.3329]], [[0.4516, 0.7593], [0.7593, 1.4023]], [[0.4307, 0.7299], [0.7299, 1.3644]], [[0.4293, 0.7261], [0.7261, 1.3547]], [[0.449, 0.7679], [0.7679, 1.4421]], [[0.4602, 0.782], [0.782, 1.4588]], [[0.4526, 0.7695], [0.7695, 1.4349]], [[0.4473, 0.7601], [0.7601, 1.4175]], [[0.4371, 0.7507], [0.7507, 1.4175]], [[0.4695, 0.7979], [0.7979, 1.4877]], [[0.4667, 0.8041], [0.8041, 1.5154]], [[0.4691, 0.8116], [0.8116, 1.5374]], [[0.4877, 0.8242], [0.8242, 1.5241]], [[0.4593, 0.78], [0.78, 1.4526]], [[0.5094, 0.8738], [0.8738, 1.6353]], [[0.4879, 0.8352], [0.8352, 1.562]], [[0.4679, 0.7967], [0.7967, 1.4859]], [[0.4734, 0.8067], [0.8067, 1.5051]], [[0.4649, 0.7927], [0.7927, 1.4851]], [[0.4573, 0.7822], [0.7822, 1.4694]], [[0.4696, 0.79], [0.79, 1.4587]], [[0.4554, 0.7767], [0.7767, 1.4589]], [[0.4802, 0.8169], [0.8169, 1.5243]], [[0.4754, 0.8184], [0.8184, 1.5484]], [[0.4687, 0.8018], [0.8018, 1.5054]], [[0.465, 0.788], [0.788, 1.4698]], [[0.4746, 0.8105], [0.8105, 1.5229]], [[0.4632, 0.8], [0.8, 1.5233]], [[0.4587, 0.7795], [0.7795, 1.4627]], [[0.4594, 0.7947], [0.7947, 1.5167]], [[0.45, 0.7709], [0.7709, 1.4619]], [[0.4342, 0.7426], [0.7426, 1.409]], [[0.4565, 0.7923], [0.7923, 1.5217]], [[0.4315, 0.737], [0.737, 1.3988]], [[0.4325, 0.7411], [0.7411, 1.4128]], [[0.4305, 0.7434], [0.7434, 1.4307]], [[0.4295, 0.7433], [0.7433, 1.435]], [[0.4172, 0.7176], [0.7176, 1.3798]], [[0.4213, 0.7249], [0.7249, 1.394]], [[0.4057, 0.7047], [0.7047, 1.3723]], [[0.4066, 0.7025], [0.7025, 1.3632]], [[0.3647, 0.6384], [0.6384, 1.265]], [[0.3825, 0.6705], [0.6705, 1.3276]], [[0.3647, 0.6288], [0.6288, 1.2308]], [[0.3705, 0.6405], [0.6405, 1.259]], [[0.3543, 0.6161], [0.6161, 1.2213]], [[0.3593, 0.6239], [0.6239, 1.2395]], [[0.3421, 0.6006], [0.6006, 1.2113]], [[0.3293, 0.5754], [0.5754, 1.1611]], [[0.3083, 0.5449], [0.5449, 1.121]], [[0.2904, 0.5083], [0.5083, 1.042]], [[0.2918, 0.5076], [0.5076, 1.0384]], [[0.2786, 0.498], [0.498, 1.0512]], [[0.2604, 0.455], [0.455, 0.9525]], [[0.2542, 0.4499], [0.4499, 0.958]], [[0.2417, 0.4287], [0.4287, 0.9216]], [[0.2391, 0.4172], [0.4172, 0.8858]], [[0.2248, 0.4013], [0.4013, 0.8774]], [[0.2351, 0.4142], [0.4142, 0.8939]], [[0.2171, 0.3812], [0.3812, 0.8273]], [[0.2096, 0.3738], [0.3738, 0.8257]], [[0.2019, 0.3562], [0.3562, 0.7867]], [[0.2018, 0.3467], [0.3467, 0.7489]], [[0.2054, 0.3547], [0.3547, 0.7647]], [[0.1964, 0.3397], [0.3397, 0.7403]], [[0.1835, 0.3242], [0.3242, 0.7303]], [[0.18, 0.3117], [0.3117, 0.689]], [[0.1852, 0.321], [0.321, 0.7072]], [[0.1739, 0.2989], [0.2989, 0.6616]], [[0.1695, 0.2954], [0.2954, 0.662]], [[0.1704, 0.2911], [0.2911, 0.635]], [[0.1753, 0.2907], [0.2907, 0.6165]], [[0.1661, 0.2747], [0.2747, 0.5851]], [[0.1776, 0.2974], [0.2974, 0.6335]], [[0.1744, 0.2845], [0.2845, 0.591]], [[0.1637, 0.2696], [0.2696, 0.5733]], [[0.1692, 0.2761], [0.2761, 0.5771]], [[0.1773, 0.292], [0.292, 0.6074]], [[0.1834, 0.3012], [0.3012, 0.6205]], [[0.1729, 0.2834], [0.2834, 0.5834]], [[0.1756, 0.2819], [0.2819, 0.5682]], [[0.1832, 0.2881], [0.2881, 0.5655]], [[0.1974, 0.3085], [0.3085, 0.5982]], [[0.1858, 0.2895], [0.2895, 0.567]], [[0.1856, 0.2907], [0.2907, 0.5672]], [[0.1974, 0.3053], [0.3053, 0.5867]], [[0.1815, 0.2806], [0.2806, 0.5432]], [[0.1956, 0.296], [0.296, 0.5574]], [[0.1968, 0.3], [0.3, 0.5671]], [[0.1881, 0.2911], [0.2911, 0.5575]], [[0.2011, 0.2994], [0.2994, 0.553]], [[0.2049, 0.3147], [0.3147, 0.5935]], [[0.2108, 0.3171], [0.3171, 0.5875]], [[0.2204, 0.3229], [0.3229, 0.5762]], [[0.2249, 0.3276], [0.3276, 0.5794]], [[0.2316, 0.3424], [0.3424, 0.6126]], [[0.2287, 0.3287], [0.3287, 0.5734]], [[0.2293, 0.3381], [0.3381, 0.6034]], [[0.2431, 0.3559], [0.3559, 0.6275]], [[0.2685, 0.3891], [0.3891, 0.6703]], [[0.2717, 0.3953], [0.3953, 0.6829]], [[0.2687, 0.3904], [0.3904, 0.6738]], [[0.2787, 0.4025], [0.4025, 0.689]], [[0.2972, 0.435], [0.435, 0.7502]], [[0.2914, 0.4339], [0.4339, 0.7603]], [[0.2916, 0.4345], [0.4345, 0.7628]], [[0.3098, 0.4639], [0.4639, 0.8164]], [[0.2987, 0.441], [0.441, 0.768]], [[0.3167, 0.4709], [0.4709, 0.8247]], [[0.3349, 0.4976], [0.4976, 0.8662]], [[0.3088, 0.4837], [0.4837, 0.895]], [[0.3107, 0.4761], [0.4761, 0.8669]], [[0.3295, 0.5127], [0.5127, 0.9477]], [[0.3174, 0.5045], [0.5045, 0.9534]], [[0.3224, 0.5134], [0.5134, 0.9707]], [[0.3106, 0.5094], [0.5094, 0.9992]], [[0.3051, 0.4969], [0.4969, 0.9751]], [[0.2998, 0.497], [0.497, 0.9943]], [[0.2895, 0.4844], [0.4844, 0.9846]], [[0.3039, 0.5101], [0.5101, 1.0366]], [[0.2995, 0.5049], [0.5049, 1.0334]], [[0.2902, 0.485], [0.485, 0.9869]], [[0.299, 0.517], [0.517, 1.0881]], [[0.2883, 0.4992], [0.4992, 1.0573]], [[0.2811, 0.4929], [0.4929, 1.0672]], [[0.2726, 0.4707], [0.4707, 1.0102]], [[0.2599, 0.4667], [0.4667, 1.0516]], [[0.2691, 0.4814], [0.4814, 1.0758]], [[0.2486, 0.446], [0.446, 1.0156]], [[0.2337, 0.4266], [0.4266, 0.9989]], [[0.2378, 0.4346], [0.4346, 1.0128]], [[0.2245, 0.4088], [0.4088, 0.9606]], [[0.2285, 0.4124], [0.4124, 0.9675]], [[0.2021, 0.3618], [0.3618, 0.8585]], [[0.214, 0.3862], [0.3862, 0.9176]], [[0.1973, 0.3618], [0.3618, 0.8887]], [[0.1903, 0.3503], [0.3503, 0.8685]], [[0.1871, 0.3375], [0.3375, 0.818]], [[0.1883, 0.3374], [0.3374, 0.8211]], [[0.1835, 0.3292], [0.3292, 0.8015]], [[0.1784, 0.3136], [0.3136, 0.7524]], [[0.1852, 0.3237], [0.3237, 0.7749]], [[0.1835, 0.314], [0.314, 0.7367]], [[0.1817, 0.3074], [0.3074, 0.7162]], [[0.1887, 0.3204], [0.3204, 0.7433]], [[0.1933, 0.3214], [0.3214, 0.7261]], [[0.1987, 0.3279], [0.3279, 0.7378]], [[0.203, 0.326], [0.326, 0.7095]], [[0.2027, 0.3228], [0.3228, 0.6936]], [[0.2186, 0.3414], [0.3414, 0.7122]], [[0.2154, 0.3356], [0.3356, 0.7075]], [[0.216, 0.3271], [0.3271, 0.6703]], [[0.2114, 0.3235], [0.3235, 0.6713]], [[0.2307, 0.3461], [0.3461, 0.6897]], [[0.2291, 0.332], [0.332, 0.641]], [[0.2409, 0.3469], [0.3469, 0.6542]], [[0.258, 0.3731], [0.3731, 0.7004]], [[0.2692, 0.3943], [0.3943, 0.7412]], [[0.2798, 0.4047], [0.4047, 0.7459]], [[0.2867, 0.412], [0.412, 0.7454]], [[0.3018, 0.4283], [0.4283, 0.7602]], [[0.2904, 0.4127], [0.4127, 0.7353]], [[0.3271, 0.4684], [0.4684, 0.8304]], [[0.3373, 0.4754], [0.4754, 0.8191]], [[0.338, 0.4837], [0.4837, 0.8489]], [[0.3487, 0.4909], [0.4909, 0.8443]], [[0.3414, 0.4873], [0.4873, 0.8509]], [[0.3587, 0.5117], [0.5117, 0.8881]], [[0.3808, 0.5445], [0.5445, 0.9447]], [[0.3708, 0.5317], [0.5317, 0.9267]], [[0.3771, 0.5431], [0.5431, 0.9502]], [[0.3556, 0.5168], [0.5168, 0.9234]], [[0.3632, 0.5331], [0.5331, 0.961]], [[0.3369, 0.5079], [0.5079, 0.9514]], [[0.325, 0.4868], [0.4868, 0.9155]], [[0.3407, 0.5178], [0.5178, 0.9837]], [[0.3189, 0.4833], [0.4833, 0.9289]], [[0.3063, 0.4748], [0.4748, 0.9458]], [[0.3013, 0.4734], [0.4734, 0.9647]], [[0.2984, 0.462], [0.462, 0.9292]], [[0.2652, 0.4183], [0.4183, 0.8731]], [[0.2459, 0.3857], [0.3857, 0.8158]], [[0.2461, 0.3924], [0.3924, 0.8513]], [[0.2217, 0.3529], [0.3529, 0.7797]], [[0.2212, 0.3497], [0.3497, 0.7746]], [[0.2163, 0.3425], [0.3425, 0.7615]], [[0.2008, 0.3226], [0.3226, 0.7396]], [[0.2155, 0.3352], [0.3352, 0.7396]], [[0.2004, 0.3186], [0.3186, 0.7288]], [[0.194, 0.3059], [0.3059, 0.7014]], [[0.1947, 0.309], [0.309, 0.7098]], [[0.1966, 0.312], [0.312, 0.7235]], [[0.1928, 0.307], [0.307, 0.7173]], [[0.1915, 0.3001], [0.3001, 0.6925]], [[0.2117, 0.3286], [0.3286, 0.7411]], [[0.2074, 0.3155], [0.3155, 0.6933]], [[0.2068, 0.3179], [0.3179, 0.7027]], [[0.2093, 0.3208], [0.3208, 0.7109]], [[0.2243, 0.3339], [0.3339, 0.7111]], [[0.2303, 0.3473], [0.3473, 0.7404]], [[0.246, 0.3721], [0.3721, 0.7791]], [[0.2475, 0.3537], [0.3537, 0.7076]], [[0.2683, 0.3896], [0.3896, 0.7742]], [[0.2901, 0.4092], [0.4092, 0.771]], [[0.2874, 0.4138], [0.4138, 0.8013]], [[0.2863, 0.4022], [0.4022, 0.7584]], [[0.2895, 0.4128], [0.4128, 0.7844]], [[0.3206, 0.4505], [0.4505, 0.831]], [[0.3163, 0.4534], [0.4534, 0.856]], [[0.3273, 0.4632], [0.4632, 0.8559]], [[0.3419, 0.4783], [0.4783, 0.8696]], [[0.3185, 0.4271], [0.4271, 0.7552]], [[0.3508, 0.4874], [0.4874, 0.8833]], [[0.3553, 0.4803], [0.4803, 0.8424]], [[0.3344, 0.47], [0.47, 0.8728]], [[0.3215, 0.4499], [0.4499, 0.8381]], [[0.3302, 0.4504], [0.4504, 0.8198]], [[0.3039, 0.4131], [0.4131, 0.7636]], [[0.3017, 0.4292], [0.4292, 0.8334]], [[0.2804, 0.3899], [0.3899, 0.7592]], [[0.2705, 0.383], [0.383, 0.7621]], [[0.265, 0.3732], [0.3732, 0.752]], [[0.267, 0.3685], [0.3685, 0.73]], [[0.233, 0.3221], [0.3221, 0.6666]], [[0.24, 0.3304], [0.3304, 0.6798]], [[0.2274, 0.3157], [0.3157, 0.6674]], [[0.2337, 0.3184], [0.3184, 0.6621]], [[0.2166, 0.3045], [0.3045, 0.6657]], [[0.2152, 0.2994], [0.2994, 0.6577]], [[0.1943, 0.2773], [0.2773, 0.6383]], [[0.2031, 0.2945], [0.2945, 0.6824]], [[0.2135, 0.3025], [0.3025, 0.6799]], [[0.2105, 0.2968], [0.2968, 0.6706]], [[0.2182, 0.3061], [0.3061, 0.6822]], [[0.2308, 0.3368], [0.3368, 0.7687]], [[0.2166, 0.3123], [0.3123, 0.7163]], [[0.2295, 0.3364], [0.3364, 0.774]], [[0.2429, 0.3623], [0.3623, 0.8314]], [[0.2585, 0.3844], [0.3844, 0.8646]], [[0.2693, 0.3824], [0.3824, 0.8161]], [[0.2785, 0.3988], [0.3988, 0.8489]], [[0.2889, 0.4169], [0.4169, 0.8855]], [[0.3119, 0.4467], [0.4467, 0.9283]], [[0.3094, 0.4371], [0.4371, 0.8997]], [[0.3196, 0.4431], [0.4431, 0.8863]], [[0.3264, 0.4523], [0.4523, 0.8989]], [[0.3374, 0.4592], [0.4592, 0.8891]], [[0.3305, 0.4485], [0.4485, 0.8751]], [[0.3448, 0.4726], [0.4726, 0.9176]], [[0.363, 0.4743], [0.4743, 0.8647]], [[0.3359, 0.4449], [0.4449, 0.8395]], [[0.3505, 0.4443], [0.4443, 0.8007]], [[0.3285, 0.4131], [0.4131, 0.7559]], [[0.325, 0.4055], [0.4055, 0.7292]], [[0.3264, 0.3928], [0.3928, 0.6866]], [[0.3042, 0.3699], [0.3699, 0.67]], [[0.2893, 0.3533], [0.3533, 0.6536]], [[0.2918, 0.3468], [0.3468, 0.6283]], [[0.3062, 0.3492], [0.3492, 0.6024]], [[0.295, 0.3427], [0.3427, 0.6148]], [[0.2861, 0.3413], [0.3413, 0.6327]], [[0.2722, 0.3154], [0.3154, 0.5854]], [[0.2984, 0.3359], [0.3359, 0.5933]], [[0.2865, 0.3338], [0.3338, 0.6265]], [[0.2649, 0.3115], [0.3115, 0.6065]], [[0.2736, 0.3257], [0.3257, 0.6388]], [[0.2743, 0.3253], [0.3253, 0.6423]], [[0.2624, 0.3125], [0.3125, 0.6334]], [[0.283, 0.3399], [0.3399, 0.6825]], [[0.2713, 0.3297], [0.3297, 0.6768]], [[0.2768, 0.341], [0.341, 0.7165]], [[0.2748, 0.3394], [0.3394, 0.6999]], [[0.2858, 0.3668], [0.3668, 0.7838]], [[0.2955, 0.3776], [0.3776, 0.7948]], [[0.2936, 0.3707], [0.3707, 0.7742]], [[0.3098, 0.4092], [0.4092, 0.8801]], [[0.3189, 0.4152], [0.4152, 0.8683]], [[0.3215, 0.409], [0.409, 0.8498]], [[0.326, 0.4203], [0.4203, 0.8769]], [[0.3415, 0.4364], [0.4364, 0.8822]], [[0.3299, 0.4198], [0.4198, 0.8511]], [[0.3543, 0.4459], [0.4459, 0.894]], [[0.3378, 0.4286], [0.4286, 0.8795]], [[0.3151, 0.3913], [0.3913, 0.8178]], [[0.3346, 0.4083], [0.4083, 0.8272]], [[0.3352, 0.4054], [0.4054, 0.8223]], [[0.3047, 0.3609], [0.3609, 0.7448]], [[0.3035, 0.3526], [0.3526, 0.7217]], [[0.2943, 0.3463], [0.3463, 0.741]], [[0.2962, 0.336], [0.336, 0.6913]], [[0.2846, 0.3131], [0.3131, 0.6358]], [[0.2892, 0.3176], [0.3176, 0.6535]], [[0.2768, 0.3023], [0.3023, 0.6297]], [[0.2903, 0.3169], [0.3169, 0.6492]], [[0.2945, 0.3175], [0.3175, 0.6416]], [[0.2831, 0.2988], [0.2988, 0.5924]], [[0.2901, 0.3078], [0.3078, 0.6223]], [[0.3032, 0.3148], [0.3148, 0.6093]], [[0.2977, 0.3051], [0.3051, 0.5864]], [[0.3046, 0.3253], [0.3253, 0.6549]], [[0.3051, 0.3172], [0.3172, 0.6193]], [[0.3128, 0.3182], [0.3182, 0.6105]], [[0.3248, 0.3391], [0.3391, 0.6578]], [[0.3171, 0.328], [0.328, 0.6345]], [[0.3643, 0.3771], [0.3771, 0.6871]], [[0.3527, 0.366], [0.366, 0.6858]], [[0.383, 0.4006], [0.4006, 0.726]], [[0.3713, 0.3959], [0.3959, 0.7435]], [[0.3754, 0.4017], [0.4017, 0.7531]], [[0.3851, 0.4088], [0.4088, 0.7581]], [[0.4053, 0.4268], [0.4268, 0.7697]], [[0.4019, 0.4332], [0.4332, 0.8199]], [[0.4062, 0.4388], [0.4388, 0.8303]], [[0.3844, 0.4136], [0.4136, 0.8026]], [[0.39, 0.422], [0.422, 0.8291]], [[0.3611, 0.3996], [0.3996, 0.8153]], [[0.3781, 0.4042], [0.4042, 0.7991]], [[0.3379, 0.3645], [0.3645, 0.767]], [[0.322, 0.3416], [0.3416, 0.7383]], [[0.3302, 0.3459], [0.3459, 0.7382]], [[0.3182, 0.3365], [0.3365, 0.7454]], [[0.3057, 0.3084], [0.3084, 0.664]], [[0.3114, 0.3233], [0.3233, 0.7163]], [[0.3251, 0.3311], [0.3311, 0.7093]], [[0.3092, 0.3044], [0.3044, 0.6579]], [[0.307, 0.3022], [0.3022, 0.6472]], [[0.2971, 0.2843], [0.2843, 0.6067]], [[0.3082, 0.2934], [0.2934, 0.6244]], [[0.3119, 0.304], [0.304, 0.6608]], [[0.3195, 0.3041], [0.3041, 0.6328]], [[0.3206, 0.3059], [0.3059, 0.6463]], [[0.3151, 0.2993], [0.2993, 0.6271]], [[0.3228, 0.3051], [0.3051, 0.6306]], [[0.3652, 0.3463], [0.3463, 0.6787]], [[0.346, 0.3282], [0.3282, 0.6573]], [[0.3558, 0.3402], [0.3402, 0.6795]], [[0.3646, 0.352], [0.352, 0.6942]], [[0.3638, 0.3503], [0.3503, 0.6879]], [[0.3977, 0.3807], [0.3807, 0.7038]], [[0.379, 0.3622], [0.3622, 0.681]], [[0.3827, 0.3646], [0.3646, 0.6963]], [[0.4101, 0.3868], [0.3868, 0.6997]], [[0.4151, 0.3894], [0.3894, 0.7119]], [[0.4105, 0.385], [0.385, 0.6899]], [[0.432, 0.4144], [0.4144, 0.7492]], [[0.4023, 0.3875], [0.3875, 0.7223]], [[0.4029, 0.3815], [0.3815, 0.7135]], [[0.4241, 0.3953], [0.3953, 0.7195]], [[0.3973, 0.3687], [0.3687, 0.683]], [[0.3875, 0.3476], [0.3476, 0.6321]], [[0.3771, 0.3324], [0.3324, 0.6197]], [[0.3837, 0.334], [0.334, 0.6146]], [[0.3892, 0.3405], [0.3405, 0.6306]], [[0.3585, 0.3113], [0.3113, 0.6109]], [[0.328, 0.275], [0.275, 0.5609]], [[0.3481, 0.3007], [0.3007, 0.6111]], [[0.353, 0.3054], [0.3054, 0.6397]], [[0.3299, 0.2807], [0.2807, 0.6221]], [[0.3236, 0.2703], [0.2703, 0.5696]], [[0.3424, 0.2923], [0.2923, 0.6147]], [[0.3387, 0.2916], [0.2916, 0.6273]], [[0.3504, 0.3066], [0.3066, 0.6613]], [[0.3688, 0.3249], [0.3249, 0.6759]], [[0.3294, 0.2927], [0.2927, 0.6597]], [[0.3418, 0.2967], [0.2967, 0.6569]], [[0.3542, 0.305], [0.305, 0.652]], [[0.3338, 0.2861], [0.2861, 0.6545]], [[0.3693, 0.3155], [0.3155, 0.6295]], [[0.3498, 0.3034], [0.3034, 0.6629]], [[0.3757, 0.3301], [0.3301, 0.6859]], [[0.3477, 0.3064], [0.3064, 0.6957]], [[0.3813, 0.3288], [0.3288, 0.6839]], [[0.402, 0.3575], [0.3575, 0.7361]], [[0.3794, 0.3296], [0.3296, 0.6866]], [[0.3858, 0.336], [0.336, 0.7069]], [[0.3988, 0.3491], [0.3491, 0.7166]], [[0.4121, 0.3572], [0.3572, 0.7192]], [[0.4, 0.3397], [0.3397, 0.6809]], [[0.4155, 0.3586], [0.3586, 0.7068]], [[0.3886, 0.3309], [0.3309, 0.6835]], [[0.4236, 0.3546], [0.3546, 0.6741]], [[0.4218, 0.355], [0.355, 0.6732]], [[0.4318, 0.347], [0.347, 0.6252]], [[0.4233, 0.3374], [0.3374, 0.6257]], [[0.4109, 0.3265], [0.3265, 0.6249]], [[0.4169, 0.3279], [0.3279, 0.6088]], [[0.3869, 0.2969], [0.2969, 0.567]], [[0.3871, 0.2945], [0.2945, 0.5609]], [[0.4098, 0.3114], [0.3114, 0.5797]], [[0.4125, 0.3056], [0.3056, 0.546]], [[0.386, 0.2854], [0.2854, 0.5639]], [[0.3764, 0.275], [0.275, 0.5399]], [[0.3995, 0.2942], [0.2942, 0.572]], [[0.4061, 0.2998], [0.2998, 0.5731]], [[0.4231, 0.3111], [0.3111, 0.5683]], [[0.4195, 0.3162], [0.3162, 0.6258]], [[0.3935, 0.2886], [0.2886, 0.5938]], [[0.4032, 0.2996], [0.2996, 0.6002]], [[0.4234, 0.3184], [0.3184, 0.627]], [[0.4439, 0.3377], [0.3377, 0.6686]], [[0.4336, 0.3333], [0.3333, 0.6714]], [[0.4118, 0.3149], [0.3149, 0.6581]], [[0.4302, 0.3342], [0.3342, 0.6841]], [[0.4315, 0.3324], [0.3324, 0.664]], [[0.4301, 0.3355], [0.3355, 0.71]], [[0.43, 0.3341], [0.3341, 0.7143]], [[0.4332, 0.3333], [0.3333, 0.696]], [[0.4262, 0.3264], [0.3264, 0.6954]], [[0.4031, 0.3031], [0.3031, 0.6929]], [[0.4325, 0.3228], [0.3228, 0.6924]], [[0.4122, 0.3098], [0.3098, 0.7186]], [[0.396, 0.2825], [0.2825, 0.6371]], [[0.4152, 0.2971], [0.2971, 0.6725]], [[0.3975, 0.2782], [0.2782, 0.6205]], [[0.4168, 0.2853], [0.2853, 0.6145]], [[0.3874, 0.2578], [0.2578, 0.5929]], [[0.4115, 0.2748], [0.2748, 0.5728]], [[0.3999, 0.2627], [0.2627, 0.5853]], [[0.3991, 0.2614], [0.2614, 0.5477]], [[0.3698, 0.2382], [0.2382, 0.5167]], [[0.4173, 0.2783], [0.2783, 0.5763]], [[0.3977, 0.2569], [0.2569, 0.5248]], [[0.4131, 0.2706], [0.2706, 0.5538]], [[0.4369, 0.2901], [0.2901, 0.5757]], [[0.42, 0.274], [0.274, 0.57]], [[0.4147, 0.2739], [0.2739, 0.5637]], [[0.4534, 0.3019], [0.3019, 0.608]], [[0.4484, 0.2997], [0.2997, 0.578]], [[0.4311, 0.2831], [0.2831, 0.5882]], [[0.432, 0.2957], [0.2957, 0.6369]], [[0.4473, 0.3135], [0.3135, 0.6424]], [[0.4804, 0.3402], [0.3402, 0.6674]], [[0.478, 0.3412], [0.3412, 0.678]], [[0.4965, 0.3588], [0.3588, 0.7012]], [[0.5339, 0.3819], [0.3819, 0.7026]], [[0.4849, 0.3416], [0.3416, 0.6601]], [[0.5256, 0.3715], [0.3715, 0.67]], [[0.4708, 0.3337], [0.3337, 0.6641]], [[0.4942, 0.3408], [0.3408, 0.64]], [[0.5046, 0.3409], [0.3409, 0.6142]], [[0.5066, 0.343], [0.343, 0.6238]], [[0.4889, 0.3246], [0.3246, 0.5999]], [[0.477, 0.3133], [0.3133, 0.6088]], [[0.4396, 0.273], [0.273, 0.5441]], [[0.4453, 0.2775], [0.2775, 0.5561]], [[0.4644, 0.2595], [0.2595, 0.5204]], [[0.5544, 0.2895], [0.2895, 0.5264]], [[0.5741, 0.2708], [0.2708, 0.4774]], [[0.6063, 0.2772], [0.2772, 0.4855]], [[0.6081, 0.2431], [0.2431, 0.402]], [[0.7067, 0.2754], [0.2754, 0.3855]], [[0.6154, 0.2312], [0.2312, 0.4255]], [[0.7263, 0.2694], [0.2694, 0.3406]], [[0.7859, 0.3071], [0.3071, 0.4036]], [[0.783, 0.3122], [0.3122, 0.4092]], [[0.7877, 0.3044], [0.3044, 0.3651]], [[0.7973, 0.3346], [0.3346, 0.4181]], [[0.7662, 0.295], [0.295, 0.3575]], [[0.8102, 0.3154], [0.3154, 0.3065]], [[0.7653, 0.2918], [0.2918, 0.3434]], [[0.7546, 0.2777], [0.2777, 0.3338]], [[0.8378, 0.3039], [0.3039, 0.3094]], [[0.8013, 0.313], [0.313, 0.3715]], [[0.9143, 0.3956], [0.3956, 0.42]], [[0.8665, 0.352], [0.352, 0.3629]], [[0.848, 0.3316], [0.3316, 0.3332]], [[0.8451, 0.3375], [0.3375, 0.3306]], [[0.8617, 0.341], [0.341, 0.3071]], [[0.8205, 0.3054], [0.3054, 0.2742]], [[0.8034, 0.301], [0.301, 0.2936]], [[0.74, 0.2787], [0.2787, 0.3043]], [[0.6962, 0.2503], [0.2503, 0.2722]], [[0.7285, 0.2824], [0.2824, 0.2637]], [[0.7285, 0.2968], [0.2968, 0.2905]], [[0.6729, 0.3013], [0.3013, 0.3559]], [[0.6867, 0.3062], [0.3062, 0.345]], [[0.7395, 0.319], [0.319, 0.2952]], [[0.6694, 0.3025], [0.3025, 0.3108]], [[0.6172, 0.2836], [0.2836, 0.3326]], [[0.622, 0.2784], [0.2784, 0.3176]], [[0.6302, 0.2737], [0.2737, 0.3036]], [[0.6181, 0.2689], [0.2689, 0.2909]], [[0.7392, 0.3442], [0.3442, 0.3316]], [[0.6139, 0.2987], [0.2987, 0.3832]], [[0.5833, 0.2723], [0.2723, 0.3819]], [[0.6458, 0.3171], [0.3171, 0.3573]], [[0.6724, 0.3311], [0.3311, 0.3332]], [[0.5784, 0.2764], [0.2764, 0.3408]], [[0.6144, 0.2647], [0.2647, 0.2903]], [[0.6502, 0.2834], [0.2834, 0.2721]], [[0.5467, 0.2271], [0.2271, 0.288]], [[0.6401, 0.2754], [0.2754, 0.262]], [[0.6785, 0.3217], [0.3217, 0.327]], [[0.6477, 0.3047], [0.3047, 0.3667]], [[0.63, 0.2692], [0.2692, 0.305]], [[0.6107, 0.2565], [0.2565, 0.2572]], [[0.6199, 0.2772], [0.2772, 0.3069]], [[0.5691, 0.2343], [0.2343, 0.2813]], [[0.6109, 0.272], [0.272, 0.3171]], [[0.5501, 0.231], [0.231, 0.2918]], [[0.6099, 0.2506], [0.2506, 0.2857]], [[0.6424, 0.2865], [0.2865, 0.3349]], [[0.6341, 0.286], [0.286, 0.3429]], [[0.5778, 0.2115], [0.2115, 0.2434]], [[0.5805, 0.2231], [0.2231, 0.2686]], [[0.5898, 0.2228], [0.2228, 0.2655]], [[0.5676, 0.2121], [0.2121, 0.2498]], [[0.6364, 0.2499], [0.2499, 0.2411]], [[0.664, 0.2829], [0.2829, 0.2769]], [[0.6778, 0.297], [0.297, 0.3091]], [[0.6371, 0.2752], [0.2752, 0.3075]], [[0.6483, 0.2784], [0.2784, 0.3078]], [[0.6436, 0.2599], [0.2599, 0.2642]], [[0.6553, 0.2599], [0.2599, 0.2649]], [[0.6639, 0.2872], [0.2872, 0.3195]], [[0.6542, 0.2852], [0.2852, 0.3741]], [[0.6364, 0.2377], [0.2377, 0.3033]], [[0.6695, 0.236], [0.236, 0.2183]], [[0.6291, 0.2381], [0.2381, 0.2889]], [[0.6465, 0.2648], [0.2648, 0.317]], [[0.6679, 0.2732], [0.2732, 0.2974]], [[0.7134, 0.2892], [0.2892, 0.2655]], [[0.7036, 0.2912], [0.2912, 0.2715]], [[0.6609, 0.2982], [0.2982, 0.3832]], [[0.7049, 0.3066], [0.3066, 0.328]], [[0.7274, 0.3195], [0.3195, 0.3208]], [[0.6224, 0.2535], [0.2535, 0.3071]], [[0.6827, 0.2717], [0.2717, 0.2825]], [[0.6373, 0.2605], [0.2605, 0.2695]], [[0.6637, 0.2669], [0.2669, 0.2521]], [[0.6433, 0.2748], [0.2748, 0.2522]], [[0.603, 0.2491], [0.2491, 0.2462]], [[0.6385, 0.2599], [0.2599, 0.2487]], [[0.7066, 0.3034], [0.3034, 0.2463]], [[0.6585, 0.2884], [0.2884, 0.2816]], [[0.6081, 0.2538], [0.2538, 0.2795]], [[0.6263, 0.2593], [0.2593, 0.2685]], [[0.6864, 0.2879], [0.2879, 0.2577]], [[0.6536, 0.2653], [0.2653, 0.2699]], [[0.6348, 0.2457], [0.2457, 0.2518]], [[0.6327, 0.2566], [0.2566, 0.2737]], [[0.6447, 0.2763], [0.2763, 0.2843]], [[0.6422, 0.2764], [0.2764, 0.267]], [[0.664, 0.309], [0.309, 0.324]], [[0.6367, 0.2862], [0.2862, 0.2968]], [[0.5606, 0.2324], [0.2324, 0.2526]], [[0.6167, 0.2806], [0.2806, 0.3135]], [[0.6388, 0.2846], [0.2846, 0.3373]], [[0.6856, 0.3272], [0.3272, 0.353]], [[0.71, 0.3272], [0.3272, 0.323]], [[0.7318, 0.3508], [0.3508, 0.3316]], [[0.6292, 0.2807], [0.2807, 0.3031]], [[0.6408, 0.2962], [0.2962, 0.3151]], [[0.6703, 0.3137], [0.3137, 0.3327]], [[0.6353, 0.2835], [0.2835, 0.2843]], [[0.6492, 0.3008], [0.3008, 0.2892]], [[0.6387, 0.3094], [0.3094, 0.3392]], [[0.6452, 0.3019], [0.3019, 0.3153]], [[0.5881, 0.2528], [0.2528, 0.2775]], [[0.6333, 0.2838], [0.2838, 0.2852]], [[0.5945, 0.2806], [0.2806, 0.3199]], [[0.5801, 0.2712], [0.2712, 0.3323]], [[0.5927, 0.2685], [0.2685, 0.298]], [[0.6478, 0.3182], [0.3182, 0.323]], [[0.6592, 0.3076], [0.3076, 0.2656]], [[0.7016, 0.3608], [0.3608, 0.3125]], [[0.6703, 0.3519], [0.3519, 0.3569]], [[0.5818, 0.2859], [0.2859, 0.3535]], [[0.5964, 0.2786], [0.2786, 0.2998]], [[0.6397, 0.303], [0.303, 0.3079]], [[0.6673, 0.3489], [0.3489, 0.3591]], [[0.5789, 0.2773], [0.2773, 0.3164]], [[0.5701, 0.2679], [0.2679, 0.3111]], [[0.5616, 0.2638], [0.2638, 0.2852]], [[0.673, 0.3508], [0.3508, 0.3194]], [[0.5983, 0.3095], [0.3095, 0.3544]], [[0.5739, 0.2794], [0.2794, 0.3854]], [[0.6736, 0.3325], [0.3325, 0.3131]], [[0.5432, 0.2538], [0.2538, 0.3874]], [[0.6505, 0.3097], [0.3097, 0.3035]], [[0.5521, 0.2588], [0.2588, 0.2994]], [[0.5501, 0.2509], [0.2509, 0.2962]], [[0.6281, 0.3074], [0.3074, 0.3032]], [[0.6127, 0.2916], [0.2916, 0.2985]], [[0.6125, 0.309], [0.309, 0.3511]], [[0.5238, 0.2466], [0.2466, 0.3308]], [[0.6102, 0.3275], [0.3275, 0.3619]], [[0.6575, 0.3546], [0.3546, 0.3657]], [[0.5882, 0.299], [0.299, 0.3401]], [[0.5559, 0.2882], [0.2882, 0.3497]], [[0.5521, 0.2862], [0.2862, 0.3511]], [[0.5707, 0.294], [0.294, 0.3365]], [[0.6028, 0.308], [0.308, 0.3467]], [[0.6013, 0.3092], [0.3092, 0.3671]], [[0.5772, 0.2939], [0.2939, 0.3394]], [[0.6771, 0.3666], [0.3666, 0.393]], [[0.63, 0.3259], [0.3259, 0.3508]], [[0.5661, 0.2773], [0.2773, 0.3649]], [[0.5102, 0.2379], [0.2379, 0.341]], [[0.601, 0.2953], [0.2953, 0.324]], [[0.6395, 0.3134], [0.3134, 0.3254]], [[0.6187, 0.3001], [0.3001, 0.3284]], [[0.6211, 0.3153], [0.3153, 0.3359]], [[0.6392, 0.3217], [0.3217, 0.314]], [[0.6639, 0.3311], [0.3311, 0.3504]], [[0.5848, 0.2848], [0.2848, 0.3546]], [[0.5549, 0.274], [0.274, 0.3898]], [[0.5369, 0.2634], [0.2634, 0.3611]], [[0.5721, 0.2914], [0.2914, 0.3741]], [[0.5837, 0.2931], [0.2931, 0.3293]], [[0.6426, 0.3446], [0.3446, 0.325]], [[0.6427, 0.3533], [0.3533, 0.3837]], [[0.5876, 0.2981], [0.2981, 0.3347]], [[0.535, 0.2393], [0.2393, 0.3485]], [[0.5144, 0.2176], [0.2176, 0.3764]], [[0.5335, 0.2303], [0.2303, 0.3841]], [[0.5759, 0.2463], [0.2463, 0.3161]], [[0.6217, 0.2897], [0.2897, 0.3136]], [[0.5431, 0.2464], [0.2464, 0.3282]], [[0.5358, 0.2594], [0.2594, 0.3279]], [[0.6294, 0.3272], [0.3272, 0.3318]], [[0.599, 0.2938], [0.2938, 0.316]], [[0.5594, 0.2526], [0.2526, 0.3137]], [[0.5776, 0.2686], [0.2686, 0.3484]], [[0.529, 0.2229], [0.2229, 0.3303]], [[0.5682, 0.2579], [0.2579, 0.2993]], [[0.5808, 0.2716], [0.2716, 0.3132]], [[0.5157, 0.2371], [0.2371, 0.3367]], [[0.5792, 0.2973], [0.2973, 0.3593]], [[0.6669, 0.3478], [0.3478, 0.3734]], [[0.6048, 0.3071], [0.3071, 0.3964]], [[0.547, 0.2597], [0.2597, 0.389]], [[0.5737, 0.2624], [0.2624, 0.3196]], [[0.6437, 0.3152], [0.3152, 0.3235]], [[0.5356, 0.2644], [0.2644, 0.4098]], [[0.5445, 0.2673], [0.2673, 0.3586]], [[0.6268, 0.3185], [0.3185, 0.3513]], [[0.5777, 0.2754], [0.2754, 0.3651]], [[0.5349, 0.263], [0.263, 0.4395]], [[0.5596, 0.2609], [0.2609, 0.3632]], [[0.5982, 0.2883], [0.2883, 0.362]], [[0.612, 0.2887], [0.2887, 0.3523]], [[0.6119, 0.288], [0.288, 0.3632]], [[0.5727, 0.2656], [0.2656, 0.3995]], [[0.5548, 0.2334], [0.2334, 0.3782]], [[0.6417, 0.2849], [0.2849, 0.3383]], [[0.7202, 0.3474], [0.3474, 0.3693]], [[0.6182, 0.2917], [0.2917, 0.3305]], [[0.5783, 0.2635], [0.2635, 0.3212]], [[0.5671, 0.251], [0.251, 0.3368]], [[0.5606, 0.2485], [0.2485, 0.3654]], [[0.5502, 0.248], [0.248, 0.3995]], [[0.5261, 0.2245], [0.2245, 0.419]], [[0.5222, 0.2179], [0.2179, 0.4639]], [[0.5346, 0.2616], [0.2616, 0.4475]], [[0.5791, 0.316], [0.316, 0.3611]], [[0.6246, 0.3503], [0.3503, 0.3343]], [[0.6008, 0.3437], [0.3437, 0.3738]], [[0.5907, 0.3233], [0.3233, 0.3701]], [[0.63, 0.3506], [0.3506, 0.4147]], [[0.5934, 0.3075], [0.3075, 0.3983]], [[0.6304, 0.3239], [0.3239, 0.4297]], [[0.5682, 0.253], [0.253, 0.3768]], [[0.6172, 0.2746], [0.2746, 0.4272]], [[0.627, 0.2824], [0.2824, 0.4279]], [[0.6197, 0.3111], [0.3111, 0.4765]], [[0.6095, 0.3122], [0.3122, 0.3661]], [[0.5781, 0.3079], [0.3079, 0.34]], [[0.5801, 0.2979], [0.2979, 0.3468]], [[0.5958, 0.3056], [0.3056, 0.3857]], [[0.6187, 0.3038], [0.3038, 0.39]], [[0.6071, 0.2909], [0.2909, 0.4058]], [[0.5709, 0.2465], [0.2465, 0.4419]], [[0.5708, 0.2436], [0.2436, 0.4678]], [[0.5927, 0.2297], [0.2297, 0.4227]], [[0.5823, 0.214], [0.214, 0.4103]], [[0.5797, 0.1937], [0.1937, 0.3685]], [[0.6095, 0.193], [0.193, 0.3816]], [[0.685, 0.2371], [0.2371, 0.3453]], [[0.6921, 0.2588], [0.2588, 0.2934]], [[0.5784, 0.2162], [0.2162, 0.3162]], [[0.6052, 0.2599], [0.2599, 0.3118]], [[0.6419, 0.3033], [0.3033, 0.2716]], [[0.7216, 0.3556], [0.3556, 0.266]], [[0.6495, 0.3139], [0.3139, 0.2868]], [[0.5355, 0.2371], [0.2371, 0.2756]], [[0.6168, 0.2989], [0.2989, 0.2903]], [[0.5807, 0.28], [0.28, 0.3072]], [[0.561, 0.2661], [0.2661, 0.3183]], [[0.5667, 0.267], [0.267, 0.3063]], [[0.5351, 0.2446], [0.2446, 0.312]], [[0.5856, 0.2844], [0.2844, 0.3361]], [[0.6076, 0.3151], [0.3151, 0.4127]], [[0.5614, 0.2763], [0.2763, 0.4233]], [[0.5233, 0.2357], [0.2357, 0.4048]], [[0.5066, 0.2101], [0.2101, 0.3679]], [[0.5264, 0.2341], [0.2341, 0.38]], [[0.5685, 0.2818], [0.2818, 0.4248]], [[0.6251, 0.3216], [0.3216, 0.4071]], [[0.5791, 0.2979], [0.2979, 0.3565]], [[0.5255, 0.267], [0.267, 0.2995]], [[0.6099, 0.3469], [0.3469, 0.3744]], [[0.6888, 0.3982], [0.3982, 0.3771]], [[0.5969, 0.3229], [0.3229, 0.3504]], [[0.5563, 0.2738], [0.2738, 0.2811]], [[0.6013, 0.3056], [0.3056, 0.3112]], [[0.7003, 0.4021], [0.4021, 0.4569]], [[0.6521, 0.3503], [0.3503, 0.3509]], [[0.5284, 0.2486], [0.2486, 0.3766]], [[0.5533, 0.2576], [0.2576, 0.2695]], [[0.5756, 0.2839], [0.2839, 0.4528]], [[0.6556, 0.326], [0.326, 0.334]], [[0.6062, 0.3055], [0.3055, 0.5097]], [[0.6054, 0.2852], [0.2852, 0.3181]], [[0.5813, 0.2761], [0.2761, 0.4087]], [[0.5447, 0.2368], [0.2368, 0.3531]], [[0.6092, 0.2658], [0.2658, 0.3163]], [[0.6324, 0.3033], [0.3033, 0.5236]], [[0.6223, 0.2697], [0.2697, 0.3225]], [[0.5743, 0.2326], [0.2326, 0.4136]], [[0.5758, 0.2429], [0.2429, 0.4061]], [[0.5843, 0.2307], [0.2307, 0.314]], [[0.5657, 0.2244], [0.2244, 0.4733]], [[0.5837, 0.2352], [0.2352, 0.4037]], [[0.6437, 0.269], [0.269, 0.3613]], [[0.5937, 0.2529], [0.2529, 0.5221]], [[0.6096, 0.255], [0.255, 0.3723]], [[0.5529, 0.2189], [0.2189, 0.2895]], [[0.5928, 0.2627], [0.2627, 0.3556]], [[0.6305, 0.3146], [0.3146, 0.393]], [[0.6598, 0.3325], [0.3325, 0.3212]], [[0.6089, 0.2909], [0.2909, 0.254]], [[0.5822, 0.2805], [0.2805, 0.2642]], [[0.5658, 0.2679], [0.2679, 0.2733]], [[0.6212, 0.2919], [0.2919, 0.2693]], [[0.6626, 0.3149], [0.3149, 0.2982]], [[0.6252, 0.2767], [0.2767, 0.3316]], [[0.6367, 0.2675], [0.2675, 0.3695]], [[0.6389, 0.2441], [0.2441, 0.3765]], [[0.6246, 0.209], [0.209, 0.3681]], [[0.6132, 0.1944], [0.1944, 0.3986]], [[0.6349, 0.1879], [0.1879, 0.4]], [[0.6428, 0.1918], [0.1918, 0.4317]], [[0.6784, 0.2157], [0.2157, 0.4162]], [[0.6983, 0.2055], [0.2055, 0.3706]], [[0.6563, 0.1785], [0.1785, 0.4662]], [[0.6596, 0.165], [0.165, 0.5445]], [[0.6897, 0.2156], [0.2156, 0.5503]], [[0.7061, 0.2367], [0.2367, 0.4723]], [[0.6955, 0.2401], [0.2401, 0.4372]], [[0.6817, 0.2467], [0.2467, 0.4475]], [[0.6847, 0.2738], [0.2738, 0.4776]], [[0.6381, 0.2466], [0.2466, 0.4901]], [[0.6287, 0.2571], [0.2571, 0.4408]], [[0.6286, 0.2699], [0.2699, 0.3483]], [[0.6806, 0.3103], [0.3103, 0.3423]], [[0.6508, 0.3017], [0.3017, 0.3824]], [[0.7005, 0.3481], [0.3481, 0.4565]], [[0.7019, 0.3611], [0.3611, 0.4786]], [[0.6976, 0.3638], [0.3638, 0.458]], [[0.6931, 0.3618], [0.3618, 0.3843]], [[0.6613, 0.3345], [0.3345, 0.3446]], [[0.6833, 0.3656], [0.3656, 0.4153]], [[0.7493, 0.4161], [0.4161, 0.483]], [[0.7659, 0.4181], [0.4181, 0.4749]], [[0.7484, 0.4119], [0.4119, 0.4798]], [[0.695, 0.3772], [0.3772, 0.5064]], [[0.6125, 0.3283], [0.3283, 0.4642]], [[0.6693, 0.3635], [0.3635, 0.4657]], [[0.7619, 0.4263], [0.4263, 0.4909]], [[0.6918, 0.3753], [0.3753, 0.4785]], [[0.6433, 0.3453], [0.3453, 0.5054]], [[0.6473, 0.359], [0.359, 0.4893]], [[0.636, 0.3338], [0.3338, 0.4387]], [[0.6503, 0.3455], [0.3455, 0.461]], [[0.6311, 0.336], [0.336, 0.4563]], [[0.6428, 0.3381], [0.3381, 0.4441]], [[0.6588, 0.3462], [0.3462, 0.4646]], [[0.6267, 0.3418], [0.3418, 0.5019]], [[0.655, 0.3582], [0.3582, 0.5061]], [[0.6345, 0.3455], [0.3455, 0.521]], [[0.6525, 0.3698], [0.3698, 0.5741]], [[0.6252, 0.3281], [0.3281, 0.4766]], [[0.653, 0.3369], [0.3369, 0.4416]], [[0.6421, 0.3471], [0.3471, 0.4574]], [[0.7034, 0.385], [0.385, 0.4552]], [[0.704, 0.3984], [0.3984, 0.4919]], [[0.703, 0.4116], [0.4116, 0.5525]], [[0.6545, 0.3654], [0.3654, 0.5652]], [[0.6973, 0.3927], [0.3927, 0.5356]], [[0.7142, 0.4125], [0.4125, 0.5293]], [[0.7214, 0.425], [0.425, 0.5591]], [[0.7179, 0.4063], [0.4063, 0.4869]], [[0.6875, 0.3654], [0.3654, 0.4055]], [[0.6805, 0.3744], [0.3744, 0.4639]], [[0.6937, 0.4015], [0.4015, 0.6053]], [[0.7629, 0.3958], [0.3958, 0.3911]], [[0.8204, 0.4862], [0.4862, 0.6823]], [[0.8362, 0.4423], [0.4423, 0.4399]], [[0.7408, 0.3917], [0.3917, 0.5312]], [[0.7469, 0.3936], [0.3936, 0.4771]], [[0.7628, 0.392], [0.392, 0.421]], [[0.8553, 0.4873], [0.4873, 0.6626]], [[0.7761, 0.404], [0.404, 0.4889]], [[0.7557, 0.3822], [0.3822, 0.4128]], [[0.7115, 0.3598], [0.3598, 0.5135]], [[0.7915, 0.4194], [0.4194, 0.579]], [[0.8096, 0.4143], [0.4143, 0.4886]], [[0.7852, 0.4051], [0.4051, 0.4842]], [[0.7768, 0.3913], [0.3913, 0.5794]], [[0.74, 0.3629], [0.3629, 0.5381]], [[0.7428, 0.3536], [0.3536, 0.491]], [[0.7221, 0.3288], [0.3288, 0.465]], [[0.7119, 0.3238], [0.3238, 0.4582]], [[0.7613, 0.3628], [0.3628, 0.5558]], [[0.7507, 0.3513], [0.3513, 0.6092]], [[0.7475, 0.3442], [0.3442, 0.5611]], [[0.7565, 0.3339], [0.3339, 0.4577]], [[0.6998, 0.2978], [0.2978, 0.4575]], [[0.7096, 0.2903], [0.2903, 0.4467]], [[0.692, 0.2935], [0.2935, 0.4165]], [[0.7202, 0.3348], [0.3348, 0.5305]], [[0.7021, 0.3113], [0.3113, 0.5828]], [[0.6927, 0.3088], [0.3088, 0.6239]]]
        },
        "ganEasy": {
            "mean": [[0.11, -0.01], [0.14, 0.13], [0.16, 0.24], [0.17, 0.37], [0.13, 0.52], [0.09, 0.69], [0.06, 0.86], [0.06, 1.04], [0.08, 1.23], [0.12, 1.42], [0.18, 1.61], [0.25, 1.8], [0.33, 2.0], [0.42, 2.18], [0.5, 2.35], [0.58, 2.51], [0.66, 2.65], [0.74, 2.79], [0.81, 2.9], [0.88, 2.99], [0.94, 3.09], [1.02, 3.16], [1.09, 3.23], [1.17, 3.29], [1.24, 3.33], [1.32, 3.37], [1.4, 3.42], [1.46, 3.44], [1.53, 3.47], [1.59, 3.48], [1.66, 3.5], [1.71, 3.51], [1.78, 3.51], [1.84, 3.51], [1.9, 3.49], [1.96, 3.47], [2.03, 3.42], [2.09, 3.37], [2.15, 3.33], [2.19, 3.26], [2.24, 3.23], [2.27, 3.17], [2.3, 3.14], [2.31, 3.09], [2.31, 3.07], [2.29, 3.04], [2.26, 3.04], [2.24, 3.01], [2.2, 2.99], [2.15, 2.96], [2.1, 2.95], [2.06, 2.91], [2.01, 2.85], [1.97, 2.79], [1.89, 2.77], [1.81, 2.74], [1.73, 2.72], [1.67, 2.66], [1.6, 2.58], [1.55, 2.49], [1.49, 2.39], [1.42, 2.3], [1.33, 2.21], [1.24, 2.12], [1.15, 2.04], [1.05, 1.97], [0.99, 1.88], [0.92, 1.81], [0.85, 1.72], [0.77, 1.67], [0.71, 1.59], [0.65, 1.53], [0.59, 1.47], [0.56, 1.4], [0.57, 1.34], [0.58, 1.3], [0.56, 1.28], [0.58, 1.26], [0.6, 1.27], [0.62, 1.28], [0.63, 1.31], [0.66, 1.35], [0.68, 1.4], [0.71, 1.45], [0.75, 1.51], [0.78, 1.57], [0.81, 1.62], [0.83, 1.69], [0.87, 1.77], [0.92, 1.84], [0.96, 1.91], [0.98, 1.98], [1.02, 2.07], [1.06, 2.14], [1.12, 2.22], [1.17, 2.29], [1.22, 2.36], [1.27, 2.43], [1.33, 2.49], [1.38, 2.56], [1.49, 2.68], [1.73, 2.79], [1.83, 2.85], [1.88, 2.91], [1.89, 2.91], [1.89, 2.85], [1.86, 2.8], [1.82, 2.72], [1.69, 2.64], [1.54, 2.59], [1.38, 2.52], [1.3, 2.45], [1.17, 2.39], [1.1, 2.32], [1.02, 2.26], [0.98, 2.2], [0.93, 2.15], [0.87, 2.1], [0.8, 2.06], [0.77, 2.02], [0.75, 1.97], [0.72, 1.92], [0.71, 1.89], [0.7, 1.86], [0.68, 1.83], [0.7, 1.8], [0.73, 1.8], [0.73, 1.8], [0.69, 1.79], [0.74, 1.8], [0.71, 1.81], [0.7, 1.82], [0.68, 1.83], [0.65, 1.84], [0.67, 1.87], [0.64, 1.87], [0.65, 1.9], [0.68, 1.92], [0.68, 1.92], [0.64, 1.92], [0.63, 1.92], [0.67, 1.94], [0.7, 1.96], [0.68, 1.97], [0.72, 1.98], [0.71, 1.99], [0.74, 2.0], [0.71, 1.99], [0.7, 1.98], [0.73, 1.99], [0.76, 2.01], [0.75, 2.0], [0.78, 2.01], [0.8, 2.03], [0.8, 2.03], [0.83, 2.02], [0.87, 2.03], [0.88, 2.02], [0.9, 2.0], [0.93, 1.99], [0.94, 1.96], [0.92, 1.93], [0.95, 1.94], [0.96, 1.91], [0.94, 1.89], [0.96, 1.89], [0.94, 1.86], [0.92, 1.85], [0.89, 1.83], [0.92, 1.86], [0.92, 1.88], [0.92, 1.89], [0.88, 1.88], [0.85, 1.86], [0.85, 1.86], [0.86, 1.86], [0.86, 1.84], [0.87, 1.82], [0.9, 1.81], [0.87, 1.76], [0.88, 1.75], [0.85, 1.71], [0.9, 1.71], [0.87, 1.67], [0.89, 1.69], [0.89, 1.69], [0.88, 1.68], [0.88, 1.69], [0.86, 1.69], [0.85, 1.7], [0.88, 1.74], [0.88, 1.74], [0.91, 1.78], [0.91, 1.77], [0.91, 1.76], [0.95, 1.8], [0.94, 1.78], [0.95, 1.78], [1.0, 1.83], [0.95, 1.75], [0.98, 1.79], [1.02, 1.82], [1.06, 1.82], [1.04, 1.86], [1.04, 1.89], [1.04, 1.92], [1.0, 1.93], [1.0, 1.96], [1.0, 1.99], [1.02, 2.01], [1.03, 2.01], [1.09, 2.02], [1.09, 1.98], [1.09, 1.93], [1.13, 1.92], [1.15, 1.89], [1.18, 1.89], [1.22, 1.85], [1.27, 1.86], [1.26, 1.82], [1.26, 1.78], [1.28, 1.76], [1.31, 1.78], [1.31, 1.76], [1.28, 1.75], [1.29, 1.76], [1.27, 1.77], [1.25, 1.77], [1.25, 1.82], [1.23, 1.83], [1.18, 1.86], [1.16, 1.9], [1.12, 1.93], [1.1, 1.98], [1.06, 1.99], [1.03, 2.04], [1.02, 2.08], [0.96, 2.09], [0.95, 2.12], [0.91, 2.13], [0.9, 2.18], [0.9, 2.2], [0.85, 2.19], [0.84, 2.21], [0.84, 2.25], [0.81, 2.25], [0.81, 2.28], [0.79, 2.29], [0.79, 2.31], [0.76, 2.29], [0.77, 2.3], [0.76, 2.3], [0.75, 2.33], [0.74, 2.29], [0.74, 2.29], [0.76, 2.29], [0.77, 2.29], [0.76, 2.27], [0.81, 2.27], [0.78, 2.24], [0.81, 2.21], [0.83, 2.21], [0.84, 2.17], [0.87, 2.16], [0.91, 2.16], [0.94, 2.12], [0.96, 2.1], [0.98, 2.07], [1.0, 2.03], [1.04, 2.01], [1.06, 1.98], [1.1, 1.96], [1.11, 1.93], [1.14, 1.92], [1.16, 1.9], [1.18, 1.87], [1.21, 1.85], [1.24, 1.85], [1.25, 1.82], [1.26, 1.8], [1.31, 1.8], [1.31, 1.78], [1.32, 1.76], [1.37, 1.78], [1.36, 1.74], [1.4, 1.72], [1.41, 1.72], [1.42, 1.69], [1.45, 1.7], [1.44, 1.67], [1.48, 1.68], [1.49, 1.69], [1.48, 1.66], [1.51, 1.66], [1.53, 1.67], [1.53, 1.66], [1.54, 1.65], [1.54, 1.65], [1.53, 1.61], [1.57, 1.64], [1.57, 1.63], [1.57, 1.59], [1.6, 1.61], [1.59, 1.61], [1.58, 1.61], [1.55, 1.62], [1.54, 1.61], [1.54, 1.64], [1.55, 1.67], [1.49, 1.67], [1.48, 1.69], [1.46, 1.69], [1.46, 1.73], [1.43, 1.73], [1.41, 1.76], [1.38, 1.76], [1.38, 1.79], [1.33, 1.78], [1.32, 1.8], [1.33, 1.84], [1.32, 1.86], [1.28, 1.86], [1.26, 1.86], [1.25, 1.88], [1.24, 1.89], [1.23, 1.91], [1.23, 1.92], [1.19, 1.93], [1.18, 1.94], [1.15, 1.93], [1.16, 1.97], [1.16, 1.99], [1.12, 1.98], [1.11, 1.99], [1.07, 1.99], [1.1, 2.02], [1.06, 2.01], [1.07, 2.04], [1.06, 2.06], [1.06, 2.06], [1.04, 2.07], [1.04, 2.07], [1.0, 2.07], [0.99, 2.07], [1.01, 2.13], [1.0, 2.12], [0.98, 2.1], [0.98, 2.13], [0.95, 2.12], [0.96, 2.14], [0.96, 2.16], [0.93, 2.16], [0.9, 2.15], [0.93, 2.18], [0.9, 2.16], [0.9, 2.18], [0.9, 2.2], [0.9, 2.19], [0.87, 2.19], [0.86, 2.2], [0.85, 2.21], [0.85, 2.21], [0.86, 2.23], [0.85, 2.23], [0.82, 2.23], [0.83, 2.24], [0.82, 2.24], [0.81, 2.24], [0.8, 2.24], [0.8, 2.24], [0.8, 2.28], [0.79, 2.27], [0.78, 2.26], [0.77, 2.26], [0.76, 2.28], [0.79, 2.28], [0.76, 2.26], [0.76, 2.28], [0.75, 2.3], [0.75, 2.27], [0.73, 2.27], [0.74, 2.32], [0.75, 2.29], [0.73, 2.29], [0.75, 2.33], [0.73, 2.3], [0.73, 2.29], [0.72, 2.31], [0.71, 2.3], [0.7, 2.28], [0.71, 2.29], [0.72, 2.27], [0.72, 2.28], [0.71, 2.29], [0.72, 2.27], [0.72, 2.27], [0.71, 2.25], [0.71, 2.29], [0.7, 2.25], [0.71, 2.26], [0.72, 2.23], [0.75, 2.21], [0.77, 2.22], [0.76, 2.18], [0.79, 2.19], [0.79, 2.15], [0.8, 2.16], [0.81, 2.14], [0.83, 2.15], [0.82, 2.13], [0.83, 2.14], [0.85, 2.11], [0.89, 2.13], [0.87, 2.11], [0.88, 2.11], [0.91, 2.1], [0.91, 2.09], [0.9, 2.09], [0.91, 2.08], [0.9, 2.07], [0.92, 2.07], [0.91, 2.05], [0.93, 2.07], [0.96, 2.06], [0.95, 2.04], [0.94, 2.03], [0.96, 2.04], [0.96, 2.03], [0.96, 2.03], [0.99, 2.03], [0.99, 2.04], [0.97, 2.03], [1.01, 2.01], [1.0, 2.01], [1.01, 2.01], [1.01, 2.01], [1.01, 1.99], [1.03, 2.0], [1.02, 1.98], [1.02, 1.99], [1.02, 1.98], [1.04, 1.98], [1.05, 1.97], [1.06, 1.98], [1.06, 1.98], [1.08, 1.97], [1.08, 1.98], [1.09, 1.95], [1.09, 1.96], [1.1, 1.95], [1.1, 1.96], [1.1, 1.94], [1.11, 1.96], [1.1, 1.95], [1.12, 1.95], [1.11, 1.94], [1.13, 1.93], [1.12, 1.94], [1.12, 1.91], [1.15, 1.93], [1.14, 1.94], [1.14, 1.92], [1.16, 1.92], [1.14, 1.91], [1.14, 1.92], [1.16, 1.93], [1.15, 1.9], [1.16, 1.9], [1.17, 1.91], [1.17, 1.9], [1.18, 1.91], [1.19, 1.92], [1.18, 1.89], [1.18, 1.91], [1.2, 1.92], [1.2, 1.89], [1.18, 1.89], [1.21, 1.91], [1.21, 1.9], [1.21, 1.9], [1.22, 1.89], [1.22, 1.89], [1.22, 1.88], [1.23, 1.88], [1.24, 1.88], [1.24, 1.88], [1.25, 1.89], [1.24, 1.89], [1.25, 1.88], [1.22, 1.87], [1.25, 1.87], [1.27, 1.88], [1.27, 1.88], [1.26, 1.87], [1.24, 1.84], [1.26, 1.86], [1.28, 1.87], [1.28, 1.88], [1.26, 1.86], [1.29, 1.87], [1.29, 1.87], [1.3, 1.87], [1.32, 1.87], [1.3, 1.86], [1.32, 1.87], [1.32, 1.87], [1.33, 1.86], [1.3, 1.88], [1.33, 1.86], [1.33, 1.86], [1.33, 1.87], [1.32, 1.87], [1.34, 1.86], [1.34, 1.87], [1.33, 1.87], [1.35, 1.87], [1.35, 1.88], [1.33, 1.86], [1.34, 1.86], [1.34, 1.84], [1.35, 1.87], [1.34, 1.84], [1.36, 1.85], [1.32, 1.85], [1.35, 1.86], [1.35, 1.87], [1.36, 1.86], [1.36, 1.88], [1.34, 1.86], [1.36, 1.87], [1.35, 1.86], [1.36, 1.85], [1.36, 1.87], [1.38, 1.86], [1.36, 1.86], [1.35, 1.87], [1.36, 1.86], [1.35, 1.86], [1.36, 1.87], [1.35, 1.86], [1.35, 1.87], [1.35, 1.87], [1.37, 1.87], [1.33, 1.84], [1.36, 1.87], [1.36, 1.87], [1.37, 1.88], [1.37, 1.86], [1.36, 1.88], [1.36, 1.86], [1.35, 1.86], [1.37, 1.86], [1.36, 1.87], [1.38, 1.87], [1.37, 1.88], [1.37, 1.87], [1.36, 1.88], [1.37, 1.87], [1.37, 1.89], [1.34, 1.88], [1.39, 1.88], [1.37, 1.9], [1.36, 1.88], [1.36, 1.88], [1.36, 1.89], [1.39, 1.9], [1.38, 1.9], [1.38, 1.89], [1.36, 1.89], [1.39, 1.9], [1.33, 1.87], [1.37, 1.9], [1.37, 1.91], [1.37, 1.91], [1.37, 1.91], [1.37, 1.91], [1.37, 1.89], [1.34, 1.9], [1.36, 1.92], [1.36, 1.91], [1.34, 1.92], [1.37, 1.91], [1.36, 1.93], [1.36, 1.9], [1.38, 1.92], [1.36, 1.91], [1.38, 1.93], [1.37, 1.94], [1.34, 1.93], [1.36, 1.93], [1.35, 1.91], [1.34, 1.93], [1.37, 1.93], [1.34, 1.94], [1.36, 1.94], [1.35, 1.97], [1.34, 1.93], [1.34, 1.95], [1.32, 1.93], [1.35, 1.94], [1.36, 1.95], [1.32, 1.95], [1.34, 1.95], [1.32, 1.95], [1.33, 1.96], [1.33, 1.96], [1.33, 1.98], [1.33, 1.96], [1.33, 1.96], [1.34, 1.98], [1.32, 1.98], [1.31, 1.96], [1.33, 1.97], [1.33, 1.97], [1.32, 1.96], [1.33, 1.98], [1.31, 1.97], [1.31, 1.98], [1.31, 1.97], [1.31, 1.99], [1.31, 1.98], [1.29, 1.97], [1.31, 1.98], [1.31, 1.99], [1.33, 2.0], [1.3, 1.98], [1.3, 2.0], [1.3, 1.98], [1.31, 2.0], [1.31, 1.99], [1.3, 2.01], [1.32, 2.0], [1.33, 2.01], [1.31, 2.02], [1.3, 1.99], [1.32, 2.0], [1.27, 1.99], [1.29, 2.0], [1.27, 2.0], [1.29, 2.0], [1.28, 2.01], [1.29, 2.02], [1.3, 2.01], [1.29, 2.0], [1.27, 2.01], [1.32, 2.01], [1.29, 2.02], [1.27, 2.0], [1.29, 2.01], [1.32, 2.04], [1.31, 2.02], [1.27, 2.02], [1.29, 2.01], [1.27, 2.01], [1.27, 2.02], [1.29, 2.01], [1.26, 2.02], [1.29, 2.03], [1.28, 2.02], [1.28, 2.03], [1.28, 2.04], [1.27, 2.01], [1.3, 2.04], [1.28, 2.03], [1.27, 2.03], [1.27, 2.03], [1.26, 2.03], [1.26, 2.03], [1.24, 2.03], [1.26, 2.04], [1.27, 2.03], [1.26, 2.03], [1.25, 2.03], [1.23, 2.03], [1.25, 2.04], [1.29, 2.05], [1.29, 2.05], [1.23, 2.02], [1.25, 2.06], [1.28, 2.03], [1.26, 2.07], [1.24, 2.03], [1.25, 2.05], [1.24, 2.06], [1.25, 2.06], [1.23, 2.06], [1.26, 2.05], [1.23, 2.06], [1.25, 2.04], [1.24, 2.06], [1.24, 2.05], [1.24, 2.06], [1.25, 2.05], [1.23, 2.05], [1.26, 2.06], [1.21, 2.06], [1.25, 2.06], [1.21, 2.06], [1.21, 2.04], [1.23, 2.06], [1.22, 2.07], [1.23, 2.07], [1.21, 2.08], [1.23, 2.08], [1.19, 2.06], [1.24, 2.07], [1.23, 2.09], [1.21, 2.09], [1.2, 2.08], [1.2, 2.07], [1.21, 2.08], [1.2, 2.07], [1.21, 2.07], [1.21, 2.07], [1.2, 2.1], [1.23, 2.09], [1.21, 2.08], [1.2, 2.07], [1.22, 2.09], [1.19, 2.09], [1.19, 2.09], [1.19, 2.07], [1.2, 2.1], [1.2, 2.08], [1.22, 2.09], [1.19, 2.09], [1.19, 2.09], [1.2, 2.09], [1.21, 2.1], [1.17, 2.09], [1.2, 2.09], [1.18, 2.09], [1.2, 2.1], [1.17, 2.09], [1.2, 2.09], [1.17, 2.08], [1.18, 2.09], [1.19, 2.09], [1.2, 2.09], [1.18, 2.09], [1.19, 2.08], [1.19, 2.09], [1.2, 2.1], [1.18, 2.1], [1.17, 2.1], [1.21, 2.09], [1.18, 2.1], [1.18, 2.09], [1.19, 2.1], [1.19, 2.1], [1.19, 2.09], [1.17, 2.11], [1.18, 2.11], [1.18, 2.09], [1.17, 2.1], [1.19, 2.11], [1.18, 2.09], [1.18, 2.1], [1.16, 2.11], [1.16, 2.09], [1.21, 2.11], [1.18, 2.11], [1.19, 2.12], [1.18, 2.1], [1.18, 2.11], [1.18, 2.11], [1.18, 2.11], [1.15, 2.1], [1.18, 2.12], [1.18, 2.12], [1.17, 2.14], [1.16, 2.11], [1.16, 2.09], [1.16, 2.11], [1.16, 2.11], [1.17, 2.12], [1.16, 2.12], [1.18, 2.1], [1.17, 2.12], [1.17, 2.12], [1.18, 2.12], [1.17, 2.12], [1.16, 2.11], [1.17, 2.1], [1.17, 2.12], [1.17, 2.12], [1.16, 2.12], [1.16, 2.12], [1.16, 2.12], [1.13, 2.12], [1.16, 2.12], [1.16, 2.13], [1.17, 2.12], [1.14, 2.12], [1.18, 2.12], [1.15, 2.1], [1.15, 2.12], [1.16, 2.11], [1.17, 2.11], [1.15, 2.12], [1.15, 2.11], [1.14, 2.11], [1.13, 2.12], [1.16, 2.15], [1.13, 2.12], [1.15, 2.13], [1.14, 2.12], [1.15, 2.13], [1.17, 2.16], [1.15, 2.13], [1.13, 2.12], [1.15, 2.12], [1.13, 2.13], [1.15, 2.14], [1.14, 2.13], [1.16, 2.16], [1.15, 2.13], [1.14, 2.13], [1.14, 2.13], [1.15, 2.15], [1.15, 2.13], [1.15, 2.13], [1.12, 2.14], [1.15, 2.13], [1.14, 2.15], [1.16, 2.14], [1.15, 2.14], [1.15, 2.13], [1.13, 2.12], [1.17, 2.15], [1.13, 2.14], [1.13, 2.13], [1.17, 2.15], [1.12, 2.14], [1.14, 2.14], [1.15, 2.14], [1.15, 2.16], [1.16, 2.13], [1.1, 2.11], [1.14, 2.16], [1.15, 2.13], [1.16, 2.14], [1.14, 2.14], [1.15, 2.16], [1.14, 2.15], [1.15, 2.16], [1.11, 2.13], [1.15, 2.14], [1.13, 2.15], [1.11, 2.12], [1.13, 2.14], [1.12, 2.14], [1.12, 2.13], [1.12, 2.14], [1.14, 2.14], [1.12, 2.13], [1.13, 2.14], [1.12, 2.14], [1.15, 2.17], [1.13, 2.14], [1.16, 2.14], [1.13, 2.14], [1.12, 2.13], [1.14, 2.14], [1.14, 2.14], [1.14, 2.15], [1.12, 2.15], [1.11, 2.13], [1.11, 2.13], [1.14, 2.15], [1.12, 2.14], [1.14, 2.15], [1.14, 2.15], [1.13, 2.15], [1.13, 2.16], [1.14, 2.16], [1.13, 2.15], [1.11, 2.14], [1.11, 2.13], [1.12, 2.14], [1.12, 2.15], [1.12, 2.15], [1.11, 2.14], [1.13, 2.16], [1.13, 2.16], [1.13, 2.16], [1.15, 2.16], [1.13, 2.14], [1.12, 2.16], [1.11, 2.16], [1.12, 2.13], [1.11, 2.17], [1.1, 2.17], [1.1, 2.14], [1.13, 2.15], [1.13, 2.16], [1.12, 2.15], [1.12, 2.16], [1.11, 2.15], [1.13, 2.16], [1.13, 2.16], [1.12, 2.15], [1.12, 2.16], [1.11, 2.14], [1.11, 2.14], [1.12, 2.16], [1.13, 2.18], [1.08, 2.17], [1.13, 2.17], [1.14, 2.17], [1.1, 2.15], [1.1, 2.16], [1.11, 2.15], [1.13, 2.17], [1.12, 2.17], [1.11, 2.18], [1.12, 2.16], [1.1, 2.15], [1.12, 2.16], [1.12, 2.16], [1.09, 2.16], [1.13, 2.15], [1.11, 2.16], [1.1, 2.17], [1.09, 2.15], [1.11, 2.16], [1.12, 2.16], [1.13, 2.16], [1.1, 2.15], [1.11, 2.16], [1.1, 2.14], [1.11, 2.16], [1.13, 2.17], [1.12, 2.17], [1.11, 2.15], [1.13, 2.15], [1.09, 2.16], [1.13, 2.16], [1.08, 2.15], [1.09, 2.16], [1.09, 2.16], [1.12, 2.16], [1.11, 2.17], [1.11, 2.16], [1.13, 2.16], [1.11, 2.17], [1.11, 2.18], [1.11, 2.17], [1.1, 2.16], [1.13, 2.16], [1.09, 2.14], [1.11, 2.16], [1.12, 2.17], [1.13, 2.15], [1.11, 2.17], [1.11, 2.17], [1.12, 2.17], [1.09, 2.16], [1.12, 2.19], [1.1, 2.15], [1.09, 2.17], [1.11, 2.16], [1.09, 2.16], [1.09, 2.17], [1.15, 2.16], [1.1, 2.17], [1.1, 2.17], [1.1, 2.16], [1.11, 2.17], [1.11, 2.16], [1.1, 2.18], [1.11, 2.16], [1.1, 2.16], [1.14, 2.17], [1.1, 2.16], [1.1, 2.16], [1.07, 2.15], [1.1, 2.17], [1.09, 2.17], [1.1, 2.16], [1.12, 2.17], [1.1, 2.17], [1.1, 2.15], [1.07, 2.16], [1.09, 2.16], [1.1, 2.18], [1.11, 2.17], [1.1, 2.18], [1.1, 2.18], [1.12, 2.17], [1.11, 2.18], [1.1, 2.17], [1.12, 2.16], [1.1, 2.17], [1.09, 2.17], [1.09, 2.16], [1.11, 2.16], [1.11, 2.16], [1.11, 2.16], [1.1, 2.16], [1.1, 2.16], [1.1, 2.16], [1.12, 2.17], [1.08, 2.16], [1.13, 2.18], [1.1, 2.17], [1.1, 2.18], [1.11, 2.17], [1.09, 2.15], [1.1, 2.16], [1.11, 2.17], [1.07, 2.16], [1.09, 2.16], [1.11, 2.16], [1.11, 2.18], [1.09, 2.17], [1.1, 2.18], [1.1, 2.17], [1.11, 2.16], [1.12, 2.16], [1.06, 2.16], [1.1, 2.17], [1.09, 2.17], [1.11, 2.18], [1.1, 2.17], [1.11, 2.17], [1.09, 2.18], [1.1, 2.17], [1.11, 2.18], [1.09, 2.18], [1.11, 2.19], [1.1, 2.17], [1.1, 2.17], [1.11, 2.16], [1.1, 2.17], [1.1, 2.18], [1.09, 2.17], [1.07, 2.18], [1.09, 2.17], [1.09, 2.18], [1.11, 2.15], [1.11, 2.16], [1.09, 2.16], [1.11, 2.17], [1.1, 2.18], [1.1, 2.18], [1.1, 2.18], [1.1, 2.16], [1.09, 2.18], [1.1, 2.18], [1.08, 2.16], [1.11, 2.18], [1.08, 2.17], [1.1, 2.17], [1.09, 2.17], [1.08, 2.2], [1.1, 2.18], [1.08, 2.17], [1.13, 2.18], [1.1, 2.18], [1.08, 2.18], [1.07, 2.17], [1.11, 2.17], [1.08, 2.16], [1.08, 2.18], [1.09, 2.18], [1.07, 2.17], [1.09, 2.17], [1.1, 2.17], [1.11, 2.19], [1.1, 2.19], [1.09, 2.17], [1.11, 2.17], [1.1, 2.18], [1.1, 2.18], [1.09, 2.16], [1.11, 2.18], [1.09, 2.17], [1.09, 2.17], [1.09, 2.16], [1.1, 2.18], [1.09, 2.17], [1.07, 2.17], [1.1, 2.17], [1.09, 2.19], [1.07, 2.18], [1.06, 2.16], [1.08, 2.17], [1.08, 2.17], [1.08, 2.19], [1.1, 2.18], [1.06, 2.18], [1.1, 2.17], [1.07, 2.17], [1.09, 2.17], [1.08, 2.19], [1.08, 2.17], [1.09, 2.18], [1.08, 2.16], [1.09, 2.17], [1.07, 2.16], [1.09, 2.17], [1.11, 2.19], [1.11, 2.19], [1.09, 2.17], [1.09, 2.18], [1.09, 2.18], [1.11, 2.19], [1.07, 2.18], [1.1, 2.18], [1.08, 2.18], [1.1, 2.19], [1.09, 2.19], [1.09, 2.19], [1.1, 2.17], [1.08, 2.18], [1.1, 2.18], [1.07, 2.19], [1.12, 2.17], [1.08, 2.18], [1.11, 2.18], [1.09, 2.18], [1.08, 2.17], [1.11, 2.19], [1.09, 2.19], [1.09, 2.19], [1.07, 2.18], [1.1, 2.17], [1.08, 2.18], [1.09, 2.17], [1.07, 2.17], [1.07, 2.19], [1.09, 2.17], [1.08, 2.17], [1.1, 2.19], [1.1, 2.19], [1.08, 2.16], [1.1, 2.17], [1.06, 2.17], [1.07, 2.17], [1.09, 2.17], [1.1, 2.17], [1.1, 2.19], [1.08, 2.18], [1.07, 2.18], [1.08, 2.18], [1.09, 2.19], [1.08, 2.19], [1.08, 2.16], [1.08, 2.18], [1.09, 2.17], [1.08, 2.17], [1.11, 2.18], [1.09, 2.18], [1.09, 2.19], [1.09, 2.18], [1.09, 2.17], [1.06, 2.17], [1.11, 2.18], [1.1, 2.18], [1.1, 2.18], [1.08, 2.18], [1.07, 2.17], [1.11, 2.18], [1.08, 2.18], [1.07, 2.17], [1.08, 2.16], [1.07, 2.17], [1.12, 2.18], [1.09, 2.19], [1.09, 2.16], [1.09, 2.17], [1.09, 2.19], [1.09, 2.17], [1.09, 2.16], [1.1, 2.17], [1.08, 2.18], [1.07, 2.17], [1.1, 2.18], [1.09, 2.18], [1.11, 2.18], [1.09, 2.19], [1.09, 2.18], [1.07, 2.19], [1.1, 2.19], [1.1, 2.18], [1.1, 2.17], [1.09, 2.18], [1.09, 2.18], [1.09, 2.18], [1.09, 2.19], [1.08, 2.17], [1.08, 2.18], [1.11, 2.19], [1.07, 2.16], [1.07, 2.16], [1.08, 2.18], [1.08, 2.18], [1.08, 2.17], [1.08, 2.18], [1.09, 2.19], [1.1, 2.2], [1.08, 2.17], [1.07, 2.18], [1.07, 2.16], [1.07, 2.18], [1.1, 2.2], [1.09, 2.18], [1.06, 2.18], [1.08, 2.19], [1.1, 2.18], [1.09, 2.17], [1.1, 2.19], [1.09, 2.18], [1.09, 2.18], [1.08, 2.17], [1.09, 2.18], [1.06, 2.17], [1.09, 2.19], [1.09, 2.17], [1.09, 2.2], [1.08, 2.17], [1.09, 2.17], [1.1, 2.18], [1.11, 2.2], [1.08, 2.18], [1.11, 2.18], [1.09, 2.18], [1.08, 2.19], [1.07, 2.19], [1.08, 2.19], [1.08, 2.17], [1.1, 2.19], [1.09, 2.18], [1.09, 2.18], [1.1, 2.19], [1.09, 2.18], [1.08, 2.19], [1.08, 2.18], [1.07, 2.19], [1.09, 2.18], [1.08, 2.18], [1.09, 2.2], [1.07, 2.19], [1.09, 2.19], [1.09, 2.18], [1.1, 2.18], [1.08, 2.17], [1.08, 2.17], [1.09, 2.18], [1.1, 2.18], [1.08, 2.18], [1.1, 2.17], [1.09, 2.19], [1.08, 2.18], [1.08, 2.18], [1.1, 2.17], [1.08, 2.18], [1.08, 2.17], [1.1, 2.18], [1.08, 2.19], [1.1, 2.19], [1.09, 2.18], [1.09, 2.18], [1.07, 2.18], [1.07, 2.18], [1.08, 2.18], [1.09, 2.2], [1.09, 2.19], [1.09, 2.18], [1.09, 2.18], [1.09, 2.18], [1.06, 2.19], [1.05, 2.19], [1.08, 2.18], [1.1, 2.17], [1.1, 2.19], [1.08, 2.18], [1.08, 2.18], [1.09, 2.18], [1.08, 2.18], [1.09, 2.17], [1.11, 2.19], [1.08, 2.19], [1.1, 2.19], [1.07, 2.19], [1.07, 2.2], [1.08, 2.18], [1.08, 2.19], [1.07, 2.16], [1.08, 2.17], [1.09, 2.2], [1.08, 2.19], [1.09, 2.18], [1.08, 2.18], [1.08, 2.19], [1.08, 2.18], [1.08, 2.18], [1.08, 2.18], [1.08, 2.17], [1.09, 2.19], [1.07, 2.18], [1.09, 2.18], [1.07, 2.18], [1.07, 2.17], [1.08, 2.18], [1.07, 2.19], [1.08, 2.18], [1.07, 2.18], [1.09, 2.18], [1.1, 2.2], [1.07, 2.17], [1.1, 2.2], [1.08, 2.2], [1.08, 2.17], [1.08, 2.18], [1.07, 2.18], [1.1, 2.18], [1.09, 2.19], [1.09, 2.18], [1.06, 2.19], [1.09, 2.18], [1.1, 2.18], [1.1, 2.2], [1.1, 2.18], [1.08, 2.17], [1.07, 2.18], [1.09, 2.18], [1.08, 2.17], [1.08, 2.17], [1.09, 2.2], [1.08, 2.19], [1.09, 2.2], [1.08, 2.2], [1.08, 2.17], [1.08, 2.18], [1.1, 2.17], [1.08, 2.18], [1.1, 2.17], [1.07, 2.2], [1.07, 2.17], [1.08, 2.19], [1.07, 2.17], [1.07, 2.18], [1.08, 2.19], [1.09, 2.19], [1.09, 2.19], [1.12, 2.2], [1.09, 2.18], [1.08, 2.18], [1.1, 2.2], [1.07, 2.17], [1.08, 2.19], [1.09, 2.17], [1.1, 2.19], [1.09, 2.2], [1.08, 2.17], [1.08, 2.18], [1.08, 2.18], [1.08, 2.17], [1.09, 2.18], [1.09, 2.19], [1.08, 2.17], [1.08, 2.17], [1.1, 2.17], [1.06, 2.16], [1.09, 2.18], [1.08, 2.19], [1.09, 2.18], [1.07, 2.18], [1.09, 2.18], [1.1, 2.19], [1.07, 2.17], [1.1, 2.19], [1.08, 2.18], [1.08, 2.18], [1.08, 2.19], [1.07, 2.19], [1.06, 2.16], [1.09, 2.18], [1.08, 2.19], [1.09, 2.17], [1.08, 2.19], [1.09, 2.19], [1.08, 2.19], [1.1, 2.18], [1.08, 2.2], [1.09, 2.18], [1.09, 2.18], [1.09, 2.2], [1.09, 2.17], [1.1, 2.18], [1.07, 2.17], [1.09, 2.17], [1.08, 2.18], [1.09, 2.16], [1.08, 2.18], [1.11, 2.19], [1.09, 2.17], [1.09, 2.18], [1.09, 2.18], [1.08, 2.19], [1.1, 2.2], [1.1, 2.18], [1.09, 2.18], [1.07, 2.18], [1.08, 2.18], [1.07, 2.19], [1.08, 2.19], [1.08, 2.17], [1.11, 2.2], [1.1, 2.21], [1.07, 2.19], [1.08, 2.19], [1.08, 2.19], [1.1, 2.18], [1.07, 2.18], [1.08, 2.18], [1.07, 2.19], [1.07, 2.17], [1.07, 2.17], [1.09, 2.17], [1.08, 2.18], [1.09, 2.18], [1.09, 2.18], [1.1, 2.19], [1.09, 2.17], [1.08, 2.19], [1.06, 2.15], [1.09, 2.18], [1.07, 2.18], [1.07, 2.18], [1.08, 2.18], [1.08, 2.16], [1.1, 2.19], [1.06, 2.18], [1.08, 2.18], [1.09, 2.17], [1.08, 2.19], [1.07, 2.18], [1.1, 2.18], [1.1, 2.19], [1.09, 2.18], [1.09, 2.18], [1.09, 2.17], [1.07, 2.16], [1.09, 2.18], [1.06, 2.16], [1.1, 2.18], [1.11, 2.2], [1.09, 2.18], [1.07, 2.19], [1.09, 2.18], [1.09, 2.19], [1.08, 2.19], [1.07, 2.17], [1.08, 2.18], [1.09, 2.18], [1.1, 2.18], [1.08, 2.17], [1.07, 2.17], [1.08, 2.19], [1.08, 2.18], [1.09, 2.18], [1.06, 2.19], [1.08, 2.18], [1.08, 2.19], [1.07, 2.18], [1.05, 2.17], [1.07, 2.17], [1.09, 2.19], [1.11, 2.19], [1.09, 2.19], [1.07, 2.2], [1.09, 2.19], [1.09, 2.18], [1.06, 2.18], [1.08, 2.19], [1.08, 2.18], [1.09, 2.19], [1.08, 2.19], [1.1, 2.18], [1.08, 2.18], [1.11, 2.19], [1.06, 2.18], [1.08, 2.18], [1.09, 2.19], [1.08, 2.18], [1.07, 2.18], [1.08, 2.2], [1.11, 2.19], [1.08, 2.18], [1.09, 2.17], [1.11, 2.19], [1.09, 2.18], [1.08, 2.18], [1.09, 2.17], [1.06, 2.17], [1.08, 2.18], [1.08, 2.18]],
            "cov": [[[0.0, -0.0], [-0.0, 0.0008]], [[0.0001, 0.0001], [0.0001, 0.001]], [[0.0002, 0.0003], [0.0003, 0.0015]], [[0.0003, 0.0007], [0.0007, 0.0026]], [[0.0003, 0.001], [0.001, 0.0047]], [[0.0002, 0.001], [0.001, 0.0073]], [[0.0002, 0.001], [0.001, 0.0113]], [[0.0002, 0.0011], [0.0011, 0.0159]], [[0.0003, 0.0017], [0.0017, 0.021]], [[0.0004, 0.0029], [0.0029, 0.0294]], [[0.0006, 0.0041], [0.0041, 0.0354]], [[0.001, 0.0063], [0.0063, 0.0437]], [[0.0017, 0.0089], [0.0089, 0.0533]], [[0.0026, 0.0125], [0.0125, 0.0639]], [[0.0039, 0.0167], [0.0167, 0.0762]], [[0.0052, 0.0204], [0.0204, 0.0846]], [[0.0065, 0.0241], [0.0241, 0.0935]], [[0.0081, 0.0285], [0.0285, 0.1039]], [[0.0094, 0.0313], [0.0313, 0.1089]], [[0.011, 0.0346], [0.0346, 0.1136]], [[0.0135, 0.0409], [0.0409, 0.1281]], [[0.0155, 0.0444], [0.0444, 0.1315]], [[0.017, 0.0464], [0.0464, 0.1308]], [[0.0207, 0.0537], [0.0537, 0.1429]], [[0.0222, 0.0546], [0.0546, 0.1382]], [[0.0259, 0.0609], [0.0609, 0.1472]], [[0.0289, 0.0649], [0.0649, 0.1496]], [[0.0323, 0.0698], [0.0698, 0.1548]], [[0.0343, 0.0714], [0.0714, 0.1527]], [[0.0375, 0.0751], [0.0751, 0.1543]], [[0.0416, 0.0807], [0.0807, 0.1605]], [[0.0427, 0.0797], [0.0797, 0.153]], [[0.0464, 0.0838], [0.0838, 0.1552]], [[0.052, 0.0903], [0.0903, 0.1609]], [[0.0549, 0.092], [0.092, 0.1585]], [[0.0562, 0.0901], [0.0901, 0.1486]], [[0.0605, 0.0924], [0.0924, 0.145]], [[0.0654, 0.0957], [0.0957, 0.144]], [[0.069, 0.0965], [0.0965, 0.1388]], [[0.0702, 0.0939], [0.0939, 0.1299]], [[0.0732, 0.0944], [0.0944, 0.1263]], [[0.0795, 0.0982], [0.0982, 0.1261]], [[0.0799, 0.0958], [0.0958, 0.1201]], [[0.0839, 0.0973], [0.0973, 0.1188]], [[0.0833, 0.0946], [0.0946, 0.1152]], [[0.0819, 0.0912], [0.0912, 0.1103]], [[0.0829, 0.0913], [0.0913, 0.1105]], [[0.0837, 0.0902], [0.0902, 0.1089]], [[0.0847, 0.0894], [0.0894, 0.1078]], [[0.079, 0.0821], [0.0821, 0.1006]], [[0.0778, 0.0794], [0.0794, 0.0995]], [[0.0774, 0.0767], [0.0767, 0.0966]], [[0.077, 0.073], [0.073, 0.0925]], [[0.0746, 0.0664], [0.0664, 0.0849]], [[0.0727, 0.0637], [0.0637, 0.0856]], [[0.0705, 0.06], [0.06, 0.0832]], [[0.0669, 0.0545], [0.0545, 0.0799]], [[0.0674, 0.0506], [0.0506, 0.0779]], [[0.0673, 0.044], [0.044, 0.0741]], [[0.0709, 0.0409], [0.0409, 0.0697]], [[0.0719, 0.0334], [0.0334, 0.0644]], [[0.0743, 0.027], [0.027, 0.0604]], [[0.0761, 0.0203], [0.0203, 0.058]], [[0.0804, 0.011], [0.011, 0.0562]], [[0.0831, 0.0055], [0.0055, 0.0568]], [[0.0884, -0.0011], [-0.0011, 0.0561]], [[0.0915, -0.0127], [-0.0127, 0.0596]], [[0.0996, -0.0209], [-0.0209, 0.0599]], [[0.1041, -0.0272], [-0.0272, 0.0575]], [[0.1166, -0.0372], [-0.0372, 0.0632]], [[0.1284, -0.0455], [-0.0455, 0.0635]], [[0.142, -0.0563], [-0.0563, 0.0668]], [[0.1526, -0.0645], [-0.0645, 0.0691]], [[0.1676, -0.0729], [-0.0729, 0.0719]], [[0.1957, -0.0861], [-0.0861, 0.0753]], [[0.2216, -0.0923], [-0.0923, 0.0758]], [[0.244, -0.0972], [-0.0972, 0.0743]], [[0.2785, -0.1035], [-0.1035, 0.0739]], [[0.306, -0.1072], [-0.1072, 0.0731]], [[0.3425, -0.1115], [-0.1115, 0.0728]], [[0.3735, -0.1165], [-0.1165, 0.0731]], [[0.4021, -0.1225], [-0.1225, 0.076]], [[0.4352, -0.1197], [-0.1197, 0.0734]], [[0.474, -0.123], [-0.123, 0.0748]], [[0.5162, -0.128], [-0.128, 0.0752]], [[0.5633, -0.1278], [-0.1278, 0.0746]], [[0.5945, -0.1279], [-0.1279, 0.0763]], [[0.6296, -0.1271], [-0.1271, 0.077]], [[0.6727, -0.1268], [-0.1268, 0.0775]], [[0.6888, -0.1294], [-0.1294, 0.0816]], [[0.7436, -0.1231], [-0.1231, 0.0829]], [[0.7421, -0.1226], [-0.1226, 0.0839]], [[0.7959, -0.1192], [-0.1192, 0.0875]], [[0.7901, -0.1092], [-0.1092, 0.0866]], [[0.8326, -0.0998], [-0.0998, 0.0901]], [[0.8527, -0.0991], [-0.0991, 0.091]], [[0.8671, -0.0908], [-0.0908, 0.0942]], [[0.9137, -0.077], [-0.077, 0.0924]], [[0.9074, -0.065], [-0.065, 0.095]], [[0.9346, -0.0644], [-0.0644, 0.0951]], [[0.9248, -0.0386], [-0.0386, 0.1]], [[0.9549, 0.0008], [0.0008, 0.1035]], [[0.9722, 0.0199], [0.0199, 0.1032]], [[0.9577, 0.0377], [0.0377, 0.1087]], [[0.979, 0.0634], [0.0634, 0.1023]], [[1.0063, 0.0714], [0.0714, 0.0974]], [[1.037, 0.0804], [0.0804, 0.0965]], [[1.0957, 0.0989], [0.0989, 0.0926]], [[1.1748, 0.0982], [0.0982, 0.0885]], [[1.2091, 0.1103], [0.1103, 0.0879]], [[1.2219, 0.103], [0.103, 0.0835]], [[1.238, 0.1206], [0.1206, 0.083]], [[1.2646, 0.1039], [0.1039, 0.0792]], [[1.2574, 0.1107], [0.1107, 0.0747]], [[1.2837, 0.1049], [0.1049, 0.0728]], [[1.2902, 0.1126], [0.1126, 0.0726]], [[1.2998, 0.1203], [0.1203, 0.0702]], [[1.3346, 0.1184], [0.1184, 0.0692]], [[1.333, 0.1183], [0.1183, 0.068]], [[1.3472, 0.1268], [0.1268, 0.0685]], [[1.3335, 0.1197], [0.1197, 0.0645]], [[1.3706, 0.1286], [0.1286, 0.065]], [[1.4183, 0.1386], [0.1386, 0.064]], [[1.4594, 0.141], [0.141, 0.066]], [[1.4942, 0.1522], [0.1522, 0.0646]], [[1.5052, 0.1758], [0.1758, 0.0674]], [[1.5098, 0.1905], [0.1905, 0.07]], [[1.5623, 0.2137], [0.2137, 0.0777]], [[1.5458, 0.2328], [0.2328, 0.0819]], [[1.5967, 0.2694], [0.2694, 0.0933]], [[1.5747, 0.2949], [0.2949, 0.1031]], [[1.5801, 0.321], [0.321, 0.114]], [[1.596, 0.3534], [0.3534, 0.1277]], [[1.5765, 0.3736], [0.3736, 0.1392]], [[1.5904, 0.4123], [0.4123, 0.1563]], [[1.5797, 0.4345], [0.4345, 0.1708]], [[1.5911, 0.4636], [0.4636, 0.1864]], [[1.622, 0.4997], [0.4997, 0.2042]], [[1.5779, 0.5184], [0.5184, 0.2214]], [[1.5937, 0.5392], [0.5392, 0.2358]], [[1.6042, 0.5551], [0.5551, 0.2451]], [[1.5947, 0.5935], [0.5935, 0.2731]], [[1.6087, 0.6209], [0.6209, 0.2923]], [[1.6019, 0.6447], [0.6447, 0.3131]], [[1.6062, 0.6668], [0.6668, 0.3307]], [[1.628, 0.6994], [0.6994, 0.353]], [[1.5895, 0.7076], [0.7076, 0.3663]], [[1.5847, 0.7209], [0.7209, 0.3802]], [[1.5662, 0.7372], [0.7372, 0.4012]], [[1.5745, 0.7616], [0.7616, 0.4216]], [[1.5682, 0.7777], [0.7777, 0.4364]], [[1.5934, 0.8081], [0.8081, 0.461]], [[1.5508, 0.8123], [0.8123, 0.477]], [[1.5525, 0.8403], [0.8403, 0.5086]], [[1.5545, 0.862], [0.862, 0.5312]], [[1.5143, 0.854], [0.854, 0.5307]], [[1.5213, 0.8753], [0.8753, 0.5542]], [[1.5247, 0.8971], [0.8971, 0.5768]], [[1.5106, 0.8954], [0.8954, 0.5784]], [[1.5048, 0.903], [0.903, 0.5883]], [[1.4978, 0.909], [0.909, 0.5971]], [[1.4906, 0.9128], [0.9128, 0.6042]], [[1.4657, 0.9123], [0.9123, 0.6131]], [[1.4522, 0.9142], [0.9142, 0.6179]], [[1.4341, 0.9231], [0.9231, 0.6371]], [[1.399, 0.9209], [0.9209, 0.6502]], [[1.3934, 0.9356], [0.9356, 0.6702]], [[1.3631, 0.9367], [0.9367, 0.6861]], [[1.3209, 0.9317], [0.9317, 0.6989]], [[1.3025, 0.9552], [0.9552, 0.7418]], [[1.2445, 0.9471], [0.9471, 0.7634]], [[1.2155, 0.948], [0.948, 0.7803]], [[1.1672, 0.9348], [0.9348, 0.7899]], [[1.1442, 0.9442], [0.9442, 0.8216]], [[1.1235, 0.9478], [0.9478, 0.8427]], [[1.1065, 0.9491], [0.9491, 0.8561]], [[1.1024, 0.9572], [0.9572, 0.8709]], [[1.0914, 0.9579], [0.9579, 0.8806]], [[1.0637, 0.9425], [0.9425, 0.8742]], [[1.0647, 0.9449], [0.9449, 0.8774]], [[1.0369, 0.9363], [0.9363, 0.8827]], [[1.0373, 0.939], [0.939, 0.8877]], [[0.9879, 0.9028], [0.9028, 0.8597]], [[0.9904, 0.9141], [0.9141, 0.8783]], [[0.9833, 0.9245], [0.9245, 0.9048]], [[0.9496, 0.9067], [0.9067, 0.9021]], [[0.9231, 0.8945], [0.8945, 0.9038]], [[0.9407, 0.9226], [0.9226, 0.9415]], [[0.9422, 0.9411], [0.9411, 0.9785]], [[0.9101, 0.934], [0.934, 0.9972]], [[0.9148, 0.9533], [0.9533, 1.0323]], [[0.8872, 0.9395], [0.9395, 1.0331]], [[0.8785, 0.9454], [0.9454, 1.058]], [[0.8668, 0.9425], [0.9425, 1.065]], [[0.8717, 0.9558], [0.9558, 1.0893]], [[0.8549, 0.9509], [0.9509, 1.0984]], [[0.8567, 0.963], [0.963, 1.1224]], [[0.8457, 0.9554], [0.9554, 1.1205]], [[0.8351, 0.955], [0.955, 1.1347]], [[0.8587, 0.9763], [0.9763, 1.1523]], [[0.8258, 0.9591], [0.9591, 1.1608]], [[0.7879, 0.9469], [0.9469, 1.1911]], [[0.7805, 0.9415], [0.9415, 1.1917]], [[0.7462, 0.9344], [0.9344, 1.2339]], [[0.7106, 0.8988], [0.8988, 1.2073]], [[0.6861, 0.8875], [0.8875, 1.2253]], [[0.6604, 0.8686], [0.8686, 1.2278]], [[0.6356, 0.8456], [0.8456, 1.2108]], [[0.6266, 0.8391], [0.8391, 1.2202]], [[0.6222, 0.8427], [0.8427, 1.2446]], [[0.624, 0.8439], [0.8439, 1.2501]], [[0.6119, 0.8223], [0.8223, 1.214]], [[0.6171, 0.8199], [0.8199, 1.2033]], [[0.592, 0.7791], [0.7791, 1.1395]], [[0.6099, 0.7832], [0.7832, 1.1206]], [[0.609, 0.7745], [0.7745, 1.0969]], [[0.602, 0.751], [0.751, 1.051]], [[0.6133, 0.7553], [0.7553, 1.0402]], [[0.6095, 0.7379], [0.7379, 1.0024]], [[0.6217, 0.7448], [0.7448, 1.0014]], [[0.6258, 0.7388], [0.7388, 0.9811]], [[0.6299, 0.7327], [0.7327, 0.9608]], [[0.6264, 0.7207], [0.7207, 0.9378]], [[0.6214, 0.7159], [0.7159, 0.9361]], [[0.6289, 0.7114], [0.7114, 0.9199]], [[0.6075, 0.683], [0.683, 0.8886]], [[0.6026, 0.6799], [0.6799, 0.8988]], [[0.5869, 0.6568], [0.6568, 0.8738]], [[0.5888, 0.6675], [0.6675, 0.9062]], [[0.5697, 0.6442], [0.6442, 0.8858]], [[0.5473, 0.6245], [0.6245, 0.8829]], [[0.5512, 0.6211], [0.6211, 0.8826]], [[0.542, 0.6205], [0.6205, 0.9057]], [[0.5441, 0.6244], [0.6244, 0.9266]], [[0.5061, 0.5854], [0.5854, 0.8994]], [[0.5041, 0.5847], [0.5847, 0.9092]], [[0.4782, 0.5651], [0.5651, 0.9134]], [[0.4908, 0.5758], [0.5758, 0.9297]], [[0.4775, 0.5642], [0.5642, 0.9261]], [[0.4595, 0.5434], [0.5434, 0.9149]], [[0.4664, 0.5651], [0.5651, 0.9696]], [[0.448, 0.5467], [0.5467, 0.9514]], [[0.4453, 0.5278], [0.5278, 0.9163]], [[0.4251, 0.5132], [0.5132, 0.9144]], [[0.4297, 0.5231], [0.5231, 0.9352]], [[0.4344, 0.5289], [0.5289, 0.9484]], [[0.4261, 0.514], [0.514, 0.927]], [[0.4083, 0.497], [0.497, 0.9293]], [[0.4194, 0.5171], [0.5171, 0.964]], [[0.41, 0.4931], [0.4931, 0.912]], [[0.4061, 0.4895], [0.4895, 0.9089]], [[0.3992, 0.4801], [0.4801, 0.9072]], [[0.4009, 0.4828], [0.4828, 0.9339]], [[0.3944, 0.468], [0.468, 0.8914]], [[0.401, 0.4683], [0.4683, 0.8809]], [[0.3957, 0.4583], [0.4583, 0.8697]], [[0.3876, 0.4482], [0.4482, 0.8731]], [[0.3997, 0.464], [0.464, 0.8941]], [[0.3974, 0.4455], [0.4455, 0.8452]], [[0.4114, 0.4473], [0.4473, 0.8368]], [[0.3876, 0.4263], [0.4263, 0.8163]], [[0.4017, 0.4378], [0.4378, 0.8284]], [[0.3966, 0.4291], [0.4291, 0.8197]], [[0.4064, 0.4295], [0.4295, 0.7916]], [[0.3982, 0.4163], [0.4163, 0.7794]], [[0.407, 0.4194], [0.4194, 0.761]], [[0.4029, 0.4127], [0.4127, 0.7503]], [[0.4148, 0.4085], [0.4085, 0.724]], [[0.4295, 0.4258], [0.4258, 0.7304]], [[0.4285, 0.4182], [0.4182, 0.7063]], [[0.4302, 0.4206], [0.4206, 0.7244]], [[0.4393, 0.4187], [0.4187, 0.6943]], [[0.4288, 0.4095], [0.4095, 0.686]], [[0.4442, 0.4164], [0.4164, 0.6776]], [[0.4452, 0.4073], [0.4073, 0.6597]], [[0.4502, 0.4082], [0.4082, 0.6395]], [[0.4643, 0.4248], [0.4248, 0.651]], [[0.4478, 0.4068], [0.4068, 0.6356]], [[0.4538, 0.4038], [0.4038, 0.6176]], [[0.4658, 0.4146], [0.4146, 0.6164]], [[0.4686, 0.4094], [0.4094, 0.6]], [[0.4715, 0.4172], [0.4172, 0.6132]], [[0.4727, 0.4142], [0.4142, 0.6027]], [[0.4798, 0.4093], [0.4093, 0.5868]], [[0.4756, 0.41], [0.41, 0.5846]], [[0.4733, 0.4009], [0.4009, 0.5623]], [[0.4925, 0.4211], [0.4211, 0.5876]], [[0.4795, 0.4072], [0.4072, 0.5627]], [[0.4837, 0.4021], [0.4021, 0.5554]], [[0.4954, 0.4156], [0.4156, 0.5559]], [[0.5043, 0.4149], [0.4149, 0.553]], [[0.493, 0.4085], [0.4085, 0.5573]], [[0.4974, 0.4013], [0.4013, 0.5395]], [[0.5153, 0.4083], [0.4083, 0.5295]], [[0.513, 0.4136], [0.4136, 0.5462]], [[0.5059, 0.4042], [0.4042, 0.5337]], [[0.5255, 0.4216], [0.4216, 0.5465]], [[0.4989, 0.3944], [0.3944, 0.524]], [[0.523, 0.3964], [0.3964, 0.5105]], [[0.5218, 0.4021], [0.4021, 0.5233]], [[0.5397, 0.4007], [0.4007, 0.5163]], [[0.5454, 0.3833], [0.3833, 0.4877]], [[0.5422, 0.3683], [0.3683, 0.478]], [[0.5565, 0.3764], [0.3764, 0.4919]], [[0.5734, 0.3737], [0.3737, 0.4856]], [[0.5599, 0.3645], [0.3645, 0.4923]], [[0.5743, 0.3647], [0.3647, 0.4867]], [[0.5776, 0.3604], [0.3604, 0.4912]], [[0.5705, 0.3613], [0.3613, 0.5079]], [[0.5545, 0.3393], [0.3393, 0.4925]], [[0.571, 0.3523], [0.3523, 0.5114]], [[0.5659, 0.3456], [0.3456, 0.5119]], [[0.562, 0.3431], [0.3431, 0.5234]], [[0.5641, 0.3476], [0.3476, 0.5362]], [[0.5645, 0.3386], [0.3386, 0.5285]], [[0.5551, 0.3352], [0.3352, 0.5287]], [[0.5517, 0.3315], [0.3315, 0.5333]], [[0.56, 0.3302], [0.3302, 0.5288]], [[0.5449, 0.3321], [0.3321, 0.5508]], [[0.559, 0.3391], [0.3391, 0.5611]], [[0.5334, 0.3308], [0.3308, 0.5548]], [[0.539, 0.3275], [0.3275, 0.5628]], [[0.5414, 0.3216], [0.3216, 0.5451]], [[0.5384, 0.3286], [0.3286, 0.5638]], [[0.5309, 0.3153], [0.3153, 0.5538]], [[0.5379, 0.3259], [0.3259, 0.5672]], [[0.5249, 0.3213], [0.3213, 0.5667]], [[0.5416, 0.3224], [0.3224, 0.5746]], [[0.5247, 0.3078], [0.3078, 0.5638]], [[0.5316, 0.3184], [0.3184, 0.5696]], [[0.5397, 0.3157], [0.3157, 0.5723]], [[0.5262, 0.3214], [0.3214, 0.592]], [[0.5175, 0.3107], [0.3107, 0.5876]], [[0.5211, 0.3124], [0.3124, 0.5802]], [[0.5285, 0.3149], [0.3149, 0.5894]], [[0.5184, 0.3049], [0.3049, 0.5855]], [[0.5115, 0.3032], [0.3032, 0.5884]], [[0.5178, 0.2983], [0.2983, 0.5862]], [[0.5172, 0.3082], [0.3082, 0.6021]], [[0.5139, 0.3074], [0.3074, 0.5992]], [[0.5126, 0.3019], [0.3019, 0.609]], [[0.5059, 0.2947], [0.2947, 0.5878]], [[0.5, 0.3038], [0.3038, 0.6155]], [[0.5068, 0.2986], [0.2986, 0.6098]], [[0.506, 0.3092], [0.3092, 0.6376]], [[0.5039, 0.2967], [0.2967, 0.6165]], [[0.5093, 0.298], [0.298, 0.6045]], [[0.5173, 0.2986], [0.2986, 0.6138]], [[0.4842, 0.2789], [0.2789, 0.6044]], [[0.5004, 0.2976], [0.2976, 0.6115]], [[0.4943, 0.2995], [0.2995, 0.6319]], [[0.5089, 0.2971], [0.2971, 0.6101]], [[0.4962, 0.2953], [0.2953, 0.6142]], [[0.492, 0.283], [0.283, 0.6156]], [[0.4908, 0.2905], [0.2905, 0.6364]], [[0.4997, 0.2836], [0.2836, 0.6073]], [[0.4949, 0.2819], [0.2819, 0.6226]], [[0.4925, 0.2878], [0.2878, 0.6231]], [[0.4803, 0.2799], [0.2799, 0.6149]], [[0.4952, 0.2824], [0.2824, 0.6179]], [[0.4984, 0.2877], [0.2877, 0.6352]], [[0.4913, 0.2834], [0.2834, 0.624]], [[0.4847, 0.2817], [0.2817, 0.6281]], [[0.5018, 0.2942], [0.2942, 0.6304]], [[0.4897, 0.2762], [0.2762, 0.6233]], [[0.5023, 0.2783], [0.2783, 0.6092]], [[0.4865, 0.2782], [0.2782, 0.63]], [[0.4741, 0.265], [0.265, 0.6171]], [[0.4873, 0.2687], [0.2687, 0.614]], [[0.4905, 0.2687], [0.2687, 0.6107]], [[0.49, 0.2687], [0.2687, 0.6334]], [[0.484, 0.2844], [0.2844, 0.6621]], [[0.4831, 0.273], [0.273, 0.6308]], [[0.4858, 0.279], [0.279, 0.6414]], [[0.4774, 0.2702], [0.2702, 0.6386]], [[0.4929, 0.2707], [0.2707, 0.6116]], [[0.4797, 0.2684], [0.2684, 0.6328]], [[0.4901, 0.2648], [0.2648, 0.6194]], [[0.4684, 0.2611], [0.2611, 0.6457]], [[0.4779, 0.271], [0.271, 0.6332]], [[0.4897, 0.2672], [0.2672, 0.6203]], [[0.4893, 0.2615], [0.2615, 0.625]], [[0.4779, 0.253], [0.253, 0.6145]], [[0.4834, 0.2574], [0.2574, 0.6387]], [[0.5057, 0.2578], [0.2578, 0.6265]], [[0.4793, 0.2484], [0.2484, 0.6239]], [[0.4899, 0.2603], [0.2603, 0.6089]], [[0.5003, 0.2593], [0.2593, 0.616]], [[0.5053, 0.2645], [0.2645, 0.6325]], [[0.4879, 0.2389], [0.2389, 0.6094]], [[0.5197, 0.2534], [0.2534, 0.6059]], [[0.4687, 0.2431], [0.2431, 0.6064]], [[0.4861, 0.2448], [0.2448, 0.6151]], [[0.4947, 0.2462], [0.2462, 0.6339]], [[0.491, 0.2401], [0.2401, 0.6223]], [[0.5004, 0.2408], [0.2408, 0.6029]], [[0.4964, 0.2344], [0.2344, 0.5929]], [[0.5183, 0.2431], [0.2431, 0.6201]], [[0.5092, 0.2388], [0.2388, 0.5918]], [[0.5289, 0.2481], [0.2481, 0.6156]], [[0.5062, 0.2269], [0.2269, 0.5744]], [[0.5142, 0.2284], [0.2284, 0.5831]], [[0.5209, 0.2272], [0.2272, 0.5844]], [[0.5263, 0.2299], [0.2299, 0.566]], [[0.5347, 0.2324], [0.2324, 0.5657]], [[0.5361, 0.2449], [0.2449, 0.5736]], [[0.5354, 0.2425], [0.2425, 0.572]], [[0.5271, 0.2346], [0.2346, 0.5544]], [[0.5204, 0.2241], [0.2241, 0.5516]], [[0.5478, 0.2406], [0.2406, 0.5569]], [[0.5412, 0.239], [0.239, 0.5552]], [[0.5243, 0.2256], [0.2256, 0.5431]], [[0.5504, 0.2492], [0.2492, 0.5518]], [[0.5449, 0.2396], [0.2396, 0.551]], [[0.5431, 0.2421], [0.2421, 0.5548]], [[0.5322, 0.2451], [0.2451, 0.5497]], [[0.5379, 0.2346], [0.2346, 0.5251]], [[0.53, 0.2402], [0.2402, 0.5364]], [[0.5478, 0.2414], [0.2414, 0.5418]], [[0.5433, 0.2464], [0.2464, 0.538]], [[0.5538, 0.2442], [0.2442, 0.5299]], [[0.5638, 0.2457], [0.2457, 0.5154]], [[0.5511, 0.2403], [0.2403, 0.5316]], [[0.5491, 0.2451], [0.2451, 0.5252]], [[0.5459, 0.2355], [0.2355, 0.5131]], [[0.5434, 0.2437], [0.2437, 0.5256]], [[0.5413, 0.2413], [0.2413, 0.5314]], [[0.542, 0.2369], [0.2369, 0.5145]], [[0.5537, 0.2369], [0.2369, 0.5041]], [[0.5518, 0.241], [0.241, 0.5166]], [[0.5686, 0.2574], [0.2574, 0.5287]], [[0.563, 0.2529], [0.2529, 0.5176]], [[0.5441, 0.243], [0.243, 0.5049]], [[0.5559, 0.2404], [0.2404, 0.51]], [[0.5402, 0.2442], [0.2442, 0.5188]], [[0.5563, 0.2486], [0.2486, 0.5196]], [[0.5475, 0.2355], [0.2355, 0.4999]], [[0.5445, 0.2486], [0.2486, 0.5166]], [[0.5503, 0.2319], [0.2319, 0.4991]], [[0.5571, 0.2429], [0.2429, 0.5038]], [[0.5677, 0.252], [0.252, 0.5004]], [[0.5527, 0.242], [0.242, 0.5038]], [[0.5399, 0.2407], [0.2407, 0.4944]], [[0.5511, 0.2451], [0.2451, 0.4987]], [[0.5588, 0.2557], [0.2557, 0.5111]], [[0.5653, 0.2423], [0.2423, 0.4887]], [[0.564, 0.2516], [0.2516, 0.5111]], [[0.5622, 0.2455], [0.2455, 0.4829]], [[0.5604, 0.2469], [0.2469, 0.4797]], [[0.5582, 0.2502], [0.2502, 0.4871]], [[0.5597, 0.2445], [0.2445, 0.4959]], [[0.5702, 0.2479], [0.2479, 0.4766]], [[0.5814, 0.2633], [0.2633, 0.4831]], [[0.5692, 0.2475], [0.2475, 0.494]], [[0.5589, 0.2557], [0.2557, 0.4956]], [[0.5607, 0.2402], [0.2402, 0.4757]], [[0.5691, 0.2533], [0.2533, 0.4758]], [[0.5871, 0.2522], [0.2522, 0.4773]], [[0.5757, 0.2471], [0.2471, 0.4706]], [[0.575, 0.2545], [0.2545, 0.4684]], [[0.5906, 0.2555], [0.2555, 0.4849]], [[0.5739, 0.2582], [0.2582, 0.4816]], [[0.5786, 0.2524], [0.2524, 0.4687]], [[0.554, 0.2458], [0.2458, 0.4756]], [[0.5937, 0.2546], [0.2546, 0.4733]], [[0.5786, 0.2473], [0.2473, 0.4717]], [[0.5786, 0.2415], [0.2415, 0.4513]], [[0.5708, 0.2508], [0.2508, 0.4713]], [[0.5903, 0.2507], [0.2507, 0.4631]], [[0.5665, 0.2455], [0.2455, 0.4665]], [[0.5974, 0.2481], [0.2481, 0.4649]], [[0.5759, 0.2416], [0.2416, 0.4647]], [[0.5722, 0.245], [0.245, 0.4624]], [[0.5757, 0.2456], [0.2456, 0.4655]], [[0.5832, 0.2565], [0.2565, 0.4682]], [[0.5711, 0.2473], [0.2473, 0.4633]], [[0.601, 0.2522], [0.2522, 0.453]], [[0.5744, 0.2437], [0.2437, 0.4701]], [[0.5692, 0.2326], [0.2326, 0.4607]], [[0.5768, 0.2401], [0.2401, 0.4538]], [[0.5925, 0.2443], [0.2443, 0.4611]], [[0.5928, 0.2502], [0.2502, 0.4566]], [[0.5856, 0.2417], [0.2417, 0.4508]], [[0.5842, 0.2465], [0.2465, 0.447]], [[0.5873, 0.2586], [0.2586, 0.4708]], [[0.5973, 0.2392], [0.2392, 0.447]], [[0.5975, 0.2439], [0.2439, 0.4454]], [[0.5934, 0.2464], [0.2464, 0.4531]], [[0.58, 0.2399], [0.2399, 0.4518]], [[0.5953, 0.2363], [0.2363, 0.4395]], [[0.5765, 0.2356], [0.2356, 0.444]], [[0.5821, 0.2457], [0.2457, 0.4514]], [[0.6001, 0.2409], [0.2409, 0.4411]], [[0.5813, 0.2398], [0.2398, 0.4512]], [[0.587, 0.2318], [0.2318, 0.4247]], [[0.6, 0.2419], [0.2419, 0.439]], [[0.5956, 0.2357], [0.2357, 0.4413]], [[0.5996, 0.2381], [0.2381, 0.4531]], [[0.5975, 0.2257], [0.2257, 0.4389]], [[0.6069, 0.2386], [0.2386, 0.4364]], [[0.607, 0.2393], [0.2393, 0.443]], [[0.604, 0.2364], [0.2364, 0.4463]], [[0.61, 0.2288], [0.2288, 0.4235]], [[0.6087, 0.2255], [0.2255, 0.4334]], [[0.6002, 0.2181], [0.2181, 0.4348]], [[0.6239, 0.2337], [0.2337, 0.4416]], [[0.6229, 0.2326], [0.2326, 0.4246]], [[0.6081, 0.2315], [0.2315, 0.4503]], [[0.6235, 0.2275], [0.2275, 0.4305]], [[0.6343, 0.2297], [0.2297, 0.4281]], [[0.6121, 0.2265], [0.2265, 0.4385]], [[0.6435, 0.2316], [0.2316, 0.4316]], [[0.6378, 0.2227], [0.2227, 0.4282]], [[0.6328, 0.22], [0.22, 0.4288]], [[0.6498, 0.2198], [0.2198, 0.4247]], [[0.6349, 0.2218], [0.2218, 0.4282]], [[0.6468, 0.2321], [0.2321, 0.4333]], [[0.6285, 0.2177], [0.2177, 0.4328]], [[0.6342, 0.2323], [0.2323, 0.4405]], [[0.6253, 0.2176], [0.2176, 0.4229]], [[0.6565, 0.2319], [0.2319, 0.4295]], [[0.6294, 0.2144], [0.2144, 0.4219]], [[0.6298, 0.2162], [0.2162, 0.4266]], [[0.6456, 0.216], [0.216, 0.4181]], [[0.6455, 0.2186], [0.2186, 0.4246]], [[0.6556, 0.2197], [0.2197, 0.4219]], [[0.6553, 0.2161], [0.2161, 0.4177]], [[0.6444, 0.2193], [0.2193, 0.4323]], [[0.6348, 0.2125], [0.2125, 0.4242]], [[0.6567, 0.2084], [0.2084, 0.4283]], [[0.6668, 0.2165], [0.2165, 0.4286]], [[0.6552, 0.2121], [0.2121, 0.4177]], [[0.646, 0.2095], [0.2095, 0.4243]], [[0.6596, 0.2206], [0.2206, 0.4284]], [[0.6407, 0.2178], [0.2178, 0.4384]], [[0.667, 0.2162], [0.2162, 0.4237]], [[0.6404, 0.2061], [0.2061, 0.435]], [[0.6725, 0.2154], [0.2154, 0.4304]], [[0.6845, 0.2102], [0.2102, 0.4126]], [[0.6522, 0.1984], [0.1984, 0.4145]], [[0.6789, 0.2094], [0.2094, 0.4087]], [[0.6529, 0.2031], [0.2031, 0.4223]], [[0.683, 0.2092], [0.2092, 0.4201]], [[0.6576, 0.2093], [0.2093, 0.4172]], [[0.654, 0.2003], [0.2003, 0.4185]], [[0.6769, 0.2102], [0.2102, 0.4284]], [[0.6771, 0.2066], [0.2066, 0.4306]], [[0.6727, 0.2104], [0.2104, 0.4144]], [[0.6845, 0.2122], [0.2122, 0.4228]], [[0.665, 0.1934], [0.1934, 0.4111]], [[0.6703, 0.2057], [0.2057, 0.4206]], [[0.6677, 0.2054], [0.2054, 0.4189]], [[0.6381, 0.1858], [0.1858, 0.432]], [[0.667, 0.2013], [0.2013, 0.4163]], [[0.6823, 0.2043], [0.2043, 0.4318]], [[0.6841, 0.1934], [0.1934, 0.422]], [[0.6741, 0.1979], [0.1979, 0.4265]], [[0.6824, 0.2043], [0.2043, 0.4058]], [[0.6813, 0.2001], [0.2001, 0.4404]], [[0.7012, 0.2027], [0.2027, 0.4207]], [[0.6698, 0.1979], [0.1979, 0.4272]], [[0.6735, 0.1918], [0.1918, 0.4365]], [[0.6666, 0.1925], [0.1925, 0.4307]], [[0.6855, 0.1889], [0.1889, 0.428]], [[0.6902, 0.1889], [0.1889, 0.4207]], [[0.7129, 0.196], [0.196, 0.4219]], [[0.7179, 0.2002], [0.2002, 0.4161]], [[0.6783, 0.2046], [0.2046, 0.4408]], [[0.6956, 0.193], [0.193, 0.4149]], [[0.7253, 0.2063], [0.2063, 0.4203]], [[0.6824, 0.1896], [0.1896, 0.4223]], [[0.6693, 0.1781], [0.1781, 0.4206]], [[0.6794, 0.1918], [0.1918, 0.4451]], [[0.6937, 0.1997], [0.1997, 0.4395]], [[0.6902, 0.1962], [0.1962, 0.4432]], [[0.7129, 0.197], [0.197, 0.4376]], [[0.7001, 0.1906], [0.1906, 0.4218]], [[0.6941, 0.1867], [0.1867, 0.4346]], [[0.7301, 0.1927], [0.1927, 0.4257]], [[0.7198, 0.1962], [0.1962, 0.4331]], [[0.7, 0.1927], [0.1927, 0.4373]], [[0.7307, 0.1946], [0.1946, 0.4319]], [[0.7075, 0.1999], [0.1999, 0.4554]], [[0.6906, 0.1796], [0.1796, 0.423]], [[0.7102, 0.1925], [0.1925, 0.4441]], [[0.7121, 0.1857], [0.1857, 0.4321]], [[0.72, 0.1942], [0.1942, 0.4383]], [[0.709, 0.1831], [0.1831, 0.4357]], [[0.7018, 0.1791], [0.1791, 0.4452]], [[0.7324, 0.1904], [0.1904, 0.4355]], [[0.7042, 0.1799], [0.1799, 0.4212]], [[0.7151, 0.1882], [0.1882, 0.4275]], [[0.6951, 0.1802], [0.1802, 0.4282]], [[0.7133, 0.1907], [0.1907, 0.4451]], [[0.7349, 0.196], [0.196, 0.4428]], [[0.7291, 0.1857], [0.1857, 0.4576]], [[0.7318, 0.179], [0.179, 0.4254]], [[0.7025, 0.1757], [0.1757, 0.4362]], [[0.7222, 0.1697], [0.1697, 0.4279]], [[0.7273, 0.1867], [0.1867, 0.4299]], [[0.7249, 0.1778], [0.1778, 0.4328]], [[0.7263, 0.1758], [0.1758, 0.4367]], [[0.7231, 0.1797], [0.1797, 0.4471]], [[0.7157, 0.18], [0.18, 0.44]], [[0.7417, 0.1788], [0.1788, 0.4354]], [[0.7328, 0.179], [0.179, 0.4325]], [[0.7226, 0.1841], [0.1841, 0.4566]], [[0.7415, 0.1785], [0.1785, 0.435]], [[0.7137, 0.1644], [0.1644, 0.4315]], [[0.7429, 0.1745], [0.1745, 0.4457]], [[0.714, 0.1599], [0.1599, 0.4386]], [[0.7339, 0.1749], [0.1749, 0.4372]], [[0.7203, 0.1806], [0.1806, 0.4492]], [[0.7131, 0.1733], [0.1733, 0.4552]], [[0.7319, 0.1733], [0.1733, 0.4342]], [[0.7293, 0.1783], [0.1783, 0.4488]], [[0.7319, 0.1692], [0.1692, 0.4347]], [[0.7359, 0.1758], [0.1758, 0.4465]], [[0.7288, 0.1708], [0.1708, 0.4415]], [[0.7399, 0.1816], [0.1816, 0.4474]], [[0.7218, 0.1822], [0.1822, 0.4498]], [[0.7102, 0.1683], [0.1683, 0.4371]], [[0.7526, 0.1734], [0.1734, 0.4436]], [[0.7623, 0.1794], [0.1794, 0.4358]], [[0.7295, 0.1753], [0.1753, 0.4452]], [[0.7448, 0.1702], [0.1702, 0.4393]], [[0.752, 0.1683], [0.1683, 0.4497]], [[0.7542, 0.1676], [0.1676, 0.4268]], [[0.6985, 0.1672], [0.1672, 0.4552]], [[0.7364, 0.1744], [0.1744, 0.4414]], [[0.7219, 0.1781], [0.1781, 0.4534]], [[0.7378, 0.1786], [0.1786, 0.4557]], [[0.7395, 0.1732], [0.1732, 0.4466]], [[0.7196, 0.1636], [0.1636, 0.4501]], [[0.7235, 0.1702], [0.1702, 0.4556]], [[0.7346, 0.1747], [0.1747, 0.4657]], [[0.7106, 0.1636], [0.1636, 0.4518]], [[0.7354, 0.172], [0.172, 0.4546]], [[0.736, 0.1772], [0.1772, 0.449]], [[0.7244, 0.175], [0.175, 0.4508]], [[0.7534, 0.1665], [0.1665, 0.4411]], [[0.7236, 0.1684], [0.1684, 0.4595]], [[0.7473, 0.1674], [0.1674, 0.4554]], [[0.7204, 0.1719], [0.1719, 0.4518]], [[0.7305, 0.1648], [0.1648, 0.4488]], [[0.735, 0.1758], [0.1758, 0.461]], [[0.7334, 0.1767], [0.1767, 0.4553]], [[0.7609, 0.171], [0.171, 0.4345]], [[0.7179, 0.1683], [0.1683, 0.4625]], [[0.7267, 0.1766], [0.1766, 0.4702]], [[0.7359, 0.1695], [0.1695, 0.4603]], [[0.7439, 0.1747], [0.1747, 0.4566]], [[0.7039, 0.1675], [0.1675, 0.4516]], [[0.7448, 0.1658], [0.1658, 0.4466]], [[0.7315, 0.1629], [0.1629, 0.4538]], [[0.7359, 0.1576], [0.1576, 0.4428]], [[0.7291, 0.1592], [0.1592, 0.4644]], [[0.7408, 0.1658], [0.1658, 0.4561]], [[0.7412, 0.1702], [0.1702, 0.4468]], [[0.7395, 0.1668], [0.1668, 0.4528]], [[0.7384, 0.1661], [0.1661, 0.4494]], [[0.728, 0.1713], [0.1713, 0.4604]], [[0.7477, 0.1589], [0.1589, 0.4523]], [[0.751, 0.1734], [0.1734, 0.4531]], [[0.7303, 0.1528], [0.1528, 0.4491]], [[0.7403, 0.1741], [0.1741, 0.4547]], [[0.7248, 0.1699], [0.1699, 0.4565]], [[0.7501, 0.1674], [0.1674, 0.4528]], [[0.7272, 0.1588], [0.1588, 0.4589]], [[0.7239, 0.1686], [0.1686, 0.4612]], [[0.7507, 0.1726], [0.1726, 0.4548]], [[0.7397, 0.1657], [0.1657, 0.452]], [[0.7526, 0.1641], [0.1641, 0.4467]], [[0.7525, 0.1657], [0.1657, 0.4492]], [[0.7506, 0.1626], [0.1626, 0.4492]], [[0.729, 0.1615], [0.1615, 0.4585]], [[0.733, 0.1591], [0.1591, 0.4433]], [[0.7508, 0.1608], [0.1608, 0.4409]], [[0.7338, 0.1626], [0.1626, 0.4704]], [[0.742, 0.1621], [0.1621, 0.4395]], [[0.716, 0.1757], [0.1757, 0.4823]], [[0.7393, 0.1571], [0.1571, 0.4508]], [[0.7254, 0.1635], [0.1635, 0.4624]], [[0.7405, 0.1616], [0.1616, 0.4565]], [[0.7422, 0.1691], [0.1691, 0.4669]], [[0.7443, 0.1581], [0.1581, 0.4499]], [[0.7412, 0.1593], [0.1593, 0.452]], [[0.7315, 0.1624], [0.1624, 0.4644]], [[0.7126, 0.1559], [0.1559, 0.4516]], [[0.7401, 0.1502], [0.1502, 0.4488]], [[0.7405, 0.1565], [0.1565, 0.4436]], [[0.7493, 0.1673], [0.1673, 0.4595]], [[0.7197, 0.1495], [0.1495, 0.4587]], [[0.7304, 0.1546], [0.1546, 0.4497]], [[0.7541, 0.1588], [0.1588, 0.4488]], [[0.7332, 0.1629], [0.1629, 0.4696]], [[0.7344, 0.1672], [0.1672, 0.4572]], [[0.7118, 0.1434], [0.1434, 0.4598]], [[0.7537, 0.1625], [0.1625, 0.4517]], [[0.7348, 0.1665], [0.1665, 0.4613]], [[0.7435, 0.158], [0.158, 0.46]], [[0.7345, 0.1564], [0.1564, 0.4696]], [[0.7278, 0.1726], [0.1726, 0.4735]], [[0.7405, 0.1627], [0.1627, 0.4622]], [[0.7398, 0.1586], [0.1586, 0.4601]], [[0.7234, 0.1521], [0.1521, 0.4482]], [[0.7134, 0.1576], [0.1576, 0.4758]], [[0.7428, 0.1604], [0.1604, 0.4631]], [[0.7505, 0.1607], [0.1607, 0.456]], [[0.7246, 0.1585], [0.1585, 0.4577]], [[0.743, 0.1534], [0.1534, 0.4502]], [[0.7348, 0.1489], [0.1489, 0.4474]], [[0.7279, 0.1653], [0.1653, 0.4591]], [[0.7375, 0.1595], [0.1595, 0.468]], [[0.7338, 0.1478], [0.1478, 0.4792]], [[0.7129, 0.1544], [0.1544, 0.4684]], [[0.7353, 0.1636], [0.1636, 0.4612]], [[0.7407, 0.1569], [0.1569, 0.4584]], [[0.7472, 0.1554], [0.1554, 0.4634]], [[0.7292, 0.1475], [0.1475, 0.4677]], [[0.7339, 0.1606], [0.1606, 0.467]], [[0.7397, 0.1521], [0.1521, 0.4516]], [[0.7424, 0.1484], [0.1484, 0.4556]], [[0.7511, 0.1652], [0.1652, 0.4594]], [[0.7424, 0.1588], [0.1588, 0.4657]], [[0.7508, 0.161], [0.161, 0.4585]], [[0.7287, 0.1497], [0.1497, 0.4577]], [[0.7429, 0.1546], [0.1546, 0.46]], [[0.7392, 0.1556], [0.1556, 0.4686]], [[0.7622, 0.1579], [0.1579, 0.4631]], [[0.7538, 0.166], [0.166, 0.4604]], [[0.7395, 0.1581], [0.1581, 0.474]], [[0.7502, 0.1628], [0.1628, 0.4612]], [[0.7474, 0.1601], [0.1601, 0.4639]], [[0.7347, 0.1553], [0.1553, 0.4637]], [[0.7073, 0.143], [0.143, 0.4674]], [[0.7536, 0.1616], [0.1616, 0.4603]], [[0.753, 0.1506], [0.1506, 0.4525]], [[0.7587, 0.1533], [0.1533, 0.4502]], [[0.7426, 0.155], [0.155, 0.4619]], [[0.7355, 0.1579], [0.1579, 0.4659]], [[0.737, 0.1492], [0.1492, 0.4516]], [[0.7362, 0.1595], [0.1595, 0.4677]], [[0.7294, 0.1495], [0.1495, 0.4637]], [[0.7205, 0.1409], [0.1409, 0.4621]], [[0.748, 0.1576], [0.1576, 0.4513]], [[0.7681, 0.1642], [0.1642, 0.4678]], [[0.7401, 0.163], [0.163, 0.4713]], [[0.7568, 0.1609], [0.1609, 0.4648]], [[0.7421, 0.1587], [0.1587, 0.4619]], [[0.7439, 0.157], [0.157, 0.4633]], [[0.7484, 0.1467], [0.1467, 0.4507]], [[0.7339, 0.15], [0.15, 0.4674]], [[0.7368, 0.1601], [0.1601, 0.4565]], [[0.7462, 0.1536], [0.1536, 0.4628]], [[0.7274, 0.1496], [0.1496, 0.4584]], [[0.7441, 0.1542], [0.1542, 0.4663]], [[0.7358, 0.1621], [0.1621, 0.4632]], [[0.7531, 0.1569], [0.1569, 0.4653]], [[0.7584, 0.1653], [0.1653, 0.4617]], [[0.7313, 0.1631], [0.1631, 0.4701]], [[0.7522, 0.1581], [0.1581, 0.4594]], [[0.7324, 0.1524], [0.1524, 0.4642]], [[0.7104, 0.1552], [0.1552, 0.4687]], [[0.7225, 0.1657], [0.1657, 0.4811]], [[0.7309, 0.1587], [0.1587, 0.4693]], [[0.7487, 0.1473], [0.1473, 0.4642]], [[0.7517, 0.1485], [0.1485, 0.464]], [[0.7343, 0.1614], [0.1614, 0.4719]], [[0.7275, 0.1371], [0.1371, 0.4593]], [[0.7208, 0.1484], [0.1484, 0.4747]], [[0.7441, 0.1522], [0.1522, 0.4702]], [[0.7675, 0.1627], [0.1627, 0.4498]], [[0.7373, 0.1497], [0.1497, 0.4656]], [[0.7543, 0.1496], [0.1496, 0.4622]], [[0.7373, 0.162], [0.162, 0.4733]], [[0.738, 0.153], [0.153, 0.4755]], [[0.7467, 0.1458], [0.1458, 0.4477]], [[0.7497, 0.1573], [0.1573, 0.4785]], [[0.7424, 0.152], [0.152, 0.4666]], [[0.7365, 0.1422], [0.1422, 0.4627]], [[0.7459, 0.1602], [0.1602, 0.47]], [[0.7403, 0.1534], [0.1534, 0.4611]], [[0.7437, 0.1602], [0.1602, 0.4598]], [[0.7352, 0.152], [0.152, 0.4615]], [[0.749, 0.1537], [0.1537, 0.467]], [[0.7445, 0.1485], [0.1485, 0.468]], [[0.7565, 0.1587], [0.1587, 0.4533]], [[0.7309, 0.1482], [0.1482, 0.4638]], [[0.7544, 0.1554], [0.1554, 0.4582]], [[0.749, 0.1545], [0.1545, 0.459]], [[0.7443, 0.1546], [0.1546, 0.4712]], [[0.7344, 0.149], [0.149, 0.4696]], [[0.7327, 0.1569], [0.1569, 0.4806]], [[0.7525, 0.1587], [0.1587, 0.4628]], [[0.7365, 0.1603], [0.1603, 0.4656]], [[0.7575, 0.1477], [0.1477, 0.4627]], [[0.7461, 0.1565], [0.1565, 0.4628]], [[0.7469, 0.1583], [0.1583, 0.4586]], [[0.7252, 0.1425], [0.1425, 0.4706]], [[0.758, 0.1533], [0.1533, 0.4492]], [[0.7242, 0.1478], [0.1478, 0.4674]], [[0.7336, 0.1572], [0.1572, 0.4742]], [[0.7493, 0.147], [0.147, 0.4766]], [[0.7555, 0.1532], [0.1532, 0.4718]], [[0.7513, 0.1451], [0.1451, 0.4678]], [[0.7562, 0.165], [0.165, 0.4694]], [[0.7189, 0.1502], [0.1502, 0.4775]], [[0.7494, 0.1524], [0.1524, 0.477]], [[0.726, 0.147], [0.147, 0.4681]], [[0.7392, 0.1576], [0.1576, 0.4705]], [[0.752, 0.1562], [0.1562, 0.4636]], [[0.7553, 0.1553], [0.1553, 0.4622]], [[0.7557, 0.1515], [0.1515, 0.4713]], [[0.7432, 0.1497], [0.1497, 0.4757]], [[0.735, 0.1624], [0.1624, 0.4912]], [[0.7395, 0.1465], [0.1465, 0.4677]], [[0.7618, 0.1537], [0.1537, 0.4679]], [[0.7677, 0.1569], [0.1569, 0.4692]], [[0.756, 0.156], [0.156, 0.4775]], [[0.7667, 0.1527], [0.1527, 0.471]], [[0.731, 0.1435], [0.1435, 0.476]], [[0.7511, 0.1537], [0.1537, 0.4614]], [[0.7142, 0.1537], [0.1537, 0.4762]], [[0.7192, 0.1424], [0.1424, 0.4799]], [[0.7512, 0.1563], [0.1563, 0.4798]], [[0.7557, 0.146], [0.146, 0.4735]], [[0.7314, 0.149], [0.149, 0.4677]], [[0.7433, 0.1471], [0.1471, 0.4592]], [[0.7579, 0.1619], [0.1619, 0.479]], [[0.7474, 0.1534], [0.1534, 0.4664]], [[0.7424, 0.1592], [0.1592, 0.4772]], [[0.7403, 0.1507], [0.1507, 0.4635]], [[0.7449, 0.1577], [0.1577, 0.4708]], [[0.7308, 0.1469], [0.1469, 0.4674]], [[0.7355, 0.1619], [0.1619, 0.4677]], [[0.7461, 0.153], [0.153, 0.4788]], [[0.751, 0.1542], [0.1542, 0.4495]], [[0.7402, 0.1461], [0.1461, 0.459]], [[0.7504, 0.1464], [0.1464, 0.4713]], [[0.7463, 0.1564], [0.1564, 0.4707]], [[0.7523, 0.153], [0.153, 0.4604]], [[0.7607, 0.1484], [0.1484, 0.4604]], [[0.7535, 0.1502], [0.1502, 0.4729]], [[0.7326, 0.1596], [0.1596, 0.4836]], [[0.74, 0.1527], [0.1527, 0.4837]], [[0.7399, 0.1466], [0.1466, 0.4697]], [[0.7147, 0.1532], [0.1532, 0.4776]], [[0.7437, 0.1518], [0.1518, 0.47]], [[0.7527, 0.149], [0.149, 0.4565]], [[0.7361, 0.1439], [0.1439, 0.4686]], [[0.7211, 0.1475], [0.1475, 0.4713]], [[0.7564, 0.156], [0.156, 0.458]], [[0.7575, 0.1546], [0.1546, 0.4599]], [[0.7476, 0.145], [0.145, 0.4653]], [[0.7454, 0.1478], [0.1478, 0.4646]], [[0.7411, 0.1458], [0.1458, 0.4689]], [[0.7404, 0.1498], [0.1498, 0.4715]], [[0.7315, 0.1414], [0.1414, 0.4724]], [[0.7579, 0.1479], [0.1479, 0.4629]], [[0.7307, 0.1546], [0.1546, 0.4781]], [[0.7475, 0.1448], [0.1448, 0.4638]], [[0.7651, 0.1545], [0.1545, 0.4603]], [[0.7638, 0.156], [0.156, 0.4577]], [[0.7457, 0.1415], [0.1415, 0.4582]], [[0.7417, 0.151], [0.151, 0.4744]], [[0.7446, 0.153], [0.153, 0.469]], [[0.7177, 0.147], [0.147, 0.474]], [[0.7347, 0.1459], [0.1459, 0.4643]], [[0.7373, 0.1513], [0.1513, 0.4704]], [[0.7356, 0.1574], [0.1574, 0.4754]], [[0.7145, 0.1471], [0.1471, 0.4956]], [[0.7241, 0.1501], [0.1501, 0.4747]], [[0.7538, 0.1582], [0.1582, 0.4682]], [[0.7429, 0.1503], [0.1503, 0.4713]], [[0.7487, 0.1544], [0.1544, 0.4854]], [[0.7306, 0.1488], [0.1488, 0.4661]], [[0.7165, 0.137], [0.137, 0.4682]], [[0.7209, 0.1421], [0.1421, 0.4713]], [[0.7401, 0.1462], [0.1462, 0.4655]], [[0.7218, 0.139], [0.139, 0.4747]], [[0.7394, 0.152], [0.152, 0.4827]], [[0.7577, 0.1447], [0.1447, 0.4679]], [[0.7463, 0.1575], [0.1575, 0.4761]], [[0.7648, 0.1536], [0.1536, 0.4761]], [[0.7342, 0.1537], [0.1537, 0.482]], [[0.7263, 0.1495], [0.1495, 0.4744]], [[0.7282, 0.1515], [0.1515, 0.4686]], [[0.753, 0.1605], [0.1605, 0.4902]], [[0.7477, 0.1451], [0.1451, 0.4783]], [[0.7452, 0.1503], [0.1503, 0.4633]], [[0.7401, 0.1506], [0.1506, 0.4768]], [[0.7382, 0.1423], [0.1423, 0.4731]], [[0.7411, 0.1546], [0.1546, 0.4734]], [[0.7565, 0.1524], [0.1524, 0.4708]], [[0.7556, 0.1453], [0.1453, 0.4613]], [[0.755, 0.1523], [0.1523, 0.4576]], [[0.7381, 0.1553], [0.1553, 0.4815]], [[0.7519, 0.1475], [0.1475, 0.4685]], [[0.7428, 0.1626], [0.1626, 0.4848]], [[0.7218, 0.1448], [0.1448, 0.4743]], [[0.7497, 0.1453], [0.1453, 0.4683]], [[0.7306, 0.1558], [0.1558, 0.4798]], [[0.7548, 0.1522], [0.1522, 0.4572]], [[0.7493, 0.1521], [0.1521, 0.4686]], [[0.7231, 0.1402], [0.1402, 0.4798]], [[0.7379, 0.1528], [0.1528, 0.4747]], [[0.7776, 0.1571], [0.1571, 0.4802]], [[0.74, 0.1451], [0.1451, 0.4688]], [[0.7431, 0.1524], [0.1524, 0.4725]], [[0.7394, 0.1357], [0.1357, 0.4562]], [[0.7302, 0.1414], [0.1414, 0.4738]], [[0.7562, 0.1412], [0.1412, 0.4625]], [[0.7602, 0.1587], [0.1587, 0.4698]], [[0.7502, 0.1477], [0.1477, 0.4815]], [[0.7359, 0.1464], [0.1464, 0.4949]], [[0.7331, 0.1537], [0.1537, 0.4792]], [[0.7547, 0.1441], [0.1441, 0.4525]], [[0.7504, 0.1555], [0.1555, 0.4759]], [[0.7274, 0.1394], [0.1394, 0.4622]], [[0.7531, 0.1449], [0.1449, 0.4713]], [[0.7491, 0.1674], [0.1674, 0.4767]], [[0.7344, 0.1364], [0.1364, 0.4685]], [[0.7309, 0.1415], [0.1415, 0.4805]], [[0.7604, 0.1473], [0.1473, 0.4658]], [[0.7368, 0.1525], [0.1525, 0.4749]], [[0.7382, 0.1495], [0.1495, 0.4599]], [[0.7279, 0.1498], [0.1498, 0.4728]], [[0.759, 0.1571], [0.1571, 0.4724]], [[0.7457, 0.1462], [0.1462, 0.4595]], [[0.7444, 0.1494], [0.1494, 0.4629]], [[0.7247, 0.1523], [0.1523, 0.4794]], [[0.7598, 0.1478], [0.1478, 0.4685]], [[0.7178, 0.1418], [0.1418, 0.4791]], [[0.7311, 0.1516], [0.1516, 0.4777]], [[0.7148, 0.1466], [0.1466, 0.4695]], [[0.7516, 0.1574], [0.1574, 0.4806]], [[0.7436, 0.1475], [0.1475, 0.4658]], [[0.713, 0.1481], [0.1481, 0.4887]], [[0.7361, 0.1528], [0.1528, 0.4767]], [[0.7512, 0.1344], [0.1344, 0.4661]], [[0.7255, 0.1477], [0.1477, 0.4779]], [[0.7549, 0.1489], [0.1489, 0.4813]], [[0.7928, 0.1567], [0.1567, 0.4629]], [[0.74, 0.148], [0.148, 0.4636]], [[0.7366, 0.1512], [0.1512, 0.4806]], [[0.734, 0.1419], [0.1419, 0.4819]], [[0.7571, 0.155], [0.155, 0.4631]], [[0.7293, 0.141], [0.141, 0.4791]], [[0.7256, 0.1437], [0.1437, 0.4749]], [[0.7486, 0.1509], [0.1509, 0.4741]], [[0.7565, 0.1496], [0.1496, 0.4726]], [[0.743, 0.1532], [0.1532, 0.4761]], [[0.7148, 0.1518], [0.1518, 0.4749]], [[0.742, 0.1527], [0.1527, 0.4672]], [[0.7318, 0.1478], [0.1478, 0.4823]], [[0.7506, 0.1445], [0.1445, 0.4742]], [[0.7431, 0.1433], [0.1433, 0.4668]], [[0.7236, 0.1453], [0.1453, 0.4825]], [[0.7504, 0.1517], [0.1517, 0.451]], [[0.7631, 0.1498], [0.1498, 0.494]], [[0.7269, 0.1448], [0.1448, 0.481]], [[0.743, 0.138], [0.138, 0.4737]], [[0.738, 0.1546], [0.1546, 0.4799]], [[0.7554, 0.1577], [0.1577, 0.4745]], [[0.7422, 0.1563], [0.1563, 0.4811]], [[0.7325, 0.1479], [0.1479, 0.4825]], [[0.7323, 0.1463], [0.1463, 0.4735]], [[0.7345, 0.144], [0.144, 0.4722]], [[0.7538, 0.1519], [0.1519, 0.4736]], [[0.7475, 0.1477], [0.1477, 0.478]], [[0.7328, 0.1572], [0.1572, 0.4818]], [[0.7762, 0.1558], [0.1558, 0.4611]], [[0.7672, 0.1671], [0.1671, 0.4778]], [[0.7311, 0.1452], [0.1452, 0.4615]], [[0.7505, 0.1482], [0.1482, 0.4641]], [[0.74, 0.1505], [0.1505, 0.4775]], [[0.7481, 0.1481], [0.1481, 0.4719]], [[0.7309, 0.15], [0.15, 0.4952]], [[0.7331, 0.1473], [0.1473, 0.4718]], [[0.7447, 0.1438], [0.1438, 0.4595]], [[0.7368, 0.1403], [0.1403, 0.4763]], [[0.7568, 0.15], [0.15, 0.4763]], [[0.7595, 0.1466], [0.1466, 0.4674]], [[0.726, 0.1555], [0.1555, 0.4805]], [[0.7504, 0.1487], [0.1487, 0.4746]], [[0.7445, 0.1401], [0.1401, 0.4609]], [[0.7488, 0.1436], [0.1436, 0.4812]], [[0.7608, 0.1443], [0.1443, 0.4808]], [[0.736, 0.1427], [0.1427, 0.4832]], [[0.728, 0.1403], [0.1403, 0.4846]], [[0.7546, 0.1471], [0.1471, 0.4783]], [[0.7411, 0.1475], [0.1475, 0.4571]], [[0.7841, 0.1642], [0.1642, 0.4756]], [[0.7619, 0.1474], [0.1474, 0.4683]], [[0.7588, 0.1569], [0.1569, 0.4692]], [[0.7367, 0.1485], [0.1485, 0.4787]], [[0.7443, 0.1477], [0.1477, 0.4721]], [[0.7383, 0.1546], [0.1546, 0.4714]], [[0.7292, 0.1588], [0.1588, 0.4881]], [[0.7042, 0.1464], [0.1464, 0.4774]], [[0.7356, 0.1469], [0.1469, 0.4707]], [[0.7257, 0.1499], [0.1499, 0.481]], [[0.739, 0.1386], [0.1386, 0.4649]], [[0.763, 0.1509], [0.1509, 0.4737]], [[0.7251, 0.142], [0.142, 0.4675]], [[0.753, 0.1436], [0.1436, 0.4741]], [[0.7645, 0.1493], [0.1493, 0.4688]], [[0.7346, 0.1407], [0.1407, 0.472]], [[0.7558, 0.1552], [0.1552, 0.4752]], [[0.7326, 0.1461], [0.1461, 0.4735]], [[0.7435, 0.1412], [0.1412, 0.4723]], [[0.7335, 0.138], [0.138, 0.4659]], [[0.7366, 0.1553], [0.1553, 0.4699]], [[0.742, 0.1445], [0.1445, 0.4576]], [[0.7481, 0.149], [0.149, 0.4766]], [[0.7413, 0.1545], [0.1545, 0.4804]], [[0.7638, 0.1548], [0.1548, 0.4668]], [[0.727, 0.1468], [0.1468, 0.4619]], [[0.7343, 0.1545], [0.1545, 0.4707]], [[0.7574, 0.1477], [0.1477, 0.4759]], [[0.749, 0.1523], [0.1523, 0.4745]], [[0.7412, 0.1437], [0.1437, 0.4859]], [[0.7499, 0.1291], [0.1291, 0.4666]], [[0.7285, 0.1393], [0.1393, 0.4811]], [[0.7403, 0.1524], [0.1524, 0.4615]], [[0.7271, 0.139], [0.139, 0.4821]], [[0.7197, 0.1376], [0.1376, 0.4702]], [[0.7358, 0.1602], [0.1602, 0.4941]], [[0.756, 0.1505], [0.1505, 0.4742]], [[0.74, 0.1499], [0.1499, 0.4857]], [[0.7119, 0.1398], [0.1398, 0.4688]], [[0.7387, 0.1448], [0.1448, 0.4676]], [[0.7337, 0.1554], [0.1554, 0.4668]], [[0.7387, 0.1427], [0.1427, 0.4627]], [[0.7546, 0.1401], [0.1401, 0.4638]], [[0.7327, 0.1457], [0.1457, 0.479]], [[0.7364, 0.1415], [0.1415, 0.4771]], [[0.724, 0.148], [0.148, 0.4856]], [[0.7471, 0.1456], [0.1456, 0.4781]], [[0.7268, 0.1449], [0.1449, 0.4565]], [[0.7304, 0.1508], [0.1508, 0.483]], [[0.7519, 0.1539], [0.1539, 0.4611]], [[0.7491, 0.1423], [0.1423, 0.4621]], [[0.7387, 0.1489], [0.1489, 0.4777]], [[0.7356, 0.1412], [0.1412, 0.4705]], [[0.7554, 0.1451], [0.1451, 0.4759]], [[0.7419, 0.1414], [0.1414, 0.4622]], [[0.729, 0.1516], [0.1516, 0.4778]], [[0.7644, 0.1473], [0.1473, 0.4678]], [[0.7576, 0.1509], [0.1509, 0.4597]], [[0.7313, 0.1482], [0.1482, 0.4805]], [[0.7194, 0.145], [0.145, 0.4809]], [[0.7488, 0.1578], [0.1578, 0.4788]], [[0.7514, 0.1425], [0.1425, 0.472]], [[0.7393, 0.1359], [0.1359, 0.4883]], [[0.7319, 0.1457], [0.1457, 0.4813]], [[0.7176, 0.1472], [0.1472, 0.4866]], [[0.7313, 0.1593], [0.1593, 0.4782]], [[0.763, 0.1487], [0.1487, 0.477]], [[0.736, 0.1453], [0.1453, 0.4906]], [[0.7479, 0.1448], [0.1448, 0.4591]], [[0.7391, 0.1508], [0.1508, 0.4815]], [[0.7717, 0.1422], [0.1422, 0.4494]], [[0.7438, 0.1368], [0.1368, 0.4709]], [[0.742, 0.1499], [0.1499, 0.4861]], [[0.7352, 0.1408], [0.1408, 0.4819]], [[0.7366, 0.1539], [0.1539, 0.4743]], [[0.7438, 0.1426], [0.1426, 0.4699]], [[0.7389, 0.1464], [0.1464, 0.4782]], [[0.7684, 0.1519], [0.1519, 0.4622]], [[0.7338, 0.1543], [0.1543, 0.4867]], [[0.7372, 0.1449], [0.1449, 0.4631]], [[0.7489, 0.1411], [0.1411, 0.4716]], [[0.7362, 0.1377], [0.1377, 0.4748]], [[0.7452, 0.1468], [0.1468, 0.4663]], [[0.7317, 0.1339], [0.1339, 0.4678]], [[0.7294, 0.1432], [0.1432, 0.4787]], [[0.7501, 0.1507], [0.1507, 0.4719]], [[0.721, 0.1527], [0.1527, 0.4823]], [[0.7413, 0.1532], [0.1532, 0.4845]], [[0.7586, 0.1531], [0.1531, 0.473]], [[0.7345, 0.1482], [0.1482, 0.4649]], [[0.7368, 0.1518], [0.1518, 0.4638]], [[0.755, 0.146], [0.146, 0.4785]], [[0.7572, 0.142], [0.142, 0.4675]], [[0.7349, 0.155], [0.155, 0.4696]], [[0.7598, 0.1516], [0.1516, 0.4757]], [[0.7316, 0.1447], [0.1447, 0.4729]], [[0.7355, 0.1569], [0.1569, 0.4903]], [[0.7476, 0.1532], [0.1532, 0.4827]], [[0.7558, 0.1478], [0.1478, 0.4652]], [[0.7331, 0.1432], [0.1432, 0.476]], [[0.7419, 0.1512], [0.1512, 0.4718]], [[0.74, 0.1487], [0.1487, 0.48]], [[0.7388, 0.1549], [0.1549, 0.4841]], [[0.7275, 0.1312], [0.1312, 0.4802]], [[0.7173, 0.1477], [0.1477, 0.4826]], [[0.7408, 0.1445], [0.1445, 0.476]], [[0.7292, 0.1441], [0.1441, 0.4662]], [[0.7355, 0.1588], [0.1588, 0.4836]], [[0.7606, 0.1536], [0.1536, 0.4631]], [[0.7398, 0.156], [0.156, 0.4865]], [[0.7496, 0.1472], [0.1472, 0.4774]], [[0.712, 0.1402], [0.1402, 0.4872]], [[0.7494, 0.1573], [0.1573, 0.4713]], [[0.7049, 0.1383], [0.1383, 0.4945]], [[0.7413, 0.1444], [0.1444, 0.483]], [[0.7321, 0.131], [0.131, 0.4723]], [[0.7241, 0.1473], [0.1473, 0.4853]], [[0.7267, 0.139], [0.139, 0.487]], [[0.7485, 0.1402], [0.1402, 0.469]], [[0.7496, 0.1496], [0.1496, 0.4856]], [[0.7495, 0.1405], [0.1405, 0.4664]], [[0.7643, 0.148], [0.148, 0.4648]], [[0.7551, 0.157], [0.157, 0.4789]], [[0.7323, 0.1429], [0.1429, 0.4695]], [[0.7493, 0.1392], [0.1392, 0.4789]], [[0.7221, 0.1492], [0.1492, 0.4675]], [[0.7373, 0.144], [0.144, 0.4619]], [[0.7608, 0.1573], [0.1573, 0.4711]], [[0.7597, 0.1561], [0.1561, 0.4706]], [[0.7323, 0.1393], [0.1393, 0.4769]], [[0.7387, 0.1442], [0.1442, 0.4843]], [[0.743, 0.151], [0.151, 0.4865]], [[0.7512, 0.1566], [0.1566, 0.485]], [[0.7363, 0.1436], [0.1436, 0.4809]], [[0.7494, 0.1417], [0.1417, 0.4637]], [[0.7241, 0.1493], [0.1493, 0.4824]], [[0.746, 0.1447], [0.1447, 0.4685]], [[0.7427, 0.1495], [0.1495, 0.4752]], [[0.7281, 0.1446], [0.1446, 0.497]], [[0.7463, 0.1448], [0.1448, 0.4649]], [[0.7432, 0.1504], [0.1504, 0.4678]], [[0.7408, 0.1451], [0.1451, 0.4672]], [[0.749, 0.1443], [0.1443, 0.4752]], [[0.7626, 0.1458], [0.1458, 0.4661]], [[0.7369, 0.1457], [0.1457, 0.4703]], [[0.7598, 0.156], [0.156, 0.463]], [[0.7565, 0.1563], [0.1563, 0.4824]], [[0.7295, 0.1423], [0.1423, 0.4728]], [[0.7322, 0.1527], [0.1527, 0.4731]], [[0.7377, 0.1558], [0.1558, 0.4927]], [[0.7321, 0.1428], [0.1428, 0.4805]], [[0.7451, 0.1353], [0.1353, 0.4784]], [[0.7148, 0.1353], [0.1353, 0.4802]], [[0.7735, 0.1508], [0.1508, 0.4788]], [[0.7487, 0.1444], [0.1444, 0.4771]], [[0.7539, 0.1525], [0.1525, 0.4639]], [[0.7509, 0.1532], [0.1532, 0.4656]], [[0.7414, 0.1383], [0.1383, 0.4674]], [[0.7378, 0.1533], [0.1533, 0.4824]], [[0.7341, 0.158], [0.158, 0.4871]], [[0.7514, 0.1411], [0.1411, 0.4668]], [[0.74, 0.1399], [0.1399, 0.4755]], [[0.7483, 0.1477], [0.1477, 0.4841]], [[0.7169, 0.1403], [0.1403, 0.4689]], [[0.7469, 0.1521], [0.1521, 0.4737]], [[0.7341, 0.1496], [0.1496, 0.4781]], [[0.7319, 0.14], [0.14, 0.4822]], [[0.7505, 0.1519], [0.1519, 0.4735]], [[0.725, 0.1465], [0.1465, 0.4698]], [[0.7516, 0.1539], [0.1539, 0.4711]], [[0.753, 0.1502], [0.1502, 0.4794]], [[0.7198, 0.146], [0.146, 0.485]], [[0.7493, 0.1462], [0.1462, 0.4589]], [[0.7241, 0.1486], [0.1486, 0.473]], [[0.767, 0.1601], [0.1601, 0.467]], [[0.7394, 0.1583], [0.1583, 0.4669]], [[0.7653, 0.1515], [0.1515, 0.4704]], [[0.7278, 0.1464], [0.1464, 0.4706]], [[0.7657, 0.1498], [0.1498, 0.462]], [[0.735, 0.1558], [0.1558, 0.4828]], [[0.7284, 0.1428], [0.1428, 0.477]], [[0.7643, 0.147], [0.147, 0.4624]], [[0.7391, 0.1482], [0.1482, 0.4592]], [[0.7566, 0.1484], [0.1484, 0.4668]], [[0.7583, 0.148], [0.148, 0.4731]], [[0.7421, 0.1541], [0.1541, 0.4885]], [[0.7593, 0.1576], [0.1576, 0.4819]], [[0.7514, 0.1507], [0.1507, 0.4736]], [[0.7237, 0.1413], [0.1413, 0.4791]], [[0.7444, 0.1602], [0.1602, 0.4762]], [[0.7454, 0.1515], [0.1515, 0.4906]], [[0.7422, 0.1499], [0.1499, 0.4859]], [[0.7523, 0.1564], [0.1564, 0.4797]], [[0.7491, 0.1418], [0.1418, 0.4616]], [[0.7445, 0.1485], [0.1485, 0.4796]], [[0.7415, 0.1464], [0.1464, 0.4749]], [[0.7453, 0.1451], [0.1451, 0.4736]], [[0.7287, 0.1535], [0.1535, 0.4856]], [[0.7271, 0.1496], [0.1496, 0.4849]], [[0.7397, 0.145], [0.145, 0.478]], [[0.7414, 0.1381], [0.1381, 0.478]], [[0.7221, 0.127], [0.127, 0.4548]], [[0.749, 0.1443], [0.1443, 0.465]], [[0.7237, 0.1417], [0.1417, 0.4816]], [[0.7423, 0.1458], [0.1458, 0.4819]], [[0.7532, 0.1537], [0.1537, 0.4587]], [[0.7362, 0.1443], [0.1443, 0.4651]], [[0.7461, 0.1404], [0.1404, 0.4799]], [[0.7619, 0.161], [0.161, 0.4945]], [[0.7389, 0.1543], [0.1543, 0.4705]], [[0.7374, 0.1451], [0.1451, 0.4765]], [[0.7255, 0.1462], [0.1462, 0.4814]], [[0.7415, 0.1443], [0.1443, 0.4741]], [[0.7308, 0.1481], [0.1481, 0.4916]], [[0.7457, 0.1464], [0.1464, 0.4766]], [[0.7606, 0.1505], [0.1505, 0.4748]], [[0.7368, 0.148], [0.148, 0.4862]], [[0.754, 0.1482], [0.1482, 0.4573]], [[0.7389, 0.1437], [0.1437, 0.4619]], [[0.7317, 0.1543], [0.1543, 0.4891]], [[0.7327, 0.148], [0.148, 0.4698]], [[0.717, 0.1422], [0.1422, 0.4801]], [[0.7465, 0.1531], [0.1531, 0.4888]], [[0.7578, 0.1543], [0.1543, 0.4614]], [[0.7432, 0.1474], [0.1474, 0.4758]], [[0.7536, 0.1471], [0.1471, 0.4748]], [[0.7562, 0.152], [0.152, 0.4727]], [[0.7494, 0.1389], [0.1389, 0.4855]], [[0.7304, 0.1496], [0.1496, 0.4721]], [[0.7393, 0.1458], [0.1458, 0.4694]], [[0.7904, 0.1596], [0.1596, 0.4667]], [[0.7323, 0.1531], [0.1531, 0.4921]], [[0.7305, 0.1398], [0.1398, 0.4798]], [[0.7411, 0.1551], [0.1551, 0.4814]], [[0.7309, 0.1453], [0.1453, 0.4721]], [[0.7662, 0.1511], [0.1511, 0.4732]], [[0.7416, 0.1507], [0.1507, 0.4893]], [[0.7364, 0.1503], [0.1503, 0.4917]], [[0.7564, 0.1518], [0.1518, 0.4737]], [[0.7171, 0.1499], [0.1499, 0.48]], [[0.753, 0.1518], [0.1518, 0.4759]], [[0.7574, 0.1404], [0.1404, 0.4643]], [[0.7497, 0.1475], [0.1475, 0.4694]], [[0.7398, 0.1445], [0.1445, 0.4789]], [[0.7397, 0.1368], [0.1368, 0.4771]], [[0.72, 0.1387], [0.1387, 0.4919]], [[0.7295, 0.1483], [0.1483, 0.4902]], [[0.7447, 0.1504], [0.1504, 0.475]], [[0.743, 0.141], [0.141, 0.4762]], [[0.7133, 0.1358], [0.1358, 0.495]], [[0.735, 0.1316], [0.1316, 0.4796]], [[0.7201, 0.1469], [0.1469, 0.4834]], [[0.749, 0.148], [0.148, 0.4722]], [[0.7534, 0.1519], [0.1519, 0.4731]], [[0.7667, 0.1403], [0.1403, 0.4569]], [[0.7516, 0.1471], [0.1471, 0.4599]], [[0.7346, 0.1521], [0.1521, 0.4711]], [[0.721, 0.1436], [0.1436, 0.4831]], [[0.7573, 0.1537], [0.1537, 0.4654]], [[0.7195, 0.1355], [0.1355, 0.4633]], [[0.7255, 0.141], [0.141, 0.469]], [[0.7512, 0.1442], [0.1442, 0.4687]], [[0.7402, 0.1489], [0.1489, 0.4785]], [[0.7263, 0.1405], [0.1405, 0.4767]], [[0.7353, 0.145], [0.145, 0.4771]], [[0.7269, 0.1363], [0.1363, 0.4712]], [[0.7613, 0.1513], [0.1513, 0.4696]], [[0.7656, 0.1515], [0.1515, 0.4806]], [[0.7357, 0.1491], [0.1491, 0.4789]], [[0.737, 0.1491], [0.1491, 0.4807]], [[0.7406, 0.1528], [0.1528, 0.475]], [[0.7463, 0.1415], [0.1415, 0.4677]], [[0.7476, 0.1466], [0.1466, 0.4614]], [[0.773, 0.1575], [0.1575, 0.4761]], [[0.7382, 0.151], [0.151, 0.4919]], [[0.7406, 0.1597], [0.1597, 0.4928]], [[0.7466, 0.147], [0.147, 0.479]], [[0.7487, 0.1653], [0.1653, 0.4783]], [[0.7674, 0.1556], [0.1556, 0.4666]], [[0.7697, 0.1523], [0.1523, 0.4799]], [[0.7568, 0.1436], [0.1436, 0.4687]], [[0.7617, 0.153], [0.153, 0.4729]], [[0.7381, 0.1518], [0.1518, 0.4833]], [[0.7457, 0.1425], [0.1425, 0.4823]], [[0.7449, 0.1384], [0.1384, 0.4812]], [[0.7049, 0.144], [0.144, 0.4816]], [[0.7283, 0.1448], [0.1448, 0.4792]], [[0.7599, 0.1539], [0.1539, 0.4741]], [[0.7147, 0.1375], [0.1375, 0.482]], [[0.7554, 0.1435], [0.1435, 0.4702]], [[0.7429, 0.144], [0.144, 0.4797]], [[0.7627, 0.1464], [0.1464, 0.4894]], [[0.7559, 0.1522], [0.1522, 0.4767]], [[0.7263, 0.1466], [0.1466, 0.5017]], [[0.7611, 0.15], [0.15, 0.4608]], [[0.7459, 0.1402], [0.1402, 0.4706]], [[0.7504, 0.1516], [0.1516, 0.4585]], [[0.7397, 0.1467], [0.1467, 0.4818]], [[0.7403, 0.1473], [0.1473, 0.4932]], [[0.7816, 0.1442], [0.1442, 0.4647]], [[0.7179, 0.1474], [0.1474, 0.4797]], [[0.7456, 0.149], [0.149, 0.4707]], [[0.7623, 0.1591], [0.1591, 0.4799]], [[0.7375, 0.1399], [0.1399, 0.4642]], [[0.7556, 0.141], [0.141, 0.4694]], [[0.7461, 0.1371], [0.1371, 0.4632]], [[0.7415, 0.1487], [0.1487, 0.472]], [[0.7103, 0.1438], [0.1438, 0.4966]], [[0.7481, 0.1468], [0.1468, 0.4749]], [[0.7462, 0.1371], [0.1371, 0.4655]], [[0.7692, 0.1537], [0.1537, 0.4827]], [[0.7489, 0.1482], [0.1482, 0.4714]], [[0.7609, 0.1553], [0.1553, 0.4784]], [[0.7584, 0.1532], [0.1532, 0.4782]], [[0.7479, 0.146], [0.146, 0.4709]], [[0.7517, 0.1404], [0.1404, 0.4772]], [[0.7306, 0.1494], [0.1494, 0.4847]], [[0.7538, 0.1453], [0.1453, 0.4759]], [[0.7499, 0.1427], [0.1427, 0.4666]], [[0.7346, 0.1579], [0.1579, 0.5095]], [[0.7407, 0.1379], [0.1379, 0.4781]], [[0.7518, 0.1534], [0.1534, 0.4828]], [[0.7397, 0.1488], [0.1488, 0.4726]], [[0.7436, 0.1434], [0.1434, 0.4803]], [[0.7151, 0.1337], [0.1337, 0.4775]], [[0.7518, 0.1498], [0.1498, 0.4854]], [[0.7534, 0.1483], [0.1483, 0.4745]], [[0.7329, 0.1459], [0.1459, 0.4832]], [[0.7211, 0.1548], [0.1548, 0.4751]], [[0.7697, 0.1541], [0.1541, 0.4596]], [[0.7465, 0.144], [0.144, 0.4741]], [[0.7605, 0.1533], [0.1533, 0.4742]], [[0.7393, 0.1542], [0.1542, 0.4776]], [[0.7299, 0.1443], [0.1443, 0.4722]], [[0.7301, 0.1434], [0.1434, 0.4754]], [[0.7408, 0.1474], [0.1474, 0.4663]], [[0.7355, 0.1515], [0.1515, 0.4792]], [[0.7435, 0.1506], [0.1506, 0.4881]], [[0.7416, 0.1443], [0.1443, 0.4752]], [[0.7411, 0.1447], [0.1447, 0.487]], [[0.7375, 0.162], [0.162, 0.4964]], [[0.7424, 0.1465], [0.1465, 0.4696]], [[0.75, 0.1535], [0.1535, 0.4732]], [[0.7404, 0.1489], [0.1489, 0.476]], [[0.7183, 0.1396], [0.1396, 0.4693]], [[0.7484, 0.1455], [0.1455, 0.4685]], [[0.7439, 0.1478], [0.1478, 0.4735]], [[0.7456, 0.1477], [0.1477, 0.4674]], [[0.7506, 0.1576], [0.1576, 0.4884]], [[0.7525, 0.1332], [0.1332, 0.4631]], [[0.7527, 0.1503], [0.1503, 0.4749]], [[0.7532, 0.153], [0.153, 0.4769]], [[0.7543, 0.1471], [0.1471, 0.4666]], [[0.7544, 0.152], [0.152, 0.4687]], [[0.7515, 0.1593], [0.1593, 0.4698]], [[0.7343, 0.1439], [0.1439, 0.4702]], [[0.7308, 0.1419], [0.1419, 0.4792]], [[0.7222, 0.1372], [0.1372, 0.4788]], [[0.7578, 0.1492], [0.1492, 0.4744]], [[0.7576, 0.1492], [0.1492, 0.4685]], [[0.7243, 0.1339], [0.1339, 0.4706]], [[0.7317, 0.1383], [0.1383, 0.4792]], [[0.7513, 0.1543], [0.1543, 0.4873]], [[0.7381, 0.1419], [0.1419, 0.4731]], [[0.7451, 0.1398], [0.1398, 0.4794]], [[0.7903, 0.1584], [0.1584, 0.4681]], [[0.7496, 0.1462], [0.1462, 0.4644]], [[0.7375, 0.139], [0.139, 0.4833]], [[0.7534, 0.153], [0.153, 0.4735]], [[0.7494, 0.1547], [0.1547, 0.462]], [[0.7334, 0.1409], [0.1409, 0.4653]], [[0.7374, 0.1517], [0.1517, 0.4656]], [[0.7475, 0.1512], [0.1512, 0.4702]], [[0.7644, 0.1474], [0.1474, 0.4693]], [[0.7212, 0.141], [0.141, 0.4928]], [[0.7559, 0.1513], [0.1513, 0.469]], [[0.76, 0.1535], [0.1535, 0.46]], [[0.7196, 0.141], [0.141, 0.4735]], [[0.7277, 0.1413], [0.1413, 0.4879]], [[0.7431, 0.1515], [0.1515, 0.4689]], [[0.7505, 0.1499], [0.1499, 0.4677]], [[0.7574, 0.1456], [0.1456, 0.4884]], [[0.7499, 0.1467], [0.1467, 0.4688]], [[0.7445, 0.1449], [0.1449, 0.4731]], [[0.7374, 0.1389], [0.1389, 0.4916]], [[0.7582, 0.1478], [0.1478, 0.4726]], [[0.7457, 0.1522], [0.1522, 0.4806]], [[0.754, 0.1572], [0.1572, 0.4796]], [[0.7426, 0.1509], [0.1509, 0.4718]], [[0.7372, 0.1473], [0.1473, 0.494]], [[0.7452, 0.1489], [0.1489, 0.4827]], [[0.7534, 0.1426], [0.1426, 0.4745]], [[0.7486, 0.1535], [0.1535, 0.4615]], [[0.7335, 0.1468], [0.1468, 0.4809]], [[0.7445, 0.1513], [0.1513, 0.4737]], [[0.7459, 0.1582], [0.1582, 0.4802]], [[0.7348, 0.1419], [0.1419, 0.477]], [[0.7396, 0.147], [0.147, 0.4636]], [[0.7337, 0.1444], [0.1444, 0.4719]], [[0.7232, 0.1513], [0.1513, 0.4845]], [[0.7509, 0.1589], [0.1589, 0.4767]], [[0.7391, 0.1484], [0.1484, 0.4711]], [[0.7482, 0.1538], [0.1538, 0.4604]], [[0.7526, 0.1498], [0.1498, 0.4663]], [[0.7547, 0.1448], [0.1448, 0.4639]], [[0.724, 0.1417], [0.1417, 0.4764]], [[0.743, 0.1457], [0.1457, 0.4788]], [[0.7484, 0.1505], [0.1505, 0.4735]], [[0.718, 0.1408], [0.1408, 0.4895]], [[0.7365, 0.1431], [0.1431, 0.4878]], [[0.7376, 0.1505], [0.1505, 0.4726]], [[0.7448, 0.1488], [0.1488, 0.4681]], [[0.7426, 0.1542], [0.1542, 0.4724]], [[0.7349, 0.139], [0.139, 0.4578]], [[0.7488, 0.1444], [0.1444, 0.4728]], [[0.7306, 0.1412], [0.1412, 0.4838]], [[0.7279, 0.1418], [0.1418, 0.4753]], [[0.7331, 0.1427], [0.1427, 0.4804]], [[0.7481, 0.1466], [0.1466, 0.4909]], [[0.7483, 0.1426], [0.1426, 0.4829]], [[0.7531, 0.1482], [0.1482, 0.4691]], [[0.7613, 0.1489], [0.1489, 0.4726]], [[0.741, 0.1565], [0.1565, 0.4819]], [[0.7597, 0.1462], [0.1462, 0.4499]], [[0.7267, 0.1449], [0.1449, 0.4741]], [[0.7251, 0.1416], [0.1416, 0.4789]], [[0.7249, 0.1446], [0.1446, 0.4737]], [[0.7347, 0.1489], [0.1489, 0.4806]], [[0.7357, 0.1405], [0.1405, 0.4756]], [[0.75, 0.1455], [0.1455, 0.4797]], [[0.7379, 0.1376], [0.1376, 0.4665]], [[0.7324, 0.1426], [0.1426, 0.4761]], [[0.7459, 0.152], [0.152, 0.4877]], [[0.7281, 0.149], [0.149, 0.4819]], [[0.7548, 0.1409], [0.1409, 0.4751]], [[0.7388, 0.154], [0.154, 0.4621]], [[0.7321, 0.1478], [0.1478, 0.4784]], [[0.7519, 0.1585], [0.1585, 0.4891]], [[0.7232, 0.1386], [0.1386, 0.4937]], [[0.7441, 0.1346], [0.1346, 0.4654]], [[0.7454, 0.1548], [0.1548, 0.4616]], [[0.7268, 0.1421], [0.1421, 0.4818]], [[0.7531, 0.1528], [0.1528, 0.4782]], [[0.7587, 0.1509], [0.1509, 0.4751]], [[0.7439, 0.1606], [0.1606, 0.4739]], [[0.7185, 0.1337], [0.1337, 0.4859]], [[0.7301, 0.1371], [0.1371, 0.4668]], [[0.7421, 0.1396], [0.1396, 0.4615]], [[0.752, 0.1514], [0.1514, 0.4746]], [[0.7475, 0.147], [0.147, 0.4704]], [[0.7536, 0.1624], [0.1624, 0.4774]], [[0.7403, 0.1483], [0.1483, 0.4734]], [[0.7574, 0.1503], [0.1503, 0.4658]], [[0.7379, 0.152], [0.152, 0.473]], [[0.723, 0.1279], [0.1279, 0.4688]], [[0.7126, 0.1372], [0.1372, 0.4858]], [[0.7211, 0.1494], [0.1494, 0.4837]], [[0.7451, 0.1502], [0.1502, 0.4795]], [[0.7519, 0.1481], [0.1481, 0.4753]], [[0.7265, 0.1449], [0.1449, 0.4727]], [[0.746, 0.1557], [0.1557, 0.4749]], [[0.7451, 0.149], [0.149, 0.4775]], [[0.7426, 0.1523], [0.1523, 0.4836]], [[0.7536, 0.1488], [0.1488, 0.4784]], [[0.7365, 0.1451], [0.1451, 0.4859]], [[0.7498, 0.1359], [0.1359, 0.462]], [[0.7363, 0.1453], [0.1453, 0.4792]], [[0.7355, 0.1444], [0.1444, 0.4773]], [[0.7498, 0.1476], [0.1476, 0.4911]], [[0.7322, 0.1491], [0.1491, 0.4795]], [[0.7436, 0.144], [0.144, 0.473]], [[0.7402, 0.1401], [0.1401, 0.4951]], [[0.7528, 0.1547], [0.1547, 0.4856]], [[0.7634, 0.1484], [0.1484, 0.4684]], [[0.7396, 0.163], [0.163, 0.4959]], [[0.7471, 0.1461], [0.1461, 0.4712]], [[0.7309, 0.1318], [0.1318, 0.4782]], [[0.7343, 0.1467], [0.1467, 0.482]], [[0.7299, 0.1459], [0.1459, 0.484]], [[0.7637, 0.1374], [0.1374, 0.4741]], [[0.7454, 0.144], [0.144, 0.4804]], [[0.7661, 0.1539], [0.1539, 0.4717]], [[0.7138, 0.1418], [0.1418, 0.4818]], [[0.7537, 0.1612], [0.1612, 0.4823]], [[0.7395, 0.1545], [0.1545, 0.4847]], [[0.721, 0.147], [0.147, 0.4813]], [[0.764, 0.1491], [0.1491, 0.4759]], [[0.759, 0.1507], [0.1507, 0.4704]], [[0.7412, 0.1343], [0.1343, 0.4624]], [[0.721, 0.1423], [0.1423, 0.468]], [[0.7371, 0.1429], [0.1429, 0.4798]], [[0.749, 0.1537], [0.1537, 0.489]], [[0.7472, 0.1382], [0.1382, 0.4765]], [[0.7695, 0.1562], [0.1562, 0.4761]], [[0.7482, 0.1453], [0.1453, 0.4842]], [[0.7612, 0.1425], [0.1425, 0.4512]], [[0.7342, 0.1469], [0.1469, 0.4814]], [[0.7507, 0.1483], [0.1483, 0.471]], [[0.7338, 0.1379], [0.1379, 0.4772]], [[0.7555, 0.1546], [0.1546, 0.4596]], [[0.7356, 0.1412], [0.1412, 0.4923]], [[0.7408, 0.1417], [0.1417, 0.467]], [[0.7325, 0.1425], [0.1425, 0.475]], [[0.7482, 0.1399], [0.1399, 0.4639]], [[0.7381, 0.1342], [0.1342, 0.4765]], [[0.7496, 0.1583], [0.1583, 0.4805]], [[0.721, 0.1445], [0.1445, 0.4816]]]
        }
    };
});
define("view/histogram", ["require", "exports", "model/bins", "d3", "jquery"], function (require, exports, bins_2, d3, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGHistogram {
        constructor(name, svgElement, model, conf) {
            this.svg = svgElement;
            this.model = model;
            this.conf = conf;
            this.fixed = false;
            this.name = name;
            this.model.addListener(this);
            this.refresh();
        }
        refresh() {
            if (this.fixed) {
                return;
            }
            let pad = this.conf.padding;
            let svgWidth = $(this.svg).width();
            let svgHeight = $(this.svg).height();
            let viewBoxSideLength = Math.min(svgWidth, svgHeight) - 2 * pad;
            let xOffset = (svgWidth - viewBoxSideLength) / 2;
            let yOffset = (svgHeight - viewBoxSideLength) / 2;
            let scale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxSideLength]);
            let s = scale.invert(viewBoxSideLength / this.model.numBins());
            this.s = s;
            this.pad = pad;
            this.width = svgWidth;
            this.height = svgHeight;
            this.viewBoxSideLength = viewBoxSideLength;
            this.xOffset = xOffset;
            this.yOffset = yOffset;
            let colors = this.conf.colors[this.name];
            if (colors == undefined) {
                colors = this.conf.colors["default"];
            }
            function absX(relX) {
                return xOffset + scale(relX);
            }
            function invAbsX(absX) {
                return scale.invert(absX - xOffset - document.getElementById(this.svg).getBoundingClientRect().left);
            }
            function absY(relY) {
                return svgHeight - yOffset - scale(relY);
            }
            d3.select(this.svg)
                .selectAll(".bottomBorder")
                .attr("x", absX(0))
                .attr("y", absY(0))
                .attr("height", scale(0.5))
                .attr("width", viewBoxSideLength)
                .attr("fill", this.conf.colors["border"][0])
                .attr("rx", 0.2 * s);
            var allItems = [].concat(...this.model.bins());
            d3.select(this.svg)
                .selectAll("." + this.name)
                .remove();
            d3.select(this.svg)
                .selectAll("rect ." + this.name)
                .data(allItems)
                .enter()
                .append("rect")
                .attr("class", this.name)
                .attr("width", scale(s * 0.85))
                .attr("height", scale(s * 0.85))
                .attr("x", (d) => absX(d.x * s + s * 0.075))
                .attr("y", (d) => absY((d.y + 1) * s - s * 0.075))
                .attr("fill", (d) => colors[d.x % colors.length]);
        }
        fix() {
            this.fixed = true;
        }
        unfix() {
            this.fixed = false;
        }
    }
    exports.SVGHistogram = SVGHistogram;
    class SVGInteractiveHistogram extends SVGHistogram {
        constructor(name, svgElement, model, conf) {
            super(name, svgElement, model, conf);
            this.model.addListener(this);
            this.refresh();
            d3.select(this.svg)
                .append("text")
                .text("*")
                .attr("class", "colHighlight")
                .attr("text-anchor", "middle")
                .attr("dominant-baseline", "middle");
        }
        refresh() {
            super.refresh();
            let scale = d3.scaleLinear().domain([0, 100]).range([0, this.viewBoxSideLength]);
            let xOffset = this.xOffset;
            let yOffset = this.yOffset;
            let svgHeight = this.height;
            let id = this.svg;
            function absX(relX) {
                return xOffset + scale(relX);
            }
            function invAbsX(absX) {
                return scale.invert(absX - xOffset - $(id).position().left);
            }
            function absY(relY) {
                return svgHeight - yOffset - scale(relY);
            }
            d3.select(this.svg)
                .on("click", () => this.selectCol(Math.floor(invAbsX(d3.event.x) / this.s)));
            if (this.model.selectedBin() != -1) {
                let binHeight = this.model.getBin(this.model.selectedBin()).length;
                d3.select(this.svg)
                    .selectAll(".colHighlight")
                    .attr("x", (d) => absX(this.s * this.model.selectedBin() + 0.5 * this.s))
                    .attr("y", (d) => absY(this.s * binHeight))
                    .attr("style", "font-size: " + scale(this.s) + "px;");
            }
        }
        selectCol(bin) {
            this.model.selectBin(bin);
        }
        incrSelectedBin() {
            if (this.model.selectedBin() != -1) {
                let curItems = this.model.getBin(this.model.selectedBin()).length;
                if ((curItems + 1) * this.s < 100) {
                    this.model.addItem(this.model.selectedBin());
                }
            }
        }
        decrSelectedBin() {
            if (this.model.selectedBin() != -1) {
                let curItems = this.model.getBin(this.model.selectedBin()).length;
                if (curItems > 1) {
                    this.model.removeItem(this.model.selectedBin());
                }
            }
        }
    }
    exports.SVGInteractiveHistogram = SVGInteractiveHistogram;
    class SVGPhantomHistogram extends SVGHistogram {
        constructor(name, svgElement, model, phantom, conf) {
            super(name, svgElement, model, conf);
            this.model.addListener(this);
            this.phantom = phantom;
            this.phantom.addListener(this);
            this.refresh();
        }
        refresh() {
            let scale = d3.scaleLinear().domain([0, 100]).range([0, this.viewBoxSideLength]);
            let xOffset = this.xOffset;
            let yOffset = this.yOffset;
            let svgHeight = this.height;
            function absX(relX) {
                return xOffset + scale(relX);
            }
            function invAbsX(absX) {
                return scale.invert(absX - xOffset);
            }
            function absY(relY) {
                return svgHeight - yOffset - scale(relY);
            }
            if (this.phantom != undefined) {
                let pdata = this.phantom.bins().map((bin) => bin[bin.length - 1]);
                let mdata = this.model.bins().map((bin) => bin[bin.length - 1]);
                mdata = mdata.map((v, k) => (v == undefined) ? new bins_2.BinItem(k, -1, "") : v);
                d3.select(this.svg)
                    .selectAll(".phantomIndicator")
                    .remove();
                d3.select(this.svg)
                    .selectAll(".phantomIndicatorCover")
                    .remove();
                d3.select(this.svg)
                    .selectAll(".phantomIndicatorLine")
                    .remove();
                d3.select(this.svg)
                    .selectAll("rect .phantomIndicator")
                    .data(pdata)
                    .enter()
                    .append("rect")
                    .attr("x", (d) => absX(d.x * this.s + this.s * 0.025))
                    .attr("y", (d) => absY((d.y + 1) * this.s - this.s * 0.025))
                    .attr("width", (d) => scale(this.s * 0.95))
                    .attr("height", (d) => scale(this.s * 0.95 * 0.25))
                    .attr("fill", "#AAAAAA")
                    .attr("class", "phantomIndicator");
                d3.select(this.svg)
                    .selectAll("rect .phantomIndicatorCover")
                    .data(pdata)
                    .enter()
                    .append("rect")
                    .attr("x", (d) => absX(d.x * this.s + this.s * 0.075))
                    .attr("y", (d) => absY((d.y + 1) * this.s - this.s * 0.075))
                    .attr("width", (d) => scale(this.s * 0.85))
                    .attr("height", (d) => scale(this.s * 0.85))
                    .attr("fill", "#FFFFFF")
                    .attr("class", "phantomIndicator");
                let overModelIdxs = Array.from({ length: pdata.length }, (v, k) => k).filter((v, k) => pdata[k].y > mdata[k].y);
                d3.select(this.svg)
                    .selectAll("line .phantomIndicatorLine")
                    .data(overModelIdxs)
                    .enter()
                    .append("line")
                    .attr("x1", (d) => absX(this.s * pdata[d].x + this.s / 2))
                    .attr("x2", (d) => absX(this.s * pdata[d].x + this.s / 2))
                    .attr("y1", (d) => absY(this.s * (mdata[d].y + 1) - 0.075 * this.s))
                    .attr("y2", (d) => absY(this.s * (pdata[d].y + 1) - 0.075 * this.s))
                    .attr("stroke", "#DDDDDD")
                    .attr("class", "phantomIndicatorLine");
            }
            super.refresh();
        }
    }
    exports.SVGPhantomHistogram = SVGPhantomHistogram;
});
define("model/trees", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class TreeNode {
        static fullTree(d) {
            if (d <= 1) {
                return new TreeLeaf();
            }
            else {
                return new TreeNode(this.fullTree(d - 1), this.fullTree(d - 1));
            }
        }
        static huffTree(binModel, requiredDepth) {
            let bins = binModel.bins();
            let total = bins.reduce((prev, cur) => prev + cur.length, 0);
            let binFreqs = bins.map((k) => k.length / total);
            let binNodes = Array.from({ length: bins.length }, (v, k) => {
                let tl = new TreeLeaf();
                tl.itemType = String(k);
                return tl;
            });
            let binSortKeys = Array.from({ length: bins.length }, (v, k) => [0, k]);
            let sort = function () {
                let idxs = Array.from({ length: binFreqs.length }, (v, k) => k);
                idxs.sort((a, b) => {
                    return (binFreqs[b] - binFreqs[a] != 0) ? (binFreqs[b] - binFreqs[a]) : (b - a);
                });
                let newBinFreqs = Array.from({ length: binFreqs.length }, (v, k) => binFreqs[idxs[k]]);
                let newBinNodes = Array.from({ length: binNodes.length }, (v, k) => binNodes[idxs[k]]);
                let newBinSortKeys = Array.from({ length: binSortKeys.length }, (v, k) => binSortKeys[idxs[k]]);
                binFreqs = newBinFreqs;
                binNodes = newBinNodes;
                binSortKeys = newBinSortKeys;
            };
            while (binFreqs.length > 1) {
                sort();
                binFreqs.push(binFreqs.pop() + binFreqs.pop());
                let a = binNodes.pop();
                let ak = binSortKeys.pop();
                let b = binNodes.pop();
                let bk = binSortKeys.pop();
                if (ak[0] < bk[0]) {
                    let lk = [ak[0] + 1, ak[1]];
                    binNodes.push(new TreeNode(b, a));
                    binSortKeys.push(lk);
                }
                else if (ak[0] > bk[0]) {
                    let lk = [bk[0] + 1, bk[1]];
                    binNodes.push(new TreeNode(a, b));
                    binSortKeys.push(lk);
                }
                else {
                    if (ak[1] > bk[1]) {
                        let lk = [ak[0] + 1, ak[1]];
                        binNodes.push(new TreeNode(b, a));
                        binSortKeys.push(lk);
                    }
                    else {
                        let lk = [bk[0] + 1, bk[1]];
                        binNodes.push(new TreeNode(a, b));
                        binSortKeys.push(lk);
                    }
                }
            }
            let huffTree = binNodes[0];
            let depth = huffTree.depth();
            if (requiredDepth != undefined) {
                depth = Math.max(depth, requiredDepth);
            }
            let balance = (layerIdx, nodeIdx, node) => {
                if (node.left().itemType && depth - (layerIdx + 1) > 1) {
                    let target = TreeNode.fullTree(depth - (layerIdx + 1));
                    let type = "c" + node.left().itemType;
                    target.treeMap((l, k, n) => { n.itemType = type; }, (l, k, n) => { n.itemType = type; });
                    target.itemType = node.left().itemType;
                    node.leftChild = target;
                }
                if (node.right().itemType && depth - (layerIdx + 1) > 1) {
                    let target = TreeNode.fullTree(depth - (layerIdx + 1));
                    let type = "c" + node.right().itemType;
                    target.treeMap((l, k, n) => { n.itemType = type; }, (l, k, n) => { n.itemType = type; });
                    target.itemType = node.right().itemType;
                    node.rightChild = target;
                }
            };
            huffTree.treeMap(balance, x => x);
            return huffTree;
        }
        constructor(leftChild, rightChild) {
            this.leftChild = leftChild;
            this.rightChild = rightChild;
            this.updateState();
        }
        addListener(listener) {
            this.listeners.push(listener);
        }
        refresh() {
            this.listeners.forEach((listener) => listener.refresh());
        }
        numLeaves() {
            return this.leafs;
        }
        depth() {
            return this.d;
        }
        layer(n) {
            if (n == 0) {
                return [this];
            }
            else {
                return this.leftChild.layer(n - 1).concat(this.rightChild.layer(n - 1));
            }
        }
        left() {
            return this.leftChild;
        }
        right() {
            return this.rightChild;
        }
        updateState() {
            this.leafs = this.leftChild.numLeaves() + this.rightChild.numLeaves();
            this.d = 1 + Math.max(this.leftChild.depth(), this.rightChild.depth());
        }
        _treeMap(layerIdx, nodeIdx, nodeFn, leafFn) {
            this.leftChild._treeMap(layerIdx + 1, 2 * nodeIdx, nodeFn, leafFn);
            this.rightChild._treeMap(layerIdx + 1, 2 * nodeIdx + 1, nodeFn, leafFn);
            nodeFn(layerIdx, nodeIdx, this);
            this.updateState();
        }
        treeMap(nodeFn, leafFn) {
            this._treeMap(0, 0, nodeFn, leafFn);
        }
    }
    exports.TreeNode = TreeNode;
    class TreeLeaf {
        addListener(listener) {
            this.listeners.push(listener);
        }
        refresh() {
            this.listeners.forEach((listener) => listener.refresh());
        }
        numLeaves() {
            return 1;
        }
        depth() {
            return 1;
        }
        layer(n) {
            if (n == 0) {
                return [this];
            }
            else {
                return [];
            }
        }
        _treeMap(layerIdx, nodeIdx, nodeFn, leafFn) {
            leafFn(layerIdx, nodeIdx, this);
        }
        treeMap(nodeFn, leafFn) {
            this._treeMap(0, 0, nodeFn, leafFn);
        }
    }
    exports.TreeLeaf = TreeLeaf;
});
define("view/binarytree", ["require", "exports", "model/trees", "d3", "jquery"], function (require, exports, trees_1, d3, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGBinaryTree {
        constructor(svgElement, initialDepth, conf) {
            this.svg = svgElement;
            this.tree = trees_1.TreeNode.fullTree(initialDepth);
            this.conf = conf;
            this.nodeColor = () => "#000";
            this.leafColor = () => "#000";
        }
        colorMap(nodeColor, leafColor) {
            this.nodeColor = (layerIdx, nodeIdx, node) => {
                node.color = nodeColor(layerIdx, nodeIdx, node);
            };
            this.leafColor = (layerIdx, nodeIdx, leaf) => {
                leaf.color = leafColor(layerIdx, nodeIdx, leaf);
            };
            this.refresh();
        }
        setDepth(n) {
            this.tree = trees_1.TreeNode.fullTree(n);
            this.refresh();
        }
        setTree(tree) {
            this.tree = tree;
            this.refresh();
        }
        highlightNode(layerIdx, nodeIdx) {
            this.attnNode = [layerIdx, nodeIdx];
            this.refresh();
        }
        refresh() {
            let numLeafs = this.tree.numLeaves();
            let itemSize = 100 / (2 * numLeafs - 1);
            let svgWidth = $(this.svg).width();
            let svgHeight = $(this.svg).height();
            let pad = this.conf.padding + (svgWidth / (2 * numLeafs - 1)) / 2;
            let viewBoxWidth = svgWidth - 2 * pad;
            let viewBoxHeight = svgHeight - 2 * pad;
            let wScale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxWidth]);
            let hScale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxHeight]);
            this.numLeafs = numLeafs;
            this.nodeRadius = hScale(itemSize / 2);
            this.width = svgWidth;
            this.height = svgHeight;
            this.viewBoxWidth = viewBoxWidth;
            this.viewBoxHeight = viewBoxHeight;
            function absX(relX) {
                return pad + wScale(relX);
            }
            function absY(relY) {
                return pad + hScale(relY);
            }
            let d = this.tree.depth();
            this.tree.treeMap((layerIdx, nodeIdx, node) => {
                node.x = (node.left().x + node.right().x) / 2;
                node.y = 100 * (d - (layerIdx + 1)) / d;
            }, (layerIdx, nodeIdx, leaf) => {
                leaf.x = 2 * nodeIdx * itemSize;
                leaf.y = 0;
            });
            d3.select(this.svg)
                .selectAll("#treeItem")
                .remove();
            d3.select(this.svg)
                .selectAll("#treeEdge")
                .remove();
            function isChildFn(targetLayer, targetNode) {
                return (layerIdx, nodeIdx) => {
                    let diff = targetLayer - layerIdx;
                    return diff >= 0 && Math.floor(targetNode / (Math.pow(2, diff))) == nodeIdx;
                };
            }
            let childCheck = (this.attnNode != undefined) ? isChildFn(this.attnNode[0], this.attnNode[1]) : () => false;
            function addEdge(svg, parent, child, cLayer, cIndex) {
                let pLayer = cLayer - 1;
                let pIndex = Math.floor(cIndex / 2);
                let highlight = (childCheck(pLayer, pIndex) && childCheck(cLayer, cIndex));
                let color = highlight ? "#0074D9" : "gray";
                let width = highlight ? hScale(itemSize / 3) : hScale(itemSize / 5);
                d3.select(svg)
                    .append("line")
                    .attr("id", "treeEdge")
                    .attr("x1", (d) => absX(parent.x + itemSize / 2))
                    .attr("x2", (d) => absX(child.x + itemSize / 2))
                    .attr("y1", (d) => absY(parent.y + itemSize / 2))
                    .attr("y2", (d) => absY(child.y + itemSize / 2))
                    .attr("stroke-width", width)
                    .attr("stroke", color);
            }
            this.tree.treeMap(this.nodeColor, this.leafColor);
            this.tree.treeMap((layerIdx, nodeIdx, node) => {
                addEdge(this.svg, node, node.left(), layerIdx + 1, 2 * nodeIdx);
                addEdge(this.svg, node, node.right(), layerIdx + 1, 2 * nodeIdx + 1);
            }, (layerIdx, leaf) => { });
            this.tree._treeMap(0, 0, (layerIdx, nodeIdx, node) => {
                d3.select(this.svg)
                    .append("circle")
                    .data([node])
                    .attr("id", "treeItem")
                    .attr("r", wScale(itemSize / 2))
                    .attr("cx", (d) => absX(d.x + itemSize / 2))
                    .attr("cy", (d) => absY(d.y + itemSize / 2))
                    .attr("fill", (d) => d.color)
                    .attr("stroke", (d) => childCheck(layerIdx, nodeIdx) ? "#0074D9" : "#000")
                    .attr("stroke-width", (d) => childCheck(layerIdx, nodeIdx) ? 3 : 1);
            }, (layerIdx, nodeIdx, leaf) => {
                d3.select(this.svg)
                    .append("circle")
                    .data([leaf])
                    .attr("id", "treeItem")
                    .attr("r", wScale(itemSize / 2))
                    .attr("cx", (d) => absX(d.x + itemSize / 2))
                    .attr("cy", (d) => absY(d.y + itemSize / 2))
                    .attr("fill", (d) => d.color)
                    .attr("stroke", (d) => childCheck(layerIdx, nodeIdx) ? "#0074D9" : "#000")
                    .attr("stroke-width", childCheck(layerIdx, nodeIdx) ? 3 : 1);
            });
        }
    }
    exports.SVGBinaryTree = SVGBinaryTree;
});
define("view/entropy", ["require", "exports", "model/trees", "view/histogram", "view/binarytree", "d3", "jquery"], function (require, exports, trees_2, histogram_1, binarytree_1, d3, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGSoloEntropy {
        constructor(divElement, model, conf) {
            this.conf = conf;
            let defaultIDs = ["svgHist", "svgBar", "svgTree"];
            this.div = divElement;
            this.svgHist = divElement + " > #" + defaultIDs[0];
            this.svgBar = divElement + " > #" + defaultIDs[1];
            this.svgTree = divElement + " > #" + defaultIDs[2];
            let d = d3.select(divElement);
            d.append("svg").attr("id", defaultIDs[0]);
            d.append("br");
            d.append("svg").attr("id", defaultIDs[1]);
            d.append("br");
            d.append("svg").attr("id", defaultIDs[2]);
            this.model = model;
            this.tree = new binarytree_1.SVGBinaryTree(this.svgTree, 0, conf);
            this.hist = new histogram_1.SVGInteractiveHistogram("entHist", this.svgHist, this.model, conf);
            this.model.addListener(this);
        }
        refresh() {
            let svgHeight = $(this.div).height();
            let sideLens = [svgHeight * (7 / 16), svgHeight * (1 / 8), svgHeight * (7 / 16)];
            d3.select(this.svgHist).attr("height", sideLens[0]).attr("width", sideLens[0]);
            d3.select(this.svgBar).attr("height", sideLens[1]).attr("width", sideLens[0]);
            d3.select(this.svgTree).attr("height", sideLens[2]).attr("width", sideLens[2]);
            let selectedBin = this.model.selectedBin();
            if (selectedBin != -1 && this.model.getBin(selectedBin).length > 0) {
                d3.select(this.svgTree).attr("style", "display: initial");
                d3.select(this.svgBar).attr("style", "display: initial");
                let items = this.model.getBin(selectedBin).length;
                let total = this.model.bins()
                    .reduce((running, cur) => (running + cur.length), 0);
                let distinct = total / items;
                let depth = Math.ceil(Math.log2(distinct)) + 1;
                this.tree.setDepth(depth);
                this.tree.refresh();
                let colors = this.conf.colors[this.hist.name];
                if (colors == undefined) {
                    colors = this.conf.colors["default"];
                }
                function isChildFn(targetLayer, targetNode) {
                    return (layerIdx, nodeIdx) => {
                        let diff = targetLayer - layerIdx;
                        return diff >= 0 && Math.floor(targetNode / (Math.pow(2, diff))) == nodeIdx;
                    };
                }
                let unit = 100 / (Math.pow(2, (depth - 1)));
                let markerLocs = Array.from({ length: (Math.pow(2, (depth - 1))) }, (value, key) => key * unit);
                let pad = this.conf.padding;
                let viewBoxHeight = sideLens[1] - 2 * pad;
                let viewBoxWidth = sideLens[0] - 2 * pad;
                let hScale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxHeight]);
                let wScale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxWidth]);
                function absX(relX) {
                    return pad + wScale(relX);
                }
                function absY(relY) {
                    return pad + hScale(relY);
                }
                d3.select(this.svgBar)
                    .selectAll("rect, line")
                    .remove();
                d3.select(this.svgBar)
                    .selectAll("rect")
                    .data(markerLocs)
                    .enter()
                    .append("rect")
                    .attr("x", (d) => absX(d))
                    .attr("y", absY(0))
                    .attr("width", wScale(unit))
                    .attr("height", hScale(100))
                    .attr("fill", (d) => (d == 0 ? colors[selectedBin % colors.length] : "#FFF"))
                    .attr("stroke", "#000")
                    .attr("stroke-width", sideLens[1] / 40);
            }
            else {
                d3.select(this.svgTree).attr("style", "display: none;");
                d3.select(this.svgBar).attr("style", "display: none;");
            }
            this.hist.refresh();
        }
    }
    exports.SVGSoloEntropy = SVGSoloEntropy;
    class SVGEntropy {
        constructor(divElement, model, conf) {
            this.conf = conf;
            let defaultIDs = ["svgHist", "svgTree"];
            this.div = divElement;
            this.svgHist = divElement + " > #" + defaultIDs[0];
            this.svgTree = divElement + " > #" + defaultIDs[1];
            let d = d3.select(divElement);
            d.append("svg").attr("id", defaultIDs[0]);
            d.append("svg").attr("id", defaultIDs[1]);
            this.model = model;
            this.tree = new binarytree_1.SVGBinaryTree(this.svgTree, 0, conf);
            this.hist = new histogram_1.SVGHistogram("entHist", this.svgHist, this.model, conf);
            this.model.addListener(this);
        }
        refresh() {
            let svgHeight = $(this.div).height();
            let svgWidth = $(this.div).width();
            d3.select(this.svgHist).attr("height", svgHeight / 2).attr("width", svgWidth);
            d3.select(this.svgTree).attr("height", svgHeight / 2).attr("width", svgWidth);
            d3.select(this.svgTree).attr("style", "display: initial");
            let colors = this.conf.colors[this.hist.name];
            if (colors == undefined) {
                colors = this.conf.colors["default"];
            }
            let h = trees_2.TreeNode.huffTree(this.model, this.targetDepth);
            this.tree.setTree(h);
            let color = (layerIdx, nodeIdx, node) => {
                if (node.itemType) {
                    if (node.itemType[0] == "c") {
                        let c = d3.color(colors[Number.parseInt(node.itemType[1]) % colors.length]);
                        c.opacity = 0.3;
                        return c.toString();
                    }
                    else {
                        return colors[Number.parseInt(node.itemType) % colors.length];
                    }
                }
                else {
                    return "#000";
                }
            };
            this.tree.colorMap(color, color);
            this.hist.refresh();
        }
        requireDepth(n) {
            this.targetDepth = n;
            this.refresh();
        }
        unsetDepth() {
            delete this.targetDepth;
            this.refresh();
        }
    }
    exports.SVGEntropy = SVGEntropy;
    class SVGInteractiveEntropy extends SVGEntropy {
        constructor(divElement, model, conf) {
            super(divElement, model, conf);
            this.hist = new histogram_1.SVGInteractiveHistogram("entHist", this.svgHist, this.model, conf);
        }
    }
    exports.SVGInteractiveEntropy = SVGInteractiveEntropy;
    class SVGIndicatorEntropy extends SVGInteractiveEntropy {
        constructor(divElement, model, conf) {
            super(divElement, model, conf);
            d3.select(this.svgTree)
                .append("line")
                .attr("id", "actualEntInd")
                .attr("x1", 0)
                .attr("x2", 0)
                .attr("y1", 0)
                .attr("y2", 0);
            d3.select(this.svgTree)
                .append("line")
                .attr("id", "realizedEntInd")
                .attr("x1", 0)
                .attr("x2", 0)
                .attr("y1", 0)
                .attr("y2", 0);
        }
        refresh() {
            super.refresh();
            if (this.model.selectedBin() != -1) {
                let treeModel = this.tree.tree;
                let binModel = this.model;
                let total = binModel.bins().reduce((p, c) => c.length + p, 0);
                let prob = binModel.bins().map(v => v.length / total);
                let binLayers = [];
                let treeFn = (layerIdx, nodeIdx, node) => {
                    if (node.itemType != undefined && node.itemType[0] != "c") {
                        binLayers.push([Number.parseInt(node.itemType), layerIdx]);
                    }
                };
                treeModel.treeMap(treeFn, treeFn);
                let actual = prob.reduce((p, c) => p + (c * Math.log2(1 / c)), 0);
                let realized = binLayers.reduce((p, c) => p + prob[c[0]] * c[1], 0);
                let pad = this.conf.padding + (this.tree.width / (2 * this.tree.numLeafs - 1)) / 2;
                let wScale = d3.scaleLinear().domain([0, 100]).range([0, this.tree.viewBoxWidth]);
                let hScale = d3.scaleLinear().domain([0, 100]).range([0, this.tree.viewBoxHeight]);
                let r = this.tree.nodeRadius;
                function absX(relX) {
                    return pad + wScale(relX);
                }
                function absY(relY) {
                    return pad + hScale(relY);
                }
                let d = treeModel.depth();
                d3.select("#actualEntInd")
                    .attr("x1", absX(0))
                    .attr("x2", absX(100))
                    .attr("y1", absY((100 / d) * (d - actual - 1)) + r)
                    .attr("y2", absY((100 / d) * (d - actual - 1)) + r)
                    .attr("stroke", "#AA2020")
                    .attr("stroke-width", "2px");
                d3.select("#realizedEntInd")
                    .attr("x1", absX(0))
                    .attr("x2", absX(100))
                    .attr("y1", absY((100 / d) * (d - realized - 1)) + r)
                    .attr("y2", absY((100 / d) * (d - realized - 1)) + r)
                    .attr("stroke", "#999")
                    .attr("stroke-width", "2px");
            }
        }
    }
    exports.SVGIndicatorEntropy = SVGIndicatorEntropy;
    class SVGInteractiveCrossEntropy {
        constructor(divElement, pModel, qModel, conf) {
            let defaultIDs = ["pEnt", "qEnt"];
            this.div = divElement;
            this.divSourceEnt = divElement + " > #" + defaultIDs[0];
            this.divTargetEnt = divElement + " > #" + defaultIDs[1];
            let d = d3.select(divElement);
            d.attr("class", "row");
            d.append("div").attr("id", defaultIDs[0]).attr("class", "col-6");
            d.append("div").attr("id", defaultIDs[1]).attr("class", "col-6");
            this.sourceModel = pModel;
            this.targetModel = qModel;
            this.conf = conf;
            this.sourceEnt = new SVGInteractiveEntropy(this.divSourceEnt, this.sourceModel, conf);
            this.targetEnt = new SVGEntropy(this.divTargetEnt, this.targetModel, conf);
            this.sourceModel.addListener(this);
            this.targetModel.addListener(this);
        }
        refresh() {
            let selectedBin = this.sourceModel.selectedBin();
            if (selectedBin != -1) {
                let findInTree = function (selectedBin, tree) {
                    let layerIdx = -1;
                    let nodeIdx = -1;
                    let d = 0;
                    while (d < tree.depth() && layerIdx == -1) {
                        let layer = tree.layer(d);
                        layer.forEach((v, i) => {
                            if (v.itemType == selectedBin + "") {
                                layerIdx = d;
                                nodeIdx = i;
                            }
                        });
                        d += 1;
                    }
                    return [layerIdx, nodeIdx];
                };
                let inSource = findInTree(selectedBin, this.sourceEnt.tree.tree);
                let inTarget = findInTree(selectedBin, this.targetEnt.tree.tree);
                if (inSource[0] == -1 || inTarget[0] == -1) {
                    this.sourceEnt.refresh();
                    this.targetEnt.refresh();
                    return;
                }
                this.sourceEnt.tree.highlightNode(inSource[0], inSource[1]);
                this.targetEnt.tree.highlightNode(inTarget[0], inTarget[1]);
            }
            let sourceTree = trees_2.TreeNode.huffTree(this.sourceEnt.model);
            let targetTree = trees_2.TreeNode.huffTree(this.targetEnt.model);
            let d = Math.max(sourceTree.depth(), targetTree.depth());
            this.sourceEnt.requireDepth(d);
            this.targetEnt.requireDepth(d);
            this.sourceEnt.refresh();
            this.targetEnt.refresh();
        }
    }
    exports.SVGInteractiveCrossEntropy = SVGInteractiveCrossEntropy;
});
define("view/heatmap", ["require", "exports", "d3"], function (require, exports, d3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGHeatmap {
        constructor(svgElement, model, conf) {
            this.svg = svgElement;
            this.model = model;
            this.conf = conf;
            this.model.addListener(this);
        }
        refresh() {
            let pad = this.conf.padding;
            let svgWidth = $(this.svg).width();
            let svgHeight = $(this.svg).height();
            let viewBoxSideLength = Math.min(svgWidth, svgHeight) - 2 * pad;
            let xOffset = (svgWidth - viewBoxSideLength) / 2;
            let yOffset = (svgHeight - viewBoxSideLength) / 2;
            let scale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxSideLength]);
            let s = scale.invert(viewBoxSideLength / this.model.sideLength());
            this.pad = pad;
            this.width = svgWidth;
            this.height = svgHeight;
            this.viewBoxSideLength = viewBoxSideLength;
            this.xOffset = xOffset;
            this.yOffset = yOffset;
            function absR(relR) {
                return yOffset + scale(relR);
            }
            function absC(relC) {
                return xOffset + scale(relC);
            }
            let allCells = [].concat(...this.model.rows());
            let max = allCells.reduce((prev, cur) => Math.max(prev, cur.quantity), -Infinity);
            let selectedCol = this.model.selectedCol();
            d3.select(this.svg)
                .selectAll("rect")
                .remove();
            d3.select(this.svg)
                .selectAll("rect")
                .data(allCells)
                .enter()
                .append("rect")
                .attr("x", (d) => absC(d.c * s + 0.075 * s))
                .attr("y", (d) => absR(d.r * s + 0.075 * s))
                .attr("width", (d) => scale(s * 0.85))
                .attr("height", (d) => scale(s * 0.85))
                .attr("fill", (d) => d3.interpolateBlues(0.1 + 0.9 * (d.quantity / max)))
                .attr("stroke", (d) => selectedCol != -1 && d.c == selectedCol ? "#222" : "none");
        }
    }
    exports.SVGHeatmap = SVGHeatmap;
});
define("view/transport", ["require", "exports", "view/histogram", "view/heatmap", "model/heatmap", "d3"], function (require, exports, histogram_2, heatmap_1, heatmap_2, d3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGTransport {
        constructor(divElement, model, conf) {
            this.conf = conf;
            this.div = divElement;
            let defaultIds = ["svgRowHist", "svgColHist"];
            this.svgRowHist = this.div + " > #" + defaultIds[0];
            this.svgColHist = this.div + " > #" + defaultIds[1];
            this.svgColOverlay = this.div + " > #" + defaultIds[1];
            let d = d3.select(this.div);
            d.append("svg").attr("id", defaultIds[0]);
            d.append("svg").attr("id", defaultIds[1]);
            this.model = model;
            this.rslice = new heatmap_2.UnnormalizedMatrixSlice(this.model, heatmap_2.Slice.ROWS);
            this.cslice = new heatmap_2.UnnormalizedMatrixSlice(this.model, heatmap_2.Slice.COLS);
            this.colslices = Array.from({ length: this.model.sideLength() }, (v, k) => new heatmap_2.UnnormalizedMatrixSlice(this.model, heatmap_2.Slice.COL, k));
            this.rowHist = new histogram_2.SVGInteractiveHistogram("rowHist", this.svgRowHist, this.rslice, this.conf);
            this.colHist = new histogram_2.SVGHistogram("colHist", this.svgColHist, this.cslice, this.conf);
            this.model.addListener(this);
        }
        refresh() {
            let svgHeight = $(this.div).height();
            let svgWidth = $(this.div).width();
            let sideLength = Math.min((1 / 2) * svgWidth, svgHeight);
            d3.select(this.svgRowHist).attr("width", sideLength).attr("height", sideLength);
            d3.select(this.svgColHist).attr("width", sideLength).attr("height", sideLength);
            this.rowHist.refresh();
            this.colHist.refresh();
            if (this.model.selectedCol() != -1) {
                let slice = this.colslices[this.model.selectedCol()];
                this.colOverlay = new histogram_2.SVGHistogram("colOverlay", this.svgColOverlay, slice, this.conf);
                this.colOverlay.refresh();
            }
        }
    }
    exports.SVGTransport = SVGTransport;
    class SVGTransportMatrix extends SVGTransport {
        constructor(divElement, model, conf) {
            super(divElement, model, conf);
            let defaultId = "svgHeatmap";
            this.svgHeatMap = this.div + " > #" + defaultId;
            d3.select(this.div)
                .insert("br", this.svgColHist);
            d3.select(this.div)
                .insert("svg", this.svgColHist)
                .attr("id", defaultId);
            d3.select(this.svgColHist)
                .attr("style", "transform: rotate(90deg)");
            this.heatmap = new heatmap_1.SVGHeatmap(this.svgHeatMap, this.model, this.conf);
        }
        refresh() {
            let svgHeight = $(this.div).height();
            let svgWidth = $(this.div).width();
            let boxHeight = Math.min(svgHeight / 2, svgWidth / 2);
            d3.select(this.svgRowHist).attr("width", boxHeight).attr("height", boxHeight);
            d3.select(this.svgHeatMap).attr("width", boxHeight).attr("height", boxHeight);
            d3.select(this.svgColHist).attr("width", boxHeight).attr("height", boxHeight);
            this.rowHist.refresh();
            this.colHist.refresh();
            this.heatmap.refresh();
            if (this.model.selectedCol() != -1) {
                let slice = this.colslices[this.model.selectedCol()];
                this.colOverlay = new histogram_2.SVGHistogram("colOverlay", this.svgColOverlay, slice, this.conf);
                this.colOverlay.refresh();
            }
        }
    }
    exports.SVGTransportMatrix = SVGTransportMatrix;
    class SVGIndicatorTransport extends SVGTransport {
        constructor(divElement, model, conf) {
            super(divElement, model, conf);
            let defaultId = "arrowBar";
            this.svgArrowBar = this.div + " > #" + defaultId;
            d3.select(this.div)
                .append("svg")
                .attr("id", defaultId);
            let defs = d3.select(this.svgArrowBar).append("defs");
            defs.append("marker")
                .attr("id", "arrow")
                .attr("viewBox", "0 -5, 10, 10")
                .attr("refX", 5)
                .attr("refY", 0)
                .attr("markerWidth", 4)
                .attr("markerHeight", 4)
                .attr("orient", "auto")
                .append("path")
                .attr("d", "M0,-5L10,0L0,5");
        }
        refresh() {
            super.refresh();
            let svgWidth = $(this.div).width();
            let svgHeight = $(this.div).height();
            let height = svgHeight / 5;
            d3.select(this.svgArrowBar)
                .attr("width", svgWidth)
                .attr("height", height);
            if (this.rslice.selectedBin() != -1) {
                d3.select(this.svgArrowBar)
                    .selectAll(".arrowIndicator")
                    .remove();
                let width = this.colHist.viewBoxSideLength;
                let colxOffset = this.colHist.xOffset;
                let rowxOffset = this.rowHist.xOffset;
                let s = this.colHist.s;
                let pad = this.conf.padding;
                let arrowBar = this.svgArrowBar;
                let arrow = function (sBin, eBin) {
                    let wScale = d3.scaleLinear().domain([0, 100]).range([0, width]);
                    let start = colxOffset + wScale(s * sBin + 0.5 * s);
                    let end = width + 2 * pad + rowxOffset + wScale(s * eBin + 0.5 * s);
                    let p = `M${start},0  L ${start},20 L ${end},20 L ${end},5`;
                    d3.select(arrowBar)
                        .append("path")
                        .attr("d", p)
                        .attr("class", "arrowIndicator")
                        .attr("stroke", "#000")
                        .attr("stroke-width", 2)
                        .attr("fill", "none")
                        .attr("marker-end", "url(#arrow)");
                };
                let sBin = this.rslice.selectedBin();
                let slice = this.colslices[sBin];
                slice.bins().forEach((i) => i.length > 0 ? arrow(sBin, i[0].x) : "");
            }
        }
    }
    exports.SVGIndicatorTransport = SVGIndicatorTransport;
});
define("model/gaussian", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Gaussian2D {
        constructor(mean, cov) {
            this.listeners = [];
            this.assign(mean, cov);
        }
        refresh() {
            this.listeners.forEach((l) => l.refresh());
        }
        addListener(listener) {
            this.listeners.push(listener);
        }
        assign(mean, cov) {
            if (mean.length != 2) {
                throw RangeError("Mean must be a length 2 array");
            }
            if (cov.length != 2 || cov[0].length != 2 || cov[1].length != 2) {
                throw RangeError("Covariance must be a 2x2 array");
            }
            this.mean = mean;
            this.cov = cov;
            let tr = cov[0][0] + cov[1][1];
            let det = (cov[0][0] * cov[1][1]) - (cov[0][1] * cov[1][0]);
            let e1 = (tr + Math.sqrt((tr * tr) - 4 * det)) / 2;
            let e2 = (tr - Math.sqrt((tr * tr) - 4 * det)) / 2;
            let v1 = [0, 0];
            let v2 = [0, 0];
            if (cov[0][1] == 0 && cov[1][0] == 0) {
                v1 = [1, 0];
                v2 = [0, 1];
            }
            else if (cov[0][1] == 0) {
                v1 = [e1 - cov[1][1], cov[1][0]];
                v2 = [e2 - cov[1][1], cov[1][0]];
            }
            else {
                v1 = [cov[0][1], e1 - cov[0][0]];
                v2 = [cov[0][1], e2 - cov[0][0]];
            }
            let v1_mag = Math.sqrt((v1[0] * v1[0] + v1[1] * v1[1]));
            let v2_mag = Math.sqrt((v2[0] * v2[0] + v2[1] * v2[1]));
            v1 = [v1[0] / v1_mag, v1[1] / v1_mag];
            v2 = [v2[0] / v2_mag, v2[1] / v2_mag];
            if (e2 > e1) {
                this.eigvals = [e2, e1];
                this.eigvecs = [v2, v1];
            }
            else {
                this.eigvals = [e1, e2];
                this.eigvecs = [v1, v2];
            }
            this.refresh();
        }
        eigenVectors() {
            return Array.from(this.eigvecs);
        }
        eigenValues() {
            return Array.from(this.eigvals);
        }
        meanVal() {
            return Array.from(this.mean);
        }
        covMatrix() {
            return Array.from(this.cov);
        }
    }
    exports.Gaussian2D = Gaussian2D;
});
define("view/gaussian", ["require", "exports", "model/gaussian", "d3", "jquery"], function (require, exports, gaussian_1, d3, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGGaussian2D {
        constructor(name, svgElement, gaussian, bounds, conf) {
            this.name = name;
            this.svg = svgElement;
            this.gaussian = gaussian;
            this.conf = conf;
            this.bounds = bounds;
            gaussian.addListener(this);
            d3.select(this.svg)
                .append("text")
                .attr("id", "thetaLog");
        }
        refresh() {
            let pad = this.conf.padding;
            let svgWidth = $(this.svg).width();
            let svgHeight = $(this.svg).height();
            let viewBoxSideLength = Math.min(svgWidth, svgHeight) - 2 * pad;
            let xOffset = (svgWidth - viewBoxSideLength) / 2;
            let yOffset = (svgHeight - viewBoxSideLength) / 2;
            let wScale = d3.scaleLinear().domain([this.bounds[0][0], this.bounds[0][1]]).range([0, viewBoxSideLength]);
            let hScale = d3.scaleLinear().domain([this.bounds[1][0], this.bounds[1][1]]).range([0, viewBoxSideLength]);
            this.pad = pad;
            this.width = svgWidth;
            this.height = svgHeight;
            this.viewBoxSideLength = viewBoxSideLength;
            this.xOffset = xOffset;
            this.yOffset = yOffset;
            let gaussScale = 32;
            let colors = this.conf.colors[this.name];
            if (colors == undefined) {
                colors = this.conf.colors["default"];
            }
            function absX(relX) {
                return xOffset + wScale(relX);
            }
            function absY(relY) {
                return svgHeight - yOffset - hScale(relY);
            }
            let pcomponents = this.gaussian.eigenVectors();
            let mean = this.gaussian.meanVal();
            let v1 = pcomponents[0];
            let v2 = pcomponents[1];
            let pscales = this.gaussian.eigenValues();
            let rx = pscales[0];
            let ry = pscales[1];
            let angle = ((v1[0] == 0) ? Math.PI : -Math.atan(v1[1] / v1[0]));
            d3.select("#thetaLog")
                .text(180 * angle / Math.PI);
            let data = Array.from({ length: colors.length }, (v, k) => {
                k = colors.length - k - 1;
                return {
                    "cx": absX(mean[0]),
                    "cy": absY(mean[1]),
                    "rx": (rx * gaussScale * k),
                    "ry": (ry * gaussScale * k),
                    "theta": angle,
                    "color": colors[k],
                };
            });
            d3.select(this.svg)
                .selectAll("." + this.name)
                .remove();
            d3.select(this.svg)
                .selectAll(".levelCurve ." + this.name)
                .data(data)
                .enter()
                .append("ellipse")
                .attr("rx", (d) => d.rx)
                .attr("ry", (d) => d.ry)
                .attr("cx", (d) => d.cx)
                .attr("cy", (d) => d.cy)
                .attr("transform", (d) => "rotate(" + Math.floor(180 * d.theta / Math.PI) + " " + d.cx + " " + d.cy + ")")
                .attr("fill", (d) => d.color)
                .attr("class", "levelCurve " + this.name);
        }
        assign(mean, cov) {
            this.gaussian.assign(mean, cov);
        }
    }
    exports.SVGGaussian2D = SVGGaussian2D;
    class SVGAnimatedGaussian extends SVGGaussian2D {
        constructor(name, svgElement, fps, means, covs, bounds, conf) {
            super(name, svgElement, new gaussian_1.Gaussian2D(means[0], covs[0]), bounds, conf);
            this.means = means;
            this.covs = covs;
            this.fps = fps;
            this.frame = 0;
        }
        play() {
            let i = 0;
            this.timerId = setInterval(() => {
                if (this.frame >= this.means.length) {
                    this.pause();
                    this.reset();
                    return;
                }
                this.assign(this.means[this.frame], this.covs[this.frame]);
                this.frame++;
            }, 1000 / this.fps);
        }
        pause() {
            clearInterval(this.timerId);
            delete this.timerId;
        }
        reset() {
            this.frame = 0;
            this.assign(this.means[this.frame], this.covs[this.frame]);
        }
    }
    exports.SVGAnimatedGaussian = SVGAnimatedGaussian;
});
define("article", ["require", "exports", "d3", "jquery", "model/bins", "model/heatmap", "view/textbinder", "data", "view/histogram", "view/entropy", "view/transport", "view/gaussian", "model/model"], function (require, exports, d3, $, bins_3, heatmap_3, textbinder_1, data_1, histogram_3, entropy_1, transport_1, gaussian_2, model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    let colors = {
        "border": ["#505050",],
        "default": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
        "rowHist": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
        "colHist": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
        "colOverlay": ["#000"]
    };
    let attnHash = {};
    let attn = undefined;
    const conf = new model_1.CONF(8, colors, 5);
    function main() {
        setupIntro();
    }
    exports.main = main;
    function setAttn(id) {
        attn = attnHash[id];
    }
    function registerAttn(id, m) {
        attnHash[id] = m;
        $(id).click(() => setAttn(id));
    }
    function userInput(dir) {
        if (attn) {
            attn(dir);
        }
    }
    function setupIntro() {
        document.addEventListener("keydown", event => {
            switch (event.key.toLowerCase()) {
                case ("h"):
                case ("a"):
                case ("arrowleft"):
                    userInput("left");
                    break;
                case ("l"):
                case ("d"):
                case ("arrowright"):
                    userInput("right");
                    break;
                case ("k"):
                case ("w"):
                case ("arrowup"):
                    userInput("up");
                    break;
                case ("j"):
                case ("s"):
                case ("arrowdown"):
                    userInput("down");
                    break;
            }
        });
        $("h1").on("swiperight", () => { alert("foo"); userInput("right"); });
        $(".container").on("swipeleft", () => { alert("foo2"); userInput("left"); });
        $(".container").on("swipeup", () => userInput("up"));
        $(".container").on("swipedown", () => userInput("down"));
        let cNames = [".maroon", ".red", ".orange", ".yellow", ".lime", ".green", ".blue", ".violet"];
        let colors = Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7));
        cNames.forEach((sel, i) => {
            d3.selectAll(".box" + sel)
                .append("rect")
                .attr("fill", colors[i])
                .attr("width", "100%")
                .attr("height", "100%");
        });
        let mLeft1 = bins_3.Histogram.fromArray(data_1.chisqr1["leftHistBins"]);
        let mRight1 = bins_3.Histogram.fromArray(data_1.chisqr1["rightHistBins"]);
        let hLeft1 = new histogram_3.SVGPhantomHistogram("chisqr-hist-1-left", "#chisqr-1-left-svg", mLeft1, mRight1, conf);
        let hRight1 = new histogram_3.SVGPhantomHistogram("chisqr-hist-1-right", "#chisqr-1-right-svg", mRight1, mLeft1, conf);
        hLeft1.refresh();
        hRight1.refresh();
        let chisqrval = new textbinder_1.LooseTextBinder("#chisqr-1-val", [mLeft1, mRight1], function (m) {
            let test = (a, b) => { return Math.pow((a - b), 2) / b; };
            let c = Array.from({ length: m[0].numBins() }, (v, k) => test(m[0].getBin(k).length, m[1].getBin(k).length))
                .reduce((prev, cur) => prev + cur, 0);
            return "" + Math.round(c * 100) / 100;
        });
        mLeft1.addListener(chisqrval);
        let mLeft2 = bins_3.Histogram.fromArray(data_1.chisqr2["leftHistBins"]);
        let mCenter2 = bins_3.Histogram.fromArray(data_1.chisqr2["centerHistBins"]);
        let mRight2 = bins_3.Histogram.fromArray(data_1.chisqr2["rightHistBins"]);
        let hLeft2 = new histogram_3.SVGPhantomHistogram("chisqr-hist-2-left", "#chisqr-2-left-svg", mLeft2, mCenter2, conf);
        let hCenter2 = new histogram_3.SVGHistogram("chisqr-hist-2-center", "#chisqr-2-center-svg", mCenter2, conf);
        let hRight2 = new histogram_3.SVGPhantomHistogram("chisqr-hist-2-right", "#chisqr-2-right-svg", mRight2, mCenter2, conf);
        hLeft2.refresh();
        hCenter2.refresh();
        hRight2.refresh();
        let chisqrvalL = new textbinder_1.LooseTextBinder("#chisqr-2-left-val", [mLeft2, mCenter2], function (m) {
            let test = (a, b) => { return Math.pow((a - b), 2) / b; };
            let c = Array.from({ length: m[0].numBins() }, (v, k) => test(m[0].getBin(k).length, m[1].getBin(k).length))
                .reduce((prev, cur) => prev + cur, 0);
            return "" + Math.round(c * 100) / 100;
        });
        let chisqrvalR = new textbinder_1.LooseTextBinder("#chisqr-2-right-val", [mRight2, mCenter2], function (m) {
            let test = (a, b) => { return Math.pow((a - b), 2) / b; };
            let c = Array.from({ length: m[0].numBins() }, (v, k) => test(m[0].getBin(k).length, m[1].getBin(k).length))
                .reduce((prev, cur) => prev + cur, 0);
            return "" + Math.round(c * 100) / 100;
        });
        mLeft2.addListener(chisqrvalL);
        mRight2.addListener(chisqrvalR);
        let mSimpleHist = bins_3.Histogram.fromArray(data_1.simpleHist["hist"]);
        let hSimpleHist = new histogram_3.SVGHistogram("simple-entropy-ex", "#simple-entropy-ex", mSimpleHist, conf);
        let mLowEnt = bins_3.Histogram.fromArray(data_1.entropyExs["lowEntropy"]);
        let mMedEnt = bins_3.Histogram.fromArray(data_1.entropyExs["medEntropy"]);
        let mHighEnt = bins_3.Histogram.fromArray(data_1.entropyExs["highEntropy"]);
        let hLowEnt = new histogram_3.SVGHistogram("entropy-ex", "#entropy-ex-active", mLowEnt, conf);
        let hMedEnt = new histogram_3.SVGHistogram("entropy-ex", "#entropy-ex-active", mMedEnt, conf);
        let hHighEnt = new histogram_3.SVGHistogram("entropy-ex", "#entropy-ex-active", mHighEnt, conf);
        let tLowEnt = new textbinder_1.TextBinder("#entropy-ex-val", mLowEnt, function (m) {
            let total = m.bins().reduce((p, c) => c.length + p, 0);
            let nats = (a) => Math.log2(total / a);
            let entropy = m.bins().reduce((p, c) => (c.length / total) * nats(c.length) + p, 0);
            return "" + Math.round(entropy * 100) / 100;
        });
        tLowEnt.refresh();
        let tMedEnt = new textbinder_1.TextBinder("#entropy-ex-val", mMedEnt, function (m) {
            let total = m.bins().reduce((p, c) => c.length + p, 0);
            let nats = (a) => Math.log2(total / a);
            let entropy = m.bins().reduce((p, c) => (c.length / total) * nats(c.length) + p, 0);
            return "" + Math.round(entropy * 100) / 100;
        });
        tMedEnt.refresh();
        let tHighEnt = new textbinder_1.TextBinder("#entropy-ex-val", mHighEnt, function (m) {
            let total = m.bins().reduce((p, c) => c.length + p, 0);
            let nats = (a) => Math.log2(total / a);
            let entropy = m.bins().reduce((p, c) => (c.length / total) * nats(c.length) + p, 0);
            return "" + Math.round(entropy * 100) / 100;
        });
        tHighEnt.refresh();
        let mActiveEnt = mMedEnt;
        $("#entropy-ex-low").click(() => { mActiveEnt = mLowEnt; mLowEnt.refresh(); });
        $("#entropy-ex-med").click(() => { mActiveEnt = mMedEnt; mMedEnt.refresh(); });
        $("#entropy-ex-high").click(() => { mActiveEnt = mHighEnt; mHighEnt.refresh(); });
        let mInteractiveEnt = bins_3.Histogram.full(8, 1);
        let interactiveEnt = new entropy_1.SVGInteractiveEntropy("#entropy-ex-interactive", mInteractiveEnt, conf);
        interactiveEnt.refresh();
        let interactiveEntHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    interactiveEnt.hist.selectCol(mInteractiveEnt.selectedBin() - 1);
                    break;
                case ("right"):
                    interactiveEnt.hist.selectCol(mInteractiveEnt.selectedBin() + 1);
                    break;
                case ("up"):
                    interactiveEnt.hist.incrSelectedBin();
                    break;
                case ("down"):
                    interactiveEnt.hist.decrSelectedBin();
                    break;
            }
        };
        registerAttn("#entropy-interactive", interactiveEntHandler);
        let qModel = bins_3.Histogram.fromArray(data_1.xEntropyExs["q"]);
        let pModel = bins_3.Histogram.full(8, 1);
        let interactiveXEnt = new entropy_1.SVGInteractiveCrossEntropy("#xentropy-ex-interactive", pModel, qModel, conf);
        interactiveXEnt.refresh();
        let relEnt = new textbinder_1.LooseTextBinder("#kl-ex-val", [pModel, qModel], function (m) {
            let p = m[0];
            let q = m[1];
            let totalP = p.bins().reduce((prev, c) => c.length + prev, 0);
            let totalQ = q.bins().reduce((prev, c) => c.length + prev, 0);
            let natsP = (a) => Math.log2(totalP / a);
            let natsQ = (a) => Math.log2(totalQ / a);
            let kl = p.bins().reduce((prev, c, i) => (c.length / totalP) * (natsQ(q.getBin(i).length) - natsP(c.length)) + prev, 0);
            return "" + Math.round(kl * 100) / 100;
        });
        relEnt.refresh();
        let interactiveXEntHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    interactiveXEnt.sourceEnt.hist.selectCol(pModel.selectedBin() - 1);
                    relEnt.refresh();
                    break;
                case ("right"):
                    interactiveXEnt.sourceEnt.hist.selectCol(pModel.selectedBin() + 1);
                    relEnt.refresh();
                    break;
                case ("up"):
                    interactiveXEnt.sourceEnt.hist.incrSelectedBin();
                    relEnt.refresh();
                    break;
                case ("down"):
                    interactiveXEnt.sourceEnt.hist.decrSelectedBin();
                    relEnt.refresh();
                    break;
            }
        };
        registerAttn("#xentropy-interactive", interactiveXEntHandler);
        let transportMatrix = heatmap_3.HeatMap.fromCSVStr(data_1.transportEx["matrix"]);
        let interactiveTransport = new transport_1.SVGIndicatorTransport("#transport-ex-interactive", transportMatrix, conf);
        interactiveTransport.refresh();
        let interactiveTransportHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    interactiveTransport.rowHist.selectCol(transportMatrix.selectedCol() - 1);
                    break;
                case ("right"):
                    interactiveTransport.rowHist.selectCol(transportMatrix.selectedCol() + 1);
            }
        };
        registerAttn("#transport-interactive", interactiveTransportHandler);
        let intTransportMatrix = heatmap_3.HeatMap.fromCSVStr(data_1.transportEx["matrix"]);
        let interactiveTransportMatrix = new transport_1.SVGTransportMatrix("#transport-matrix-ex-interactive", intTransportMatrix, conf);
        interactiveTransportMatrix.refresh();
        let interactiveTransportMatrixHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    interactiveTransportMatrix.rowHist.selectCol(intTransportMatrix.selectedCol() - 1);
                    break;
                case ("right"):
                    interactiveTransportMatrix.rowHist.selectCol(intTransportMatrix.selectedCol() + 1);
            }
        };
        registerAttn("#transport-matrix-interactive", interactiveTransportMatrixHandler);
        let optTransportMatrix = heatmap_3.HeatMap.fromCSVStr(data_1.transportEx["opt_matrix"]);
        let optInterativeTransportMatrix = new transport_1.SVGTransportMatrix("#opt-transport-matrix-ex-interactive", optTransportMatrix, conf);
        optInterativeTransportMatrix.refresh();
        let optInteractiveTransportMatrixHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    optInterativeTransportMatrix.rowHist.selectCol(optTransportMatrix.selectedCol() - 1);
                    break;
                case ("right"):
                    optInterativeTransportMatrix.rowHist.selectCol(optTransportMatrix.selectedCol() + 1);
            }
        };
        registerAttn("#opt-transport-matrix-interactive", optInteractiveTransportMatrixHandler);
        let wEMean = data_1.optimizers["wganEasy"]["mean"];
        let wECov = data_1.optimizers["wganEasy"]["cov"];
        let svgWEAnim = new gaussian_2.SVGAnimatedGaussian("wgan-easy", "#wgan-easy-optim-ex", 15, wEMean, wECov, [[-1, 5], [-1, 5]], conf);
        let gEMean = data_1.optimizers["ganEasy"]["mean"];
        let gECov = data_1.optimizers["ganEasy"]["cov"];
        let svgGEAnim = new gaussian_2.SVGAnimatedGaussian("gan-easy", "#gan-easy-optim-ex", 15, gEMean, gECov, [[-1, 5], [-1, 5]], conf);
        $("#gan-comp-easy-play").click(() => { svgWEAnim.play(); svgGEAnim.play(); });
        $("#gan-comp-easy-pause").click(() => { svgWEAnim.pause(); svgGEAnim.pause(); });
        $("#gan-comp-easy-reset").click(() => { svgWEAnim.reset(); svgGEAnim.reset(); });
    }
    main();
});
define("main", ["require", "exports", "view/binarytree", "view/histogram", "view/entropy", "view/transport", "view/heatmap", "model/bins", "model/heatmap", "d3", "model/model", "view/gaussian", "data"], function (require, exports, tree, hist, ent, transport, hm, histModel, matModel, d3, model, gaussian_3, data_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function main() {
        let colors = {
            "border": ["#505050",],
            "default": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
            "rowHist": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
            "colHist": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
            "colOverlay": ["#000"]
        };
        let conf = new model.CONF(8, colors, 5);
        let m = new histModel.Histogram(8);
        let vt = new tree.SVGBinaryTree("#treesvg", 4, conf);
        vt.setDepth(6);
        let i = 0;
        setInterval(() => { vt.setDepth((i++ % 6) + 1); }, 500);
        m.setAll(1);
        let v = new hist.SVGInteractiveHistogram("v", "#svg", m, conf);
        let both = new ent.SVGEntropy("#plain-entropy0", m, conf);
        window.addEventListener("resize", () => { m.refresh(); });
        let mat = matModel.HeatMap.fromCSVStr('0,0,0,0,0,0,0,0\n0,2,0,0,0,0,0,1\n0,0,3,0,0,6,2,3\n0,1,0,0,0,0,0,0\n2,0,5,0,0,0,0,1\n2,7,6,1,0,1,0,0\n0,8,4,0,1,2,0,0\n1,3,0,1,1,0,2,1');
        let svgHm = new hm.SVGHeatmap("#hmsvg", mat, conf);
        svgHm.refresh();
        let matSlice = new matModel.MatrixSlice(mat, matModel.Slice.ROWS);
        let svgMatSlice = new hist.SVGInteractiveHistogram("matSlice", "#hmslicesvg", matSlice, conf);
        svgMatSlice.refresh();
        let svgTransportMatrix = new transport.SVGTransportMatrix("#plain-transport0", mat, conf);
        svgTransportMatrix.refresh();
        let svgTransport = new transport.SVGIndicatorTransport("#plain-transport1", mat, conf);
        svgTransport.refresh();
        document.addEventListener("keydown", event => {
            switch (event.key.toLowerCase()) {
                case ("h"):
                    v.selectCol(m.selectedBin() - 1);
                    break;
                case ("l"):
                    v.selectCol(m.selectedBin() + 1);
                    break;
                case ("k"):
                    v.incrSelectedBin();
                    break;
                case ("j"):
                    v.decrSelectedBin();
                    break;
            }
        });
        document.addEventListener("keydown", event => {
            switch (event.key.toLowerCase()) {
                case ("h"):
                    svgMatSlice.selectCol(matSlice.selectedBin() - 1);
                    break;
                case ("l"):
                    svgMatSlice.selectCol(matSlice.selectedBin() + 1);
                    break;
                case ("k"):
                    break;
                case ("j"):
                    break;
            }
        });
        let phantom = new histModel.Histogram(8);
        phantom.setAll(2);
        let phanthist = new hist.SVGPhantomHistogram("phist", "#phantomhist", m, phantom, conf);
        phanthist.refresh();
        let mean = data_2.optimizers["wganEasy"]["mean"];
        let cov = data_2.optimizers["wganEasy"]["cov"];
        let svgGAnim = new gaussian_3.SVGAnimatedGaussian("gssn", "#gaussian", 20, mean, cov, [[-1, 5], [-1, 5]], conf);
        svgGAnim.play();
    }
    exports.main = main;
    main();
});
//# sourceMappingURL=bundle.js.map