define("model/model", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class CONF {
        constructor(gridBoxSize, colors, padding) {
            this.gridBoxSize = gridBoxSize;
            this.colors = colors;
            this.padding = padding;
        }
    }
    exports.CONF = CONF;
});
define("model/bins", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class BinItem {
        constructor(x, y, itemType) {
            this.populate(x, y, itemType);
        }
        populate(x, y, itemType) {
            this.x = x;
            this.y = y;
            this.itemType = itemType;
        }
    }
    exports.BinItem = BinItem;
    class Histogram {
        constructor(numBins) {
            this.itemType = "default";
            this.histBins = Array.from({ length: numBins }, () => new Array());
            this.listeners = new Array();
            this.selection = -1;
        }
        static fromArray(arr) {
            let hist = new Histogram(arr.length);
            arr.forEach((numItems, index) => { for (let i = 0; i < numItems; i++) {
                hist.addItem(index);
            } });
            return hist;
        }
        static full(length, n) {
            let hist = new Histogram(length);
            hist.setAll(n);
            return hist;
        }
        setAll(count) {
            for (let i = 0; i < this.histBins.length; i++) {
                while (this.histBins[i].length > count) {
                    this.removeItem(i);
                }
                while (this.histBins[i].length < count) {
                    this.addItem(i);
                }
            }
        }
        addItem(bin) {
            this.histBins[bin].push(new BinItem(bin, this.histBins[bin].length, this.itemType));
            this.refresh();
        }
        removeItem(bin) {
            this.histBins[bin].pop();
            this.refresh();
        }
        addBin() {
            this.histBins.push(new Array());
            this.refresh();
        }
        removeBin() {
            this.histBins.pop();
            if (this.selection == this.histBins.length) {
                this.selection = -1;
            }
            this.refresh();
        }
        bins() {
            return Array.from({ length: this.histBins.length }, (v, k) => this.getBin(k));
        }
        getBin(bin) {
            var binArr = this.histBins[bin];
            return Array.from(binArr);
        }
        refresh() {
            this.listeners.forEach((listener) => listener.refresh());
        }
        addListener(listener) {
            this.listeners.push(listener);
        }
        numBins() {
            return this.histBins.length;
        }
        selectBin(selection) {
            if (selection >= 0 && selection < this.histBins.length) {
                this.selection = selection;
                this.refresh();
            }
        }
        selectedBin() {
            return this.selection;
        }
    }
    exports.Histogram = Histogram;
});
define("model/heatmap", ["require", "exports", "model/bins", "papaparse"], function (require, exports, bins_1, papaparse_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Cell {
        constructor(r, c, color, quantity) {
            this.r = r;
            this.c = c;
            this.color = color;
            this.quantity = quantity;
        }
    }
    exports.Cell = Cell;
    var Slice;
    (function (Slice) {
        Slice[Slice["ROWS"] = 0] = "ROWS";
        Slice[Slice["COLS"] = 1] = "COLS";
        Slice[Slice["ROW"] = 2] = "ROW";
        Slice[Slice["COL"] = 3] = "COL";
    })(Slice = exports.Slice || (exports.Slice = {}));
    class MatrixSlice {
        constructor(matrix, mode, index) {
            this.matrix = matrix;
            this.mode = mode;
            if (mode == Slice.ROW || mode == Slice.COL) {
                if (index == undefined) {
                    throw Error("Must provide an index to do a row slice.");
                }
                this.index = index;
            }
            else {
                this.index = -1;
            }
            let toDraw = [];
            let numItems = 25;
            let rows = this.matrix.rows();
            let quantityPerRow = rows.map((cells) => cells.reduce((prev, cur) => cur.quantity + prev, 0));
            let rowsTotal = quantityPerRow.reduce((prev, cur) => cur + prev, 0);
            let cols = this.matrix.cols();
            let quantityPerCol = cols.map((cells) => cells.reduce((prev, cur) => cur.quantity + prev, 0));
            let colsTotal = quantityPerCol.reduce((prev, cur) => cur + prev, 0);
            switch (this.mode) {
                case Slice.ROW:
                    let row = this.matrix.getRow(this.index);
                    if (rowsTotal == 0) {
                        toDraw = row.map((c) => 0);
                    }
                    else {
                        toDraw = row.map((c) => Math.floor(numItems * c.quantity / rowsTotal));
                    }
                    break;
                case Slice.COL:
                    let col = this.matrix.getCol(this.index);
                    if (colsTotal == 0) {
                        toDraw = col.map((c) => 0);
                    }
                    else {
                        toDraw = col.map((c) => Math.floor(numItems * c.quantity / colsTotal));
                    }
                    break;
                case Slice.COLS:
                    if (rowsTotal == 0) {
                        toDraw = rows.map((c) => 0);
                    }
                    else {
                        toDraw = quantityPerRow.map((c) => Math.floor(numItems * c / rowsTotal));
                    }
                    break;
                case Slice.ROWS:
                    if (colsTotal == 0) {
                        toDraw = cols.map((c) => 0);
                    }
                    else {
                        toDraw = quantityPerCol.map((c) => Math.floor(numItems * c / colsTotal));
                    }
                    break;
            }
            this.histogram = bins_1.Histogram.fromArray(toDraw);
        }
        addListener(listener) {
            this.matrix.addListener(listener);
        }
        refresh() {
            this.matrix.refresh();
        }
        addItem(bin) {
            throw Error("Cannot add an item to a matrix slice.");
        }
        removeItem(bin) {
            throw Error("Cannot remove an item from a matrix slice.");
        }
        addBin() {
            throw Error("Cannot add a bin to a matrix slice.");
        }
        removeBin() {
            throw Error("Cannot remove a bin from a matrix slice.");
        }
        bins() {
            return this.histogram.bins();
        }
        getBin(bin) {
            return this.histogram.getBin(bin);
        }
        numBins() {
            return this.histogram.numBins();
        }
        selectBin(selection) {
            this.matrix.selectCol(selection);
            this.histogram.refresh();
            this.matrix.refresh();
        }
        selectedBin() {
            return this.matrix.selectedCol();
        }
    }
    exports.MatrixSlice = MatrixSlice;
    class HeatMap {
        constructor(sideLength) {
            this.mat = Array.from({ length: sideLength }, (v, r) => (Array.from({ length: sideLength }, (v, c) => new Cell(r, c, "#000", 1))));
            this.listeners = new Array();
            this.selection = -1;
        }
        static fromCSVStr(csv) {
            let dataStr = papaparse_1.parse(csv).data;
            let data = dataStr.map((r) => r.map((val) => Number.parseFloat(val)));
            data.forEach((row) => { if (row.length != data.length) {
                throw Error("The input data must be a square matrix");
            } });
            let hm = new HeatMap(data.length);
            data.forEach((row, rIdx) => {
                row.forEach((quantity, cIdx) => hm.setCell(rIdx, cIdx, quantity));
            });
            return hm;
        }
        rowHist() {
            return new MatrixSlice(this, Slice.ROWS);
        }
        colHist() {
            return new MatrixSlice(this, Slice.COLS);
        }
        rowSliceHist(row) {
            return new MatrixSlice(this, Slice.ROW, row);
        }
        refresh() {
            this.listeners.forEach((listener) => listener.refresh());
        }
        addListener(listener) {
            this.listeners.push(listener);
        }
        setCell(row, col, quantity) {
            if (row >= 0 && row < this.mat.length && col >= 0 && col < this.mat.length) {
                this.mat[row][col].quantity = quantity;
            }
        }
        getCell(row, col) {
            return this.mat[row][col];
        }
        getRow(row) {
            return this.mat[row].map((cell) => new Cell(0, cell.c, cell.color, cell.quantity));
        }
        rows() {
            return Array.from(this.mat);
        }
        getCol(col) {
            return this.mat.map((row) => new Cell(row[col].r, 0, row[col].color, row[col].quantity));
        }
        cols() {
            return Array.from({ length: this.mat.length }, (v, k) => this.getCol(k));
        }
        selectCol(col) {
            if (col >= 0 && col < this.mat.length) {
                this.selection = col;
                this.refresh();
            }
        }
        selectedCol() {
            return this.selection;
        }
        sideLength() {
            return this.mat.length;
        }
    }
    exports.HeatMap = HeatMap;
    class UnnormalizedMatrixSlice extends MatrixSlice {
        constructor(matrix, mode, index) {
            super(matrix, mode, index);
            let toDraw = [];
            let rows = this.matrix.rows();
            let quantityPerRow = rows.map((cells) => cells.reduce((prev, cur) => cur.quantity + prev, 0));
            let cols = this.matrix.cols();
            let quantityPerCol = cols.map((cells) => cells.reduce((prev, cur) => cur.quantity + prev, 0));
            switch (this.mode) {
                case Slice.ROW:
                    toDraw = this.matrix.getRow(this.index).map(c => c.quantity);
                    break;
                case Slice.COL:
                    toDraw = this.matrix.getCol(this.index).map(c => c.quantity);
                    break;
                case Slice.COLS:
                    toDraw = quantityPerRow;
                    break;
                case Slice.ROWS:
                    toDraw = quantityPerCol;
                    break;
            }
            this.histogram = bins_1.Histogram.fromArray(toDraw);
        }
    }
    exports.UnnormalizedMatrixSlice = UnnormalizedMatrixSlice;
});
define("view/textbinder", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class LooseTextBinder {
        constructor(textElement, model, updateRule) {
            this.textElement = textElement;
            this.model = model;
            this.updateRule = updateRule;
        }
        refresh() {
            $(this.textElement).text(this.updateRule(this.model));
        }
    }
    exports.LooseTextBinder = LooseTextBinder;
    class TextBinder extends LooseTextBinder {
        constructor(textElement, model, updateRule) {
            super(textElement, model, updateRule);
            model.addListener(this);
        }
    }
    exports.TextBinder = TextBinder;
});
define("data", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chisqr1 = {
        "leftHistBins": [1, 2, 4, 6, 3, 4, 1, 1],
        "rightHistBins": [1, 2, 3, 5, 4, 6, 2, 1]
    };
    exports.simpleHist = {
        "hist": [7, 0, 0, 0, 0, 0, 4, 0]
    };
    exports.chisqr2 = {
        "leftHistBins": [2, 2, 3, 2, 4, 5, 8, 0],
        "centerHistBins": [2, 2, 3, 2, 4, 5, 8, 8],
        "rightHistBins": [2, 2, 2, 2, 3, 3, 3, 3]
    };
    exports.entropyExs = {
        "highEntropy": [3, 4, 3, 3, 3, 4, 3, 3],
        "medEntropy": [1, 2, 4, 7, 7, 4, 2, 1],
        "lowEntropy": [1, 7, 1, 1, 1, 1, 1, 1]
    };
    exports.xEntropyExs = {
        "q": [2, 7, 4, 2, 5, 1, 3, 2]
    };
    exports.transportEx = {
        "matrix": "0,0,0,1,1,0,0,0\n1,0,0,0,2,0,0,0\n0,0,1,1,0,0,0,0\n0,0,0,0,2,0,0,0\n0,2,1,0,0,0,1,0\n0,3,2,0,0,0,0,1\n1,2,0,0,0,1,2,1\n0,0,1,0,0,0,0,0",
        "opt_matrix": "2,0,0,0,0,0,0,0\n0,3,0,0,0,0,0,0\n0,0,2,0,0,0,0,0\n0,2,0,0,0,0,0,0\n0,2,0,0,2,0,0,0\n0,0,3,0,3,0,0,0\n0,0,0,2,0,1,3,1\n0,0,0,0,0,0,0,1"
    };
    exports.optimizers = {
        "wganEasy": {
            "mean": [[-0.01, 0.11], [0.0, 0.15], [0.02, 0.19], [0.03, 0.23], [0.05, 0.27], [0.07, 0.31], [0.09, 0.34], [0.11, 0.38], [0.13, 0.42], [0.16, 0.47], [0.18, 0.51], [0.2, 0.54], [0.23, 0.59], [0.26, 0.64], [0.28, 0.67], [0.31, 0.72], [0.33, 0.76], [0.35, 0.81], [0.38, 0.86], [0.4, 0.9], [0.44, 0.97], [0.46, 0.99], [0.49, 1.04], [0.52, 1.09], [0.54, 1.13], [0.58, 1.18], [0.61, 1.24], [0.64, 1.3], [0.67, 1.34], [0.69, 1.38], [0.73, 1.45], [0.76, 1.48], [0.81, 1.56], [0.84, 1.61], [0.88, 1.68], [0.9, 1.7], [0.94, 1.79], [0.97, 1.83], [1.0, 1.87], [1.05, 1.95], [1.07, 1.98], [1.11, 2.04], [1.14, 2.1], [1.18, 2.14], [1.2, 2.17], [1.24, 2.24], [1.26, 2.27], [1.28, 2.3], [1.31, 2.35], [1.33, 2.38], [1.35, 2.41], [1.36, 2.42], [1.36, 2.44], [1.39, 2.48], [1.4, 2.49], [1.42, 2.52], [1.44, 2.56], [1.45, 2.58], [1.46, 2.6], [1.47, 2.61], [1.47, 2.61], [1.49, 2.64], [1.48, 2.63], [1.48, 2.63], [1.49, 2.65], [1.52, 2.7], [1.5, 2.67], [1.51, 2.69], [1.52, 2.7], [1.51, 2.67], [1.53, 2.73], [1.51, 2.69], [1.5, 2.68], [1.51, 2.68], [1.52, 2.71], [1.51, 2.69], [1.51, 2.69], [1.51, 2.7], [1.51, 2.7], [1.51, 2.71], [1.49, 2.66], [1.49, 2.67], [1.5, 2.7], [1.49, 2.69], [1.49, 2.67], [1.47, 2.66], [1.48, 2.66], [1.46, 2.64], [1.47, 2.65], [1.44, 2.62], [1.44, 2.62], [1.44, 2.63], [1.43, 2.62], [1.42, 2.59], [1.41, 2.58], [1.39, 2.56], [1.39, 2.56], [1.36, 2.52], [1.36, 2.52], [1.33, 2.47], [1.33, 2.48], [1.3, 2.43], [1.3, 2.43], [1.27, 2.4], [1.25, 2.37], [1.23, 2.34], [1.19, 2.28], [1.18, 2.26], [1.16, 2.24], [1.14, 2.21], [1.12, 2.19], [1.1, 2.16], [1.08, 2.11], [1.05, 2.08], [1.05, 2.08], [1.02, 2.03], [1.0, 1.99], [0.99, 1.97], [0.98, 1.95], [0.97, 1.92], [0.96, 1.9], [0.95, 1.9], [0.94, 1.86], [0.94, 1.85], [0.93, 1.83], [0.92, 1.82], [0.91, 1.77], [0.92, 1.77], [0.91, 1.75], [0.92, 1.76], [0.92, 1.73], [0.92, 1.74], [0.92, 1.73], [0.93, 1.73], [0.94, 1.74], [0.92, 1.7], [0.94, 1.7], [0.94, 1.69], [0.95, 1.71], [0.96, 1.7], [0.95, 1.68], [0.97, 1.7], [0.96, 1.68], [0.98, 1.69], [0.98, 1.69], [0.97, 1.67], [1.0, 1.69], [1.0, 1.7], [1.03, 1.72], [1.03, 1.7], [1.04, 1.71], [1.06, 1.74], [1.07, 1.74], [1.08, 1.76], [1.11, 1.79], [1.12, 1.8], [1.14, 1.83], [1.16, 1.85], [1.18, 1.87], [1.2, 1.92], [1.19, 1.92], [1.2, 1.95], [1.23, 1.99], [1.22, 1.98], [1.24, 2.04], [1.24, 2.06], [1.24, 2.09], [1.23, 2.1], [1.25, 2.15], [1.23, 2.15], [1.22, 2.16], [1.22, 2.19], [1.22, 2.21], [1.21, 2.22], [1.19, 2.22], [1.2, 2.25], [1.19, 2.26], [1.17, 2.23], [1.17, 2.27], [1.15, 2.25], [1.13, 2.26], [1.12, 2.24], [1.11, 2.26], [1.1, 2.26], [1.08, 2.23], [1.06, 2.21], [1.03, 2.19], [1.01, 2.16], [1.02, 2.17], [0.98, 2.12], [0.98, 2.13], [0.96, 2.11], [0.95, 2.09], [0.93, 2.03], [0.93, 2.04], [0.92, 2.0], [0.91, 1.96], [0.92, 1.98], [0.93, 1.95], [0.93, 1.93], [0.94, 1.93], [0.94, 1.92], [0.96, 1.93], [0.96, 1.89], [0.97, 1.87], [0.99, 1.88], [1.01, 1.89], [1.02, 1.86], [1.02, 1.87], [1.04, 1.86], [1.05, 1.86], [1.07, 1.85], [1.11, 1.9], [1.13, 1.91], [1.16, 1.94], [1.17, 1.94], [1.2, 1.96], [1.21, 1.96], [1.25, 2.03], [1.24, 2.0], [1.27, 2.05], [1.29, 2.07], [1.29, 2.09], [1.3, 2.11], [1.33, 2.16], [1.31, 2.15], [1.31, 2.16], [1.31, 2.17], [1.31, 2.19], [1.28, 2.19], [1.26, 2.18], [1.25, 2.19], [1.22, 2.17], [1.2, 2.17], [1.18, 2.18], [1.15, 2.13], [1.11, 2.09], [1.07, 2.04], [1.05, 2.05], [1.02, 2.0], [1.01, 2.01], [0.98, 1.97], [0.96, 1.94], [0.97, 1.95], [0.94, 1.93], [0.94, 1.91], [0.93, 1.9], [0.94, 1.91], [0.93, 1.9], [0.93, 1.9], [0.96, 1.93], [0.96, 1.9], [0.96, 1.89], [0.98, 1.92], [1.01, 1.94], [1.03, 1.95], [1.05, 1.96], [1.08, 1.97], [1.11, 2.0], [1.13, 2.0], [1.17, 2.04], [1.17, 2.02], [1.18, 2.03], [1.21, 2.05], [1.22, 2.08], [1.23, 2.08], [1.25, 2.09], [1.24, 2.06], [1.26, 2.11], [1.25, 2.08], [1.25, 2.1], [1.22, 2.07], [1.22, 2.06], [1.19, 2.02], [1.17, 2.03], [1.14, 2.0], [1.11, 1.96], [1.1, 1.96], [1.07, 1.93], [1.03, 1.9], [1.02, 1.89], [0.99, 1.87], [0.99, 1.88], [0.96, 1.86], [0.95, 1.86], [0.92, 1.84], [0.93, 1.86], [0.94, 1.88], [0.94, 1.9], [0.95, 1.93], [0.96, 1.96], [0.97, 1.95], [1.0, 2.02], [1.02, 2.05], [1.05, 2.08], [1.07, 2.09], [1.1, 2.13], [1.12, 2.14], [1.16, 2.17], [1.18, 2.18], [1.19, 2.18], [1.21, 2.17], [1.22, 2.16], [1.23, 2.16], [1.24, 2.14], [1.23, 2.1], [1.22, 2.07], [1.22, 2.05], [1.2, 2.02], [1.17, 1.95], [1.17, 1.93], [1.14, 1.9], [1.13, 1.87], [1.12, 1.86], [1.12, 1.84], [1.1, 1.84], [1.08, 1.83], [1.07, 1.82], [1.08, 1.82], [1.07, 1.84], [1.04, 1.82], [1.04, 1.84], [1.04, 1.87], [1.03, 1.88], [1.05, 1.92], [1.04, 1.93], [1.05, 1.97], [1.04, 1.97], [1.06, 2.03], [1.08, 2.06], [1.09, 2.08], [1.11, 2.13], [1.11, 2.15], [1.13, 2.18], [1.14, 2.18], [1.15, 2.17], [1.13, 2.15], [1.16, 2.19], [1.14, 2.16], [1.13, 2.14], [1.13, 2.13], [1.12, 2.1], [1.09, 2.03], [1.07, 2.0], [1.07, 2.0], [1.05, 1.95], [1.03, 1.9], [1.04, 1.9], [1.02, 1.88], [1.03, 1.87], [1.04, 1.87], [1.01, 1.84], [1.03, 1.86], [1.04, 1.85], [1.05, 1.84], [1.05, 1.88], [1.06, 1.86], [1.08, 1.88], [1.1, 1.91], [1.11, 1.92], [1.16, 1.96], [1.17, 1.99], [1.19, 2.02], [1.21, 2.05], [1.21, 2.06], [1.22, 2.09], [1.23, 2.1], [1.23, 2.15], [1.23, 2.14], [1.21, 2.14], [1.21, 2.16], [1.16, 2.11], [1.16, 2.12], [1.11, 2.08], [1.09, 2.06], [1.07, 2.06], [1.05, 2.03], [1.02, 1.99], [1.02, 1.99], [1.02, 1.99], [1.02, 1.98], [1.0, 1.94], [1.0, 1.93], [1.01, 1.94], [1.0, 1.94], [1.01, 1.93], [1.03, 1.94], [1.02, 1.93], [1.04, 1.94], [1.08, 1.99], [1.08, 1.98], [1.09, 2.0], [1.1, 2.01], [1.11, 2.01], [1.14, 2.03], [1.14, 2.02], [1.17, 2.03], [1.19, 2.04], [1.19, 2.08], [1.19, 2.05], [1.21, 2.07], [1.19, 2.05], [1.2, 2.05], [1.2, 2.05], [1.16, 2.01], [1.14, 1.98], [1.12, 1.97], [1.11, 1.95], [1.1, 1.94], [1.07, 1.93], [1.05, 1.9], [1.04, 1.91], [1.04, 1.93], [1.02, 1.94], [1.0, 1.9], [1.01, 1.93], [1.0, 1.95], [1.02, 1.97], [1.04, 1.99], [1.01, 1.98], [1.02, 2.0], [1.04, 2.0], [1.03, 2.01], [1.04, 1.99], [1.04, 2.01], [1.06, 2.02], [1.07, 2.03], [1.08, 2.05], [1.09, 2.07], [1.09, 2.06], [1.11, 2.08], [1.12, 2.09], [1.13, 2.1], [1.13, 2.07], [1.14, 2.07], [1.13, 2.06], [1.15, 2.04], [1.15, 2.02], [1.16, 2.0], [1.15, 1.99], [1.14, 1.97], [1.12, 1.94], [1.1, 1.9], [1.1, 1.89], [1.11, 1.9], [1.11, 1.87], [1.09, 1.89], [1.08, 1.87], [1.08, 1.9], [1.08, 1.89], [1.09, 1.9], [1.09, 1.94], [1.09, 1.95], [1.09, 1.96], [1.11, 2.0], [1.13, 2.05], [1.11, 2.06], [1.1, 2.05], [1.11, 2.07], [1.1, 2.07], [1.11, 2.11], [1.11, 2.11], [1.1, 2.1], [1.08, 2.09], [1.07, 2.1], [1.07, 2.09], [1.06, 2.07], [1.04, 2.04], [1.04, 2.04], [1.02, 1.98], [1.02, 1.98], [1.01, 1.95], [1.0, 1.93], [1.01, 1.93], [1.0, 1.89], [0.99, 1.87], [1.03, 1.91], [1.02, 1.89], [1.03, 1.91], [1.05, 1.93], [1.06, 1.94], [1.05, 1.93], [1.07, 1.98], [1.06, 1.97], [1.1, 2.0], [1.1, 2.04], [1.11, 2.04], [1.16, 2.09], [1.17, 2.1], [1.19, 2.11], [1.22, 2.13], [1.19, 2.1], [1.22, 2.11], [1.17, 2.08], [1.18, 2.06], [1.17, 2.04], [1.15, 2.02], [1.13, 1.98], [1.12, 1.97], [1.08, 1.93], [1.06, 1.93], [1.06, 1.95], [1.14, 1.97], [1.07, 1.92], [1.03, 1.99], [0.99, 1.89], [1.22, 1.89], [0.95, 1.98], [1.09, 1.87], [1.11, 2.02], [1.1, 2.04], [1.15, 1.98], [1.1, 2.07], [1.05, 2.01], [1.21, 1.91], [1.08, 2.03], [1.02, 1.97], [1.17, 1.93], [1.07, 2.07], [1.16, 2.11], [1.06, 2.03], [1.07, 1.98], [1.07, 1.96], [1.09, 1.93], [1.08, 1.87], [1.07, 1.88], [1.0, 1.95], [1.0, 1.89], [1.13, 1.86], [1.07, 1.91], [1.06, 2.05], [1.07, 2.03], [1.17, 1.93], [1.09, 1.93], [1.04, 1.98], [1.03, 1.99], [1.08, 1.96], [1.12, 1.93], [1.22, 2.03], [1.09, 2.12], [1.04, 2.13], [1.16, 2.09], [1.21, 2.06], [1.03, 2.06], [1.09, 1.96], [1.14, 1.92], [0.94, 1.95], [1.13, 1.92], [1.19, 2.05], [1.08, 2.12], [1.1, 1.96], [1.1, 1.88], [1.08, 1.97], [1.04, 1.95], [1.1, 2.02], [1.03, 1.97], [1.07, 1.96], [1.08, 2.05], [1.08, 2.07], [0.98, 1.88], [0.98, 1.91], [1.0, 1.92], [1.01, 1.87], [1.14, 1.88], [1.19, 1.97], [1.12, 2.04], [1.05, 2.05], [1.07, 2.03], [1.15, 1.95], [1.15, 1.97], [1.1, 2.06], [1.0, 2.14], [1.02, 2.02], [1.14, 1.84], [1.02, 1.97], [1.06, 2.04], [1.11, 2.01], [1.19, 1.96], [1.19, 1.98], [1.07, 2.13], [1.17, 2.07], [1.19, 2.05], [0.98, 1.99], [1.07, 1.97], [1.07, 1.92], [1.1, 1.9], [1.08, 1.92], [0.97, 1.87], [1.05, 1.87], [1.19, 1.9], [1.06, 1.94], [0.99, 1.92], [1.05, 1.93], [1.2, 1.94], [1.11, 1.93], [1.07, 1.88], [1.08, 1.92], [1.12, 1.93], [1.1, 1.91], [1.13, 2.04], [1.08, 1.98], [0.94, 1.85], [1.04, 1.96], [1.09, 2.03], [1.14, 2.08], [1.18, 2.05], [1.24, 2.05], [1.03, 1.96], [1.01, 1.99], [1.09, 2.05], [1.08, 1.98], [1.04, 1.97], [1.03, 2.08], [1.06, 2.03], [0.98, 1.9], [1.07, 1.95], [1.02, 2.01], [1.03, 2.04], [1.04, 1.94], [1.17, 2.02], [1.18, 1.94], [1.27, 2.03], [1.18, 2.1], [1.02, 2.04], [1.07, 1.96], [1.13, 2.0], [1.22, 2.09], [1.01, 1.99], [1.01, 1.96], [1.04, 1.92], [1.26, 2.03], [1.1, 2.07], [0.98, 2.06], [1.27, 2.02], [0.94, 2.05], [1.23, 1.96], [0.99, 1.9], [1.0, 1.92], [1.16, 1.96], [1.11, 1.94], [1.14, 2.04], [0.97, 1.98], [1.14, 2.05], [1.24, 2.06], [1.12, 2.0], [1.04, 1.98], [1.0, 1.99], [1.06, 1.95], [1.13, 2.0], [1.08, 2.02], [1.13, 2.02], [1.26, 2.11], [1.24, 2.03], [1.03, 1.99], [0.93, 1.93], [1.14, 1.99], [1.17, 1.98], [1.09, 2.0], [1.13, 2.03], [1.21, 2.0], [1.21, 2.05], [1.06, 1.96], [0.99, 2.04], [0.98, 1.98], [1.09, 2.02], [1.14, 2.0], [1.25, 2.03], [1.21, 2.09], [1.2, 2.02], [1.03, 2.0], [0.95, 1.98], [1.0, 1.97], [1.11, 1.9], [1.21, 1.94], [1.01, 1.96], [1.02, 1.99], [1.26, 2.07], [1.13, 1.98], [1.07, 1.96], [1.05, 1.95], [0.96, 1.89], [1.15, 1.92], [1.12, 1.91], [0.97, 1.95], [1.07, 2.01], [1.25, 2.08], [1.16, 2.1], [1.02, 2.02], [1.08, 1.9], [1.28, 1.99], [0.98, 2.03], [1.06, 2.01], [1.27, 2.05], [1.08, 1.99], [0.99, 2.06], [1.1, 2.0], [1.2, 2.03], [1.21, 2.01], [1.19, 2.04], [1.04, 2.05], [0.97, 1.99], [1.13, 1.99], [1.27, 2.12], [1.09, 2.02], [1.05, 1.97], [1.06, 1.99], [1.02, 1.95], [0.99, 1.95], [0.97, 1.95], [0.96, 1.99], [1.06, 2.08], [1.11, 2.03], [1.22, 2.07], [1.17, 2.08], [1.18, 2.08], [1.21, 2.1], [1.1, 2.01], [1.18, 2.05], [1.1, 1.92], [1.13, 1.95], [1.16, 2.0], [1.09, 2.15], [1.04, 2.04], [1.05, 2.03], [1.05, 2.03], [1.11, 2.12], [1.18, 2.14], [1.15, 2.14], [1.09, 2.14], [1.06, 2.11], [1.12, 2.08], [1.03, 1.98], [1.02, 1.89], [1.09, 1.94], [1.2, 1.94], [1.23, 1.94], [0.99, 1.98], [1.05, 2.06], [1.17, 2.06], [1.3, 2.07], [1.16, 2.07], [0.92, 1.96], [1.21, 2.07], [1.15, 2.06], [1.12, 2.05], [1.08, 1.95], [1.05, 1.92], [1.13, 1.96], [1.23, 2.12], [1.11, 2.05], [1.0, 1.96], [0.99, 1.87], [1.04, 1.85], [1.16, 1.94], [1.26, 2.03], [1.08, 1.94], [0.94, 1.85], [1.14, 2.1], [1.26, 2.13], [1.1, 2.04], [1.02, 1.88], [1.08, 1.93], [1.26, 2.18], [1.22, 2.01], [0.96, 2.0], [1.06, 1.81], [1.0, 2.08], [1.22, 1.96], [1.04, 2.14], [1.17, 1.9], [1.03, 2.02], [0.99, 1.92], [1.14, 1.9], [1.14, 2.21], [1.14, 1.89], [0.99, 2.01], [1.07, 1.99], [1.13, 1.86], [1.0, 2.07], [1.09, 1.98], [1.22, 1.96], [1.12, 2.2], [1.14, 1.99], [1.1, 1.9], [1.1, 2.06], [1.12, 2.15], [1.14, 2.04], [1.1, 1.92], [1.01, 1.93], [0.96, 1.93], [1.05, 1.91], [1.16, 2.0], [1.06, 2.01], [1.1, 2.05], [1.03, 2.02], [1.03, 2.01], [1.0, 2.02], [1.03, 2.0], [1.11, 2.01], [1.17, 1.99], [1.19, 1.92], [1.13, 2.01], [1.03, 2.07], [1.1, 2.1], [1.15, 2.01], [1.21, 2.02], [1.15, 2.0], [1.06, 2.01], [1.02, 2.09], [0.96, 1.99], [1.03, 1.86], [1.12, 1.86], [1.01, 1.91], [1.13, 2.09], [1.07, 2.07], [1.12, 2.09], [1.18, 1.98], [1.09, 1.88], [1.16, 2.04], [1.19, 2.11], [1.22, 2.12], [1.2, 2.12], [1.06, 2.09], [0.95, 2.0], [1.05, 2.01], [1.29, 2.14], [1.07, 2.02], [0.99, 2.03], [1.02, 2.0], [1.04, 1.96], [1.06, 1.99], [1.07, 1.98], [1.09, 1.95], [1.08, 1.96], [1.04, 1.97], [1.1, 2.0], [1.13, 2.05], [1.08, 2.08], [1.04, 1.94], [1.13, 1.92], [1.05, 1.88], [1.15, 1.93], [1.16, 1.98], [1.09, 2.05], [1.0, 2.07], [1.08, 2.06], [1.09, 2.02], [1.13, 2.08], [1.11, 1.97], [1.01, 1.82], [0.96, 1.89], [0.98, 2.12], [1.12, 1.83], [1.16, 2.25], [1.25, 1.96], [1.03, 2.04], [1.04, 1.94], [1.2, 1.92], [1.23, 2.25], [1.17, 2.02], [1.16, 1.89], [1.08, 2.06], [1.16, 2.14], [1.24, 2.05], [1.16, 1.98], [1.14, 2.13], [1.1, 2.05], [1.07, 1.95], [1.11, 1.95], [1.08, 1.9], [1.16, 2.07], [1.12, 2.13], [1.07, 2.06], [1.17, 1.95], [1.02, 1.88], [1.03, 1.87], [1.04, 1.82], [1.11, 2.02], [1.09, 2.11], [1.01, 2.09]],
            "cov": [[[0.0006, -0.0001], [-0.0001, 0.0007]], [[0.0005, -0.0004], [-0.0004, 0.0016]], [[0.0004, -0.0005], [-0.0005, 0.0038]], [[0.0003, -0.0001], [-0.0001, 0.0058]], [[0.0006, 0.0006], [0.0006, 0.0095]], [[0.0007, 0.0014], [0.0014, 0.0126]], [[0.0013, 0.003], [0.003, 0.0181]], [[0.0019, 0.0047], [0.0047, 0.0221]], [[0.0028, 0.0072], [0.0072, 0.0307]], [[0.0039, 0.0099], [0.0099, 0.0372]], [[0.0052, 0.0127], [0.0127, 0.0434]], [[0.0067, 0.0162], [0.0162, 0.0513]], [[0.0086, 0.0205], [0.0205, 0.0603]], [[0.0109, 0.0249], [0.0249, 0.0685]], [[0.0134, 0.0302], [0.0302, 0.081]], [[0.0157, 0.0356], [0.0356, 0.0951]], [[0.0186, 0.0412], [0.0412, 0.1063]], [[0.022, 0.048], [0.048, 0.1218]], [[0.0263, 0.0563], [0.0563, 0.1397]], [[0.0305, 0.0637], [0.0637, 0.1551]], [[0.0353, 0.0737], [0.0737, 0.1803]], [[0.0385, 0.0783], [0.0783, 0.1884]], [[0.0453, 0.0895], [0.0895, 0.2102]], [[0.0501, 0.0987], [0.0987, 0.2319]], [[0.0582, 0.1112], [0.1112, 0.2509]], [[0.0647, 0.1236], [0.1236, 0.2787]], [[0.071, 0.1358], [0.1358, 0.3073]], [[0.0801, 0.1502], [0.1502, 0.3336]], [[0.0879, 0.1641], [0.1641, 0.3618]], [[0.0917, 0.173], [0.173, 0.3863]], [[0.1097, 0.202], [0.202, 0.4384]], [[0.1142, 0.2041], [0.2041, 0.4329]], [[0.1273, 0.2258], [0.2258, 0.4776]], [[0.1476, 0.2586], [0.2586, 0.535]], [[0.1616, 0.284], [0.284, 0.5892]], [[0.1567, 0.2747], [0.2747, 0.5745]], [[0.1761, 0.3064], [0.3064, 0.6358]], [[0.1854, 0.3224], [0.3224, 0.6662]], [[0.2085, 0.3592], [0.3592, 0.727]], [[0.2204, 0.381], [0.381, 0.7734]], [[0.2387, 0.4067], [0.4067, 0.806]], [[0.2558, 0.4293], [0.4293, 0.8355]], [[0.2584, 0.4478], [0.4478, 0.8964]], [[0.2869, 0.4859], [0.4859, 0.9415]], [[0.2924, 0.4942], [0.4942, 0.9516]], [[0.3129, 0.5371], [0.5371, 1.0425]], [[0.3188, 0.5484], [0.5484, 1.0632]], [[0.3278, 0.5554], [0.5554, 1.0581]], [[0.3581, 0.6032], [0.6032, 1.1356]], [[0.364, 0.6133], [0.6133, 1.1538]], [[0.3699, 0.624], [0.624, 1.1735]], [[0.3844, 0.648], [0.648, 1.2124]], [[0.3643, 0.6288], [0.6288, 1.2059]], [[0.3938, 0.6703], [0.6703, 1.2636]], [[0.3979, 0.6749], [0.6749, 1.2665]], [[0.4311, 0.7232], [0.7232, 1.3356]], [[0.4255, 0.7168], [0.7168, 1.3329]], [[0.4516, 0.7593], [0.7593, 1.4023]], [[0.4307, 0.7299], [0.7299, 1.3644]], [[0.4293, 0.7261], [0.7261, 1.3547]], [[0.449, 0.7679], [0.7679, 1.4421]], [[0.4602, 0.782], [0.782, 1.4588]], [[0.4526, 0.7695], [0.7695, 1.4349]], [[0.4473, 0.7601], [0.7601, 1.4175]], [[0.4371, 0.7507], [0.7507, 1.4175]], [[0.4695, 0.7979], [0.7979, 1.4877]], [[0.4667, 0.8041], [0.8041, 1.5154]], [[0.4691, 0.8116], [0.8116, 1.5374]], [[0.4877, 0.8242], [0.8242, 1.5241]], [[0.4593, 0.78], [0.78, 1.4526]], [[0.5094, 0.8738], [0.8738, 1.6353]], [[0.4879, 0.8352], [0.8352, 1.562]], [[0.4679, 0.7967], [0.7967, 1.4859]], [[0.4734, 0.8067], [0.8067, 1.5051]], [[0.4649, 0.7927], [0.7927, 1.4851]], [[0.4573, 0.7822], [0.7822, 1.4694]], [[0.4696, 0.79], [0.79, 1.4587]], [[0.4554, 0.7767], [0.7767, 1.4589]], [[0.4802, 0.8169], [0.8169, 1.5243]], [[0.4754, 0.8184], [0.8184, 1.5484]], [[0.4687, 0.8018], [0.8018, 1.5054]], [[0.465, 0.788], [0.788, 1.4698]], [[0.4746, 0.8105], [0.8105, 1.5229]], [[0.4632, 0.8], [0.8, 1.5233]], [[0.4587, 0.7795], [0.7795, 1.4627]], [[0.4594, 0.7947], [0.7947, 1.5167]], [[0.45, 0.7709], [0.7709, 1.4619]], [[0.4342, 0.7426], [0.7426, 1.409]], [[0.4565, 0.7923], [0.7923, 1.5217]], [[0.4315, 0.737], [0.737, 1.3988]], [[0.4325, 0.7411], [0.7411, 1.4128]], [[0.4305, 0.7434], [0.7434, 1.4307]], [[0.4295, 0.7433], [0.7433, 1.435]], [[0.4172, 0.7176], [0.7176, 1.3798]], [[0.4213, 0.7249], [0.7249, 1.394]], [[0.4057, 0.7047], [0.7047, 1.3723]], [[0.4066, 0.7025], [0.7025, 1.3632]], [[0.3647, 0.6384], [0.6384, 1.265]], [[0.3825, 0.6705], [0.6705, 1.3276]], [[0.3647, 0.6288], [0.6288, 1.2308]], [[0.3705, 0.6405], [0.6405, 1.259]], [[0.3543, 0.6161], [0.6161, 1.2213]], [[0.3593, 0.6239], [0.6239, 1.2395]], [[0.3421, 0.6006], [0.6006, 1.2113]], [[0.3293, 0.5754], [0.5754, 1.1611]], [[0.3083, 0.5449], [0.5449, 1.121]], [[0.2904, 0.5083], [0.5083, 1.042]], [[0.2918, 0.5076], [0.5076, 1.0384]], [[0.2786, 0.498], [0.498, 1.0512]], [[0.2604, 0.455], [0.455, 0.9525]], [[0.2542, 0.4499], [0.4499, 0.958]], [[0.2417, 0.4287], [0.4287, 0.9216]], [[0.2391, 0.4172], [0.4172, 0.8858]], [[0.2248, 0.4013], [0.4013, 0.8774]], [[0.2351, 0.4142], [0.4142, 0.8939]], [[0.2171, 0.3812], [0.3812, 0.8273]], [[0.2096, 0.3738], [0.3738, 0.8257]], [[0.2019, 0.3562], [0.3562, 0.7867]], [[0.2018, 0.3467], [0.3467, 0.7489]], [[0.2054, 0.3547], [0.3547, 0.7647]], [[0.1964, 0.3397], [0.3397, 0.7403]], [[0.1835, 0.3242], [0.3242, 0.7303]], [[0.18, 0.3117], [0.3117, 0.689]], [[0.1852, 0.321], [0.321, 0.7072]], [[0.1739, 0.2989], [0.2989, 0.6616]], [[0.1695, 0.2954], [0.2954, 0.662]], [[0.1704, 0.2911], [0.2911, 0.635]], [[0.1753, 0.2907], [0.2907, 0.6165]], [[0.1661, 0.2747], [0.2747, 0.5851]], [[0.1776, 0.2974], [0.2974, 0.6335]], [[0.1744, 0.2845], [0.2845, 0.591]], [[0.1637, 0.2696], [0.2696, 0.5733]], [[0.1692, 0.2761], [0.2761, 0.5771]], [[0.1773, 0.292], [0.292, 0.6074]], [[0.1834, 0.3012], [0.3012, 0.6205]], [[0.1729, 0.2834], [0.2834, 0.5834]], [[0.1756, 0.2819], [0.2819, 0.5682]], [[0.1832, 0.2881], [0.2881, 0.5655]], [[0.1974, 0.3085], [0.3085, 0.5982]], [[0.1858, 0.2895], [0.2895, 0.567]], [[0.1856, 0.2907], [0.2907, 0.5672]], [[0.1974, 0.3053], [0.3053, 0.5867]], [[0.1815, 0.2806], [0.2806, 0.5432]], [[0.1956, 0.296], [0.296, 0.5574]], [[0.1968, 0.3], [0.3, 0.5671]], [[0.1881, 0.2911], [0.2911, 0.5575]], [[0.2011, 0.2994], [0.2994, 0.553]], [[0.2049, 0.3147], [0.3147, 0.5935]], [[0.2108, 0.3171], [0.3171, 0.5875]], [[0.2204, 0.3229], [0.3229, 0.5762]], [[0.2249, 0.3276], [0.3276, 0.5794]], [[0.2316, 0.3424], [0.3424, 0.6126]], [[0.2287, 0.3287], [0.3287, 0.5734]], [[0.2293, 0.3381], [0.3381, 0.6034]], [[0.2431, 0.3559], [0.3559, 0.6275]], [[0.2685, 0.3891], [0.3891, 0.6703]], [[0.2717, 0.3953], [0.3953, 0.6829]], [[0.2687, 0.3904], [0.3904, 0.6738]], [[0.2787, 0.4025], [0.4025, 0.689]], [[0.2972, 0.435], [0.435, 0.7502]], [[0.2914, 0.4339], [0.4339, 0.7603]], [[0.2916, 0.4345], [0.4345, 0.7628]], [[0.3098, 0.4639], [0.4639, 0.8164]], [[0.2987, 0.441], [0.441, 0.768]], [[0.3167, 0.4709], [0.4709, 0.8247]], [[0.3349, 0.4976], [0.4976, 0.8662]], [[0.3088, 0.4837], [0.4837, 0.895]], [[0.3107, 0.4761], [0.4761, 0.8669]], [[0.3295, 0.5127], [0.5127, 0.9477]], [[0.3174, 0.5045], [0.5045, 0.9534]], [[0.3224, 0.5134], [0.5134, 0.9707]], [[0.3106, 0.5094], [0.5094, 0.9992]], [[0.3051, 0.4969], [0.4969, 0.9751]], [[0.2998, 0.497], [0.497, 0.9943]], [[0.2895, 0.4844], [0.4844, 0.9846]], [[0.3039, 0.5101], [0.5101, 1.0366]], [[0.2995, 0.5049], [0.5049, 1.0334]], [[0.2902, 0.485], [0.485, 0.9869]], [[0.299, 0.517], [0.517, 1.0881]], [[0.2883, 0.4992], [0.4992, 1.0573]], [[0.2811, 0.4929], [0.4929, 1.0672]], [[0.2726, 0.4707], [0.4707, 1.0102]], [[0.2599, 0.4667], [0.4667, 1.0516]], [[0.2691, 0.4814], [0.4814, 1.0758]], [[0.2486, 0.446], [0.446, 1.0156]], [[0.2337, 0.4266], [0.4266, 0.9989]], [[0.2378, 0.4346], [0.4346, 1.0128]], [[0.2245, 0.4088], [0.4088, 0.9606]], [[0.2285, 0.4124], [0.4124, 0.9675]], [[0.2021, 0.3618], [0.3618, 0.8585]], [[0.214, 0.3862], [0.3862, 0.9176]], [[0.1973, 0.3618], [0.3618, 0.8887]], [[0.1903, 0.3503], [0.3503, 0.8685]], [[0.1871, 0.3375], [0.3375, 0.818]], [[0.1883, 0.3374], [0.3374, 0.8211]], [[0.1835, 0.3292], [0.3292, 0.8015]], [[0.1784, 0.3136], [0.3136, 0.7524]], [[0.1852, 0.3237], [0.3237, 0.7749]], [[0.1835, 0.314], [0.314, 0.7367]], [[0.1817, 0.3074], [0.3074, 0.7162]], [[0.1887, 0.3204], [0.3204, 0.7433]], [[0.1933, 0.3214], [0.3214, 0.7261]], [[0.1987, 0.3279], [0.3279, 0.7378]], [[0.203, 0.326], [0.326, 0.7095]], [[0.2027, 0.3228], [0.3228, 0.6936]], [[0.2186, 0.3414], [0.3414, 0.7122]], [[0.2154, 0.3356], [0.3356, 0.7075]], [[0.216, 0.3271], [0.3271, 0.6703]], [[0.2114, 0.3235], [0.3235, 0.6713]], [[0.2307, 0.3461], [0.3461, 0.6897]], [[0.2291, 0.332], [0.332, 0.641]], [[0.2409, 0.3469], [0.3469, 0.6542]], [[0.258, 0.3731], [0.3731, 0.7004]], [[0.2692, 0.3943], [0.3943, 0.7412]], [[0.2798, 0.4047], [0.4047, 0.7459]], [[0.2867, 0.412], [0.412, 0.7454]], [[0.3018, 0.4283], [0.4283, 0.7602]], [[0.2904, 0.4127], [0.4127, 0.7353]], [[0.3271, 0.4684], [0.4684, 0.8304]], [[0.3373, 0.4754], [0.4754, 0.8191]], [[0.338, 0.4837], [0.4837, 0.8489]], [[0.3487, 0.4909], [0.4909, 0.8443]], [[0.3414, 0.4873], [0.4873, 0.8509]], [[0.3587, 0.5117], [0.5117, 0.8881]], [[0.3808, 0.5445], [0.5445, 0.9447]], [[0.3708, 0.5317], [0.5317, 0.9267]], [[0.3771, 0.5431], [0.5431, 0.9502]], [[0.3556, 0.5168], [0.5168, 0.9234]], [[0.3632, 0.5331], [0.5331, 0.961]], [[0.3369, 0.5079], [0.5079, 0.9514]], [[0.325, 0.4868], [0.4868, 0.9155]], [[0.3407, 0.5178], [0.5178, 0.9837]], [[0.3189, 0.4833], [0.4833, 0.9289]], [[0.3063, 0.4748], [0.4748, 0.9458]], [[0.3013, 0.4734], [0.4734, 0.9647]], [[0.2984, 0.462], [0.462, 0.9292]], [[0.2652, 0.4183], [0.4183, 0.8731]], [[0.2459, 0.3857], [0.3857, 0.8158]], [[0.2461, 0.3924], [0.3924, 0.8513]], [[0.2217, 0.3529], [0.3529, 0.7797]], [[0.2212, 0.3497], [0.3497, 0.7746]], [[0.2163, 0.3425], [0.3425, 0.7615]], [[0.2008, 0.3226], [0.3226, 0.7396]], [[0.2155, 0.3352], [0.3352, 0.7396]], [[0.2004, 0.3186], [0.3186, 0.7288]], [[0.194, 0.3059], [0.3059, 0.7014]], [[0.1947, 0.309], [0.309, 0.7098]], [[0.1966, 0.312], [0.312, 0.7235]], [[0.1928, 0.307], [0.307, 0.7173]], [[0.1915, 0.3001], [0.3001, 0.6925]], [[0.2117, 0.3286], [0.3286, 0.7411]], [[0.2074, 0.3155], [0.3155, 0.6933]], [[0.2068, 0.3179], [0.3179, 0.7027]], [[0.2093, 0.3208], [0.3208, 0.7109]], [[0.2243, 0.3339], [0.3339, 0.7111]], [[0.2303, 0.3473], [0.3473, 0.7404]], [[0.246, 0.3721], [0.3721, 0.7791]], [[0.2475, 0.3537], [0.3537, 0.7076]], [[0.2683, 0.3896], [0.3896, 0.7742]], [[0.2901, 0.4092], [0.4092, 0.771]], [[0.2874, 0.4138], [0.4138, 0.8013]], [[0.2863, 0.4022], [0.4022, 0.7584]], [[0.2895, 0.4128], [0.4128, 0.7844]], [[0.3206, 0.4505], [0.4505, 0.831]], [[0.3163, 0.4534], [0.4534, 0.856]], [[0.3273, 0.4632], [0.4632, 0.8559]], [[0.3419, 0.4783], [0.4783, 0.8696]], [[0.3185, 0.4271], [0.4271, 0.7552]], [[0.3508, 0.4874], [0.4874, 0.8833]], [[0.3553, 0.4803], [0.4803, 0.8424]], [[0.3344, 0.47], [0.47, 0.8728]], [[0.3215, 0.4499], [0.4499, 0.8381]], [[0.3302, 0.4504], [0.4504, 0.8198]], [[0.3039, 0.4131], [0.4131, 0.7636]], [[0.3017, 0.4292], [0.4292, 0.8334]], [[0.2804, 0.3899], [0.3899, 0.7592]], [[0.2705, 0.383], [0.383, 0.7621]], [[0.265, 0.3732], [0.3732, 0.752]], [[0.267, 0.3685], [0.3685, 0.73]], [[0.233, 0.3221], [0.3221, 0.6666]], [[0.24, 0.3304], [0.3304, 0.6798]], [[0.2274, 0.3157], [0.3157, 0.6674]], [[0.2337, 0.3184], [0.3184, 0.6621]], [[0.2166, 0.3045], [0.3045, 0.6657]], [[0.2152, 0.2994], [0.2994, 0.6577]], [[0.1943, 0.2773], [0.2773, 0.6383]], [[0.2031, 0.2945], [0.2945, 0.6824]], [[0.2135, 0.3025], [0.3025, 0.6799]], [[0.2105, 0.2968], [0.2968, 0.6706]], [[0.2182, 0.3061], [0.3061, 0.6822]], [[0.2308, 0.3368], [0.3368, 0.7687]], [[0.2166, 0.3123], [0.3123, 0.7163]], [[0.2295, 0.3364], [0.3364, 0.774]], [[0.2429, 0.3623], [0.3623, 0.8314]], [[0.2585, 0.3844], [0.3844, 0.8646]], [[0.2693, 0.3824], [0.3824, 0.8161]], [[0.2785, 0.3988], [0.3988, 0.8489]], [[0.2889, 0.4169], [0.4169, 0.8855]], [[0.3119, 0.4467], [0.4467, 0.9283]], [[0.3094, 0.4371], [0.4371, 0.8997]], [[0.3196, 0.4431], [0.4431, 0.8863]], [[0.3264, 0.4523], [0.4523, 0.8989]], [[0.3374, 0.4592], [0.4592, 0.8891]], [[0.3305, 0.4485], [0.4485, 0.8751]], [[0.3448, 0.4726], [0.4726, 0.9176]], [[0.363, 0.4743], [0.4743, 0.8647]], [[0.3359, 0.4449], [0.4449, 0.8395]], [[0.3505, 0.4443], [0.4443, 0.8007]], [[0.3285, 0.4131], [0.4131, 0.7559]], [[0.325, 0.4055], [0.4055, 0.7292]], [[0.3264, 0.3928], [0.3928, 0.6866]], [[0.3042, 0.3699], [0.3699, 0.67]], [[0.2893, 0.3533], [0.3533, 0.6536]], [[0.2918, 0.3468], [0.3468, 0.6283]], [[0.3062, 0.3492], [0.3492, 0.6024]], [[0.295, 0.3427], [0.3427, 0.6148]], [[0.2861, 0.3413], [0.3413, 0.6327]], [[0.2722, 0.3154], [0.3154, 0.5854]], [[0.2984, 0.3359], [0.3359, 0.5933]], [[0.2865, 0.3338], [0.3338, 0.6265]], [[0.2649, 0.3115], [0.3115, 0.6065]], [[0.2736, 0.3257], [0.3257, 0.6388]], [[0.2743, 0.3253], [0.3253, 0.6423]], [[0.2624, 0.3125], [0.3125, 0.6334]], [[0.283, 0.3399], [0.3399, 0.6825]], [[0.2713, 0.3297], [0.3297, 0.6768]], [[0.2768, 0.341], [0.341, 0.7165]], [[0.2748, 0.3394], [0.3394, 0.6999]], [[0.2858, 0.3668], [0.3668, 0.7838]], [[0.2955, 0.3776], [0.3776, 0.7948]], [[0.2936, 0.3707], [0.3707, 0.7742]], [[0.3098, 0.4092], [0.4092, 0.8801]], [[0.3189, 0.4152], [0.4152, 0.8683]], [[0.3215, 0.409], [0.409, 0.8498]], [[0.326, 0.4203], [0.4203, 0.8769]], [[0.3415, 0.4364], [0.4364, 0.8822]], [[0.3299, 0.4198], [0.4198, 0.8511]], [[0.3543, 0.4459], [0.4459, 0.894]], [[0.3378, 0.4286], [0.4286, 0.8795]], [[0.3151, 0.3913], [0.3913, 0.8178]], [[0.3346, 0.4083], [0.4083, 0.8272]], [[0.3352, 0.4054], [0.4054, 0.8223]], [[0.3047, 0.3609], [0.3609, 0.7448]], [[0.3035, 0.3526], [0.3526, 0.7217]], [[0.2943, 0.3463], [0.3463, 0.741]], [[0.2962, 0.336], [0.336, 0.6913]], [[0.2846, 0.3131], [0.3131, 0.6358]], [[0.2892, 0.3176], [0.3176, 0.6535]], [[0.2768, 0.3023], [0.3023, 0.6297]], [[0.2903, 0.3169], [0.3169, 0.6492]], [[0.2945, 0.3175], [0.3175, 0.6416]], [[0.2831, 0.2988], [0.2988, 0.5924]], [[0.2901, 0.3078], [0.3078, 0.6223]], [[0.3032, 0.3148], [0.3148, 0.6093]], [[0.2977, 0.3051], [0.3051, 0.5864]], [[0.3046, 0.3253], [0.3253, 0.6549]], [[0.3051, 0.3172], [0.3172, 0.6193]], [[0.3128, 0.3182], [0.3182, 0.6105]], [[0.3248, 0.3391], [0.3391, 0.6578]], [[0.3171, 0.328], [0.328, 0.6345]], [[0.3643, 0.3771], [0.3771, 0.6871]], [[0.3527, 0.366], [0.366, 0.6858]], [[0.383, 0.4006], [0.4006, 0.726]], [[0.3713, 0.3959], [0.3959, 0.7435]], [[0.3754, 0.4017], [0.4017, 0.7531]], [[0.3851, 0.4088], [0.4088, 0.7581]], [[0.4053, 0.4268], [0.4268, 0.7697]], [[0.4019, 0.4332], [0.4332, 0.8199]], [[0.4062, 0.4388], [0.4388, 0.8303]], [[0.3844, 0.4136], [0.4136, 0.8026]], [[0.39, 0.422], [0.422, 0.8291]], [[0.3611, 0.3996], [0.3996, 0.8153]], [[0.3781, 0.4042], [0.4042, 0.7991]], [[0.3379, 0.3645], [0.3645, 0.767]], [[0.322, 0.3416], [0.3416, 0.7383]], [[0.3302, 0.3459], [0.3459, 0.7382]], [[0.3182, 0.3365], [0.3365, 0.7454]], [[0.3057, 0.3084], [0.3084, 0.664]], [[0.3114, 0.3233], [0.3233, 0.7163]], [[0.3251, 0.3311], [0.3311, 0.7093]], [[0.3092, 0.3044], [0.3044, 0.6579]], [[0.307, 0.3022], [0.3022, 0.6472]], [[0.2971, 0.2843], [0.2843, 0.6067]], [[0.3082, 0.2934], [0.2934, 0.6244]], [[0.3119, 0.304], [0.304, 0.6608]], [[0.3195, 0.3041], [0.3041, 0.6328]], [[0.3206, 0.3059], [0.3059, 0.6463]], [[0.3151, 0.2993], [0.2993, 0.6271]], [[0.3228, 0.3051], [0.3051, 0.6306]], [[0.3652, 0.3463], [0.3463, 0.6787]], [[0.346, 0.3282], [0.3282, 0.6573]], [[0.3558, 0.3402], [0.3402, 0.6795]], [[0.3646, 0.352], [0.352, 0.6942]], [[0.3638, 0.3503], [0.3503, 0.6879]], [[0.3977, 0.3807], [0.3807, 0.7038]], [[0.379, 0.3622], [0.3622, 0.681]], [[0.3827, 0.3646], [0.3646, 0.6963]], [[0.4101, 0.3868], [0.3868, 0.6997]], [[0.4151, 0.3894], [0.3894, 0.7119]], [[0.4105, 0.385], [0.385, 0.6899]], [[0.432, 0.4144], [0.4144, 0.7492]], [[0.4023, 0.3875], [0.3875, 0.7223]], [[0.4029, 0.3815], [0.3815, 0.7135]], [[0.4241, 0.3953], [0.3953, 0.7195]], [[0.3973, 0.3687], [0.3687, 0.683]], [[0.3875, 0.3476], [0.3476, 0.6321]], [[0.3771, 0.3324], [0.3324, 0.6197]], [[0.3837, 0.334], [0.334, 0.6146]], [[0.3892, 0.3405], [0.3405, 0.6306]], [[0.3585, 0.3113], [0.3113, 0.6109]], [[0.328, 0.275], [0.275, 0.5609]], [[0.3481, 0.3007], [0.3007, 0.6111]], [[0.353, 0.3054], [0.3054, 0.6397]], [[0.3299, 0.2807], [0.2807, 0.6221]], [[0.3236, 0.2703], [0.2703, 0.5696]], [[0.3424, 0.2923], [0.2923, 0.6147]], [[0.3387, 0.2916], [0.2916, 0.6273]], [[0.3504, 0.3066], [0.3066, 0.6613]], [[0.3688, 0.3249], [0.3249, 0.6759]], [[0.3294, 0.2927], [0.2927, 0.6597]], [[0.3418, 0.2967], [0.2967, 0.6569]], [[0.3542, 0.305], [0.305, 0.652]], [[0.3338, 0.2861], [0.2861, 0.6545]], [[0.3693, 0.3155], [0.3155, 0.6295]], [[0.3498, 0.3034], [0.3034, 0.6629]], [[0.3757, 0.3301], [0.3301, 0.6859]], [[0.3477, 0.3064], [0.3064, 0.6957]], [[0.3813, 0.3288], [0.3288, 0.6839]], [[0.402, 0.3575], [0.3575, 0.7361]], [[0.3794, 0.3296], [0.3296, 0.6866]], [[0.3858, 0.336], [0.336, 0.7069]], [[0.3988, 0.3491], [0.3491, 0.7166]], [[0.4121, 0.3572], [0.3572, 0.7192]], [[0.4, 0.3397], [0.3397, 0.6809]], [[0.4155, 0.3586], [0.3586, 0.7068]], [[0.3886, 0.3309], [0.3309, 0.6835]], [[0.4236, 0.3546], [0.3546, 0.6741]], [[0.4218, 0.355], [0.355, 0.6732]], [[0.4318, 0.347], [0.347, 0.6252]], [[0.4233, 0.3374], [0.3374, 0.6257]], [[0.4109, 0.3265], [0.3265, 0.6249]], [[0.4169, 0.3279], [0.3279, 0.6088]], [[0.3869, 0.2969], [0.2969, 0.567]], [[0.3871, 0.2945], [0.2945, 0.5609]], [[0.4098, 0.3114], [0.3114, 0.5797]], [[0.4125, 0.3056], [0.3056, 0.546]], [[0.386, 0.2854], [0.2854, 0.5639]], [[0.3764, 0.275], [0.275, 0.5399]], [[0.3995, 0.2942], [0.2942, 0.572]], [[0.4061, 0.2998], [0.2998, 0.5731]], [[0.4231, 0.3111], [0.3111, 0.5683]], [[0.4195, 0.3162], [0.3162, 0.6258]], [[0.3935, 0.2886], [0.2886, 0.5938]], [[0.4032, 0.2996], [0.2996, 0.6002]], [[0.4234, 0.3184], [0.3184, 0.627]], [[0.4439, 0.3377], [0.3377, 0.6686]], [[0.4336, 0.3333], [0.3333, 0.6714]], [[0.4118, 0.3149], [0.3149, 0.6581]], [[0.4302, 0.3342], [0.3342, 0.6841]], [[0.4315, 0.3324], [0.3324, 0.664]], [[0.4301, 0.3355], [0.3355, 0.71]], [[0.43, 0.3341], [0.3341, 0.7143]], [[0.4332, 0.3333], [0.3333, 0.696]], [[0.4262, 0.3264], [0.3264, 0.6954]], [[0.4031, 0.3031], [0.3031, 0.6929]], [[0.4325, 0.3228], [0.3228, 0.6924]], [[0.4122, 0.3098], [0.3098, 0.7186]], [[0.396, 0.2825], [0.2825, 0.6371]], [[0.4152, 0.2971], [0.2971, 0.6725]], [[0.3975, 0.2782], [0.2782, 0.6205]], [[0.4168, 0.2853], [0.2853, 0.6145]], [[0.3874, 0.2578], [0.2578, 0.5929]], [[0.4115, 0.2748], [0.2748, 0.5728]], [[0.3999, 0.2627], [0.2627, 0.5853]], [[0.3991, 0.2614], [0.2614, 0.5477]], [[0.3698, 0.2382], [0.2382, 0.5167]], [[0.4173, 0.2783], [0.2783, 0.5763]], [[0.3977, 0.2569], [0.2569, 0.5248]], [[0.4131, 0.2706], [0.2706, 0.5538]], [[0.4369, 0.2901], [0.2901, 0.5757]], [[0.42, 0.274], [0.274, 0.57]], [[0.4147, 0.2739], [0.2739, 0.5637]], [[0.4534, 0.3019], [0.3019, 0.608]], [[0.4484, 0.2997], [0.2997, 0.578]], [[0.4311, 0.2831], [0.2831, 0.5882]], [[0.432, 0.2957], [0.2957, 0.6369]], [[0.4473, 0.3135], [0.3135, 0.6424]], [[0.4804, 0.3402], [0.3402, 0.6674]], [[0.478, 0.3412], [0.3412, 0.678]], [[0.4965, 0.3588], [0.3588, 0.7012]], [[0.5339, 0.3819], [0.3819, 0.7026]], [[0.4849, 0.3416], [0.3416, 0.6601]], [[0.5256, 0.3715], [0.3715, 0.67]], [[0.4708, 0.3337], [0.3337, 0.6641]], [[0.4942, 0.3408], [0.3408, 0.64]], [[0.5046, 0.3409], [0.3409, 0.6142]], [[0.5066, 0.343], [0.343, 0.6238]], [[0.4889, 0.3246], [0.3246, 0.5999]], [[0.477, 0.3133], [0.3133, 0.6088]], [[0.4396, 0.273], [0.273, 0.5441]], [[0.4453, 0.2775], [0.2775, 0.5561]], [[0.4644, 0.2595], [0.2595, 0.5204]], [[0.5544, 0.2895], [0.2895, 0.5264]], [[0.5741, 0.2708], [0.2708, 0.4774]], [[0.6063, 0.2772], [0.2772, 0.4855]], [[0.6081, 0.2431], [0.2431, 0.402]], [[0.7067, 0.2754], [0.2754, 0.3855]], [[0.6154, 0.2312], [0.2312, 0.4255]], [[0.7263, 0.2694], [0.2694, 0.3406]], [[0.7859, 0.3071], [0.3071, 0.4036]], [[0.783, 0.3122], [0.3122, 0.4092]], [[0.7877, 0.3044], [0.3044, 0.3651]], [[0.7973, 0.3346], [0.3346, 0.4181]], [[0.7662, 0.295], [0.295, 0.3575]], [[0.8102, 0.3154], [0.3154, 0.3065]], [[0.7653, 0.2918], [0.2918, 0.3434]], [[0.7546, 0.2777], [0.2777, 0.3338]], [[0.8378, 0.3039], [0.3039, 0.3094]], [[0.8013, 0.313], [0.313, 0.3715]], [[0.9143, 0.3956], [0.3956, 0.42]], [[0.8665, 0.352], [0.352, 0.3629]], [[0.848, 0.3316], [0.3316, 0.3332]], [[0.8451, 0.3375], [0.3375, 0.3306]], [[0.8617, 0.341], [0.341, 0.3071]], [[0.8205, 0.3054], [0.3054, 0.2742]], [[0.8034, 0.301], [0.301, 0.2936]], [[0.74, 0.2787], [0.2787, 0.3043]], [[0.6962, 0.2503], [0.2503, 0.2722]], [[0.7285, 0.2824], [0.2824, 0.2637]], [[0.7285, 0.2968], [0.2968, 0.2905]], [[0.6729, 0.3013], [0.3013, 0.3559]], [[0.6867, 0.3062], [0.3062, 0.345]], [[0.7395, 0.319], [0.319, 0.2952]], [[0.6694, 0.3025], [0.3025, 0.3108]], [[0.6172, 0.2836], [0.2836, 0.3326]], [[0.622, 0.2784], [0.2784, 0.3176]], [[0.6302, 0.2737], [0.2737, 0.3036]], [[0.6181, 0.2689], [0.2689, 0.2909]], [[0.7392, 0.3442], [0.3442, 0.3316]], [[0.6139, 0.2987], [0.2987, 0.3832]], [[0.5833, 0.2723], [0.2723, 0.3819]], [[0.6458, 0.3171], [0.3171, 0.3573]], [[0.6724, 0.3311], [0.3311, 0.3332]], [[0.5784, 0.2764], [0.2764, 0.3408]], [[0.6144, 0.2647], [0.2647, 0.2903]], [[0.6502, 0.2834], [0.2834, 0.2721]], [[0.5467, 0.2271], [0.2271, 0.288]], [[0.6401, 0.2754], [0.2754, 0.262]], [[0.6785, 0.3217], [0.3217, 0.327]], [[0.6477, 0.3047], [0.3047, 0.3667]], [[0.63, 0.2692], [0.2692, 0.305]], [[0.6107, 0.2565], [0.2565, 0.2572]], [[0.6199, 0.2772], [0.2772, 0.3069]], [[0.5691, 0.2343], [0.2343, 0.2813]], [[0.6109, 0.272], [0.272, 0.3171]], [[0.5501, 0.231], [0.231, 0.2918]], [[0.6099, 0.2506], [0.2506, 0.2857]], [[0.6424, 0.2865], [0.2865, 0.3349]], [[0.6341, 0.286], [0.286, 0.3429]], [[0.5778, 0.2115], [0.2115, 0.2434]], [[0.5805, 0.2231], [0.2231, 0.2686]], [[0.5898, 0.2228], [0.2228, 0.2655]], [[0.5676, 0.2121], [0.2121, 0.2498]], [[0.6364, 0.2499], [0.2499, 0.2411]], [[0.664, 0.2829], [0.2829, 0.2769]], [[0.6778, 0.297], [0.297, 0.3091]], [[0.6371, 0.2752], [0.2752, 0.3075]], [[0.6483, 0.2784], [0.2784, 0.3078]], [[0.6436, 0.2599], [0.2599, 0.2642]], [[0.6553, 0.2599], [0.2599, 0.2649]], [[0.6639, 0.2872], [0.2872, 0.3195]], [[0.6542, 0.2852], [0.2852, 0.3741]], [[0.6364, 0.2377], [0.2377, 0.3033]], [[0.6695, 0.236], [0.236, 0.2183]], [[0.6291, 0.2381], [0.2381, 0.2889]], [[0.6465, 0.2648], [0.2648, 0.317]], [[0.6679, 0.2732], [0.2732, 0.2974]], [[0.7134, 0.2892], [0.2892, 0.2655]], [[0.7036, 0.2912], [0.2912, 0.2715]], [[0.6609, 0.2982], [0.2982, 0.3832]], [[0.7049, 0.3066], [0.3066, 0.328]], [[0.7274, 0.3195], [0.3195, 0.3208]], [[0.6224, 0.2535], [0.2535, 0.3071]], [[0.6827, 0.2717], [0.2717, 0.2825]], [[0.6373, 0.2605], [0.2605, 0.2695]], [[0.6637, 0.2669], [0.2669, 0.2521]], [[0.6433, 0.2748], [0.2748, 0.2522]], [[0.603, 0.2491], [0.2491, 0.2462]], [[0.6385, 0.2599], [0.2599, 0.2487]], [[0.7066, 0.3034], [0.3034, 0.2463]], [[0.6585, 0.2884], [0.2884, 0.2816]], [[0.6081, 0.2538], [0.2538, 0.2795]], [[0.6263, 0.2593], [0.2593, 0.2685]], [[0.6864, 0.2879], [0.2879, 0.2577]], [[0.6536, 0.2653], [0.2653, 0.2699]], [[0.6348, 0.2457], [0.2457, 0.2518]], [[0.6327, 0.2566], [0.2566, 0.2737]], [[0.6447, 0.2763], [0.2763, 0.2843]], [[0.6422, 0.2764], [0.2764, 0.267]], [[0.664, 0.309], [0.309, 0.324]], [[0.6367, 0.2862], [0.2862, 0.2968]], [[0.5606, 0.2324], [0.2324, 0.2526]], [[0.6167, 0.2806], [0.2806, 0.3135]], [[0.6388, 0.2846], [0.2846, 0.3373]], [[0.6856, 0.3272], [0.3272, 0.353]], [[0.71, 0.3272], [0.3272, 0.323]], [[0.7318, 0.3508], [0.3508, 0.3316]], [[0.6292, 0.2807], [0.2807, 0.3031]], [[0.6408, 0.2962], [0.2962, 0.3151]], [[0.6703, 0.3137], [0.3137, 0.3327]], [[0.6353, 0.2835], [0.2835, 0.2843]], [[0.6492, 0.3008], [0.3008, 0.2892]], [[0.6387, 0.3094], [0.3094, 0.3392]], [[0.6452, 0.3019], [0.3019, 0.3153]], [[0.5881, 0.2528], [0.2528, 0.2775]], [[0.6333, 0.2838], [0.2838, 0.2852]], [[0.5945, 0.2806], [0.2806, 0.3199]], [[0.5801, 0.2712], [0.2712, 0.3323]], [[0.5927, 0.2685], [0.2685, 0.298]], [[0.6478, 0.3182], [0.3182, 0.323]], [[0.6592, 0.3076], [0.3076, 0.2656]], [[0.7016, 0.3608], [0.3608, 0.3125]], [[0.6703, 0.3519], [0.3519, 0.3569]], [[0.5818, 0.2859], [0.2859, 0.3535]], [[0.5964, 0.2786], [0.2786, 0.2998]], [[0.6397, 0.303], [0.303, 0.3079]], [[0.6673, 0.3489], [0.3489, 0.3591]], [[0.5789, 0.2773], [0.2773, 0.3164]], [[0.5701, 0.2679], [0.2679, 0.3111]], [[0.5616, 0.2638], [0.2638, 0.2852]], [[0.673, 0.3508], [0.3508, 0.3194]], [[0.5983, 0.3095], [0.3095, 0.3544]], [[0.5739, 0.2794], [0.2794, 0.3854]], [[0.6736, 0.3325], [0.3325, 0.3131]], [[0.5432, 0.2538], [0.2538, 0.3874]], [[0.6505, 0.3097], [0.3097, 0.3035]], [[0.5521, 0.2588], [0.2588, 0.2994]], [[0.5501, 0.2509], [0.2509, 0.2962]], [[0.6281, 0.3074], [0.3074, 0.3032]], [[0.6127, 0.2916], [0.2916, 0.2985]], [[0.6125, 0.309], [0.309, 0.3511]], [[0.5238, 0.2466], [0.2466, 0.3308]], [[0.6102, 0.3275], [0.3275, 0.3619]], [[0.6575, 0.3546], [0.3546, 0.3657]], [[0.5882, 0.299], [0.299, 0.3401]], [[0.5559, 0.2882], [0.2882, 0.3497]], [[0.5521, 0.2862], [0.2862, 0.3511]], [[0.5707, 0.294], [0.294, 0.3365]], [[0.6028, 0.308], [0.308, 0.3467]], [[0.6013, 0.3092], [0.3092, 0.3671]], [[0.5772, 0.2939], [0.2939, 0.3394]], [[0.6771, 0.3666], [0.3666, 0.393]], [[0.63, 0.3259], [0.3259, 0.3508]], [[0.5661, 0.2773], [0.2773, 0.3649]], [[0.5102, 0.2379], [0.2379, 0.341]], [[0.601, 0.2953], [0.2953, 0.324]], [[0.6395, 0.3134], [0.3134, 0.3254]], [[0.6187, 0.3001], [0.3001, 0.3284]], [[0.6211, 0.3153], [0.3153, 0.3359]], [[0.6392, 0.3217], [0.3217, 0.314]], [[0.6639, 0.3311], [0.3311, 0.3504]], [[0.5848, 0.2848], [0.2848, 0.3546]], [[0.5549, 0.274], [0.274, 0.3898]], [[0.5369, 0.2634], [0.2634, 0.3611]], [[0.5721, 0.2914], [0.2914, 0.3741]], [[0.5837, 0.2931], [0.2931, 0.3293]], [[0.6426, 0.3446], [0.3446, 0.325]], [[0.6427, 0.3533], [0.3533, 0.3837]], [[0.5876, 0.2981], [0.2981, 0.3347]], [[0.535, 0.2393], [0.2393, 0.3485]], [[0.5144, 0.2176], [0.2176, 0.3764]], [[0.5335, 0.2303], [0.2303, 0.3841]], [[0.5759, 0.2463], [0.2463, 0.3161]], [[0.6217, 0.2897], [0.2897, 0.3136]], [[0.5431, 0.2464], [0.2464, 0.3282]], [[0.5358, 0.2594], [0.2594, 0.3279]], [[0.6294, 0.3272], [0.3272, 0.3318]], [[0.599, 0.2938], [0.2938, 0.316]], [[0.5594, 0.2526], [0.2526, 0.3137]], [[0.5776, 0.2686], [0.2686, 0.3484]], [[0.529, 0.2229], [0.2229, 0.3303]], [[0.5682, 0.2579], [0.2579, 0.2993]], [[0.5808, 0.2716], [0.2716, 0.3132]], [[0.5157, 0.2371], [0.2371, 0.3367]], [[0.5792, 0.2973], [0.2973, 0.3593]], [[0.6669, 0.3478], [0.3478, 0.3734]], [[0.6048, 0.3071], [0.3071, 0.3964]], [[0.547, 0.2597], [0.2597, 0.389]], [[0.5737, 0.2624], [0.2624, 0.3196]], [[0.6437, 0.3152], [0.3152, 0.3235]], [[0.5356, 0.2644], [0.2644, 0.4098]], [[0.5445, 0.2673], [0.2673, 0.3586]], [[0.6268, 0.3185], [0.3185, 0.3513]], [[0.5777, 0.2754], [0.2754, 0.3651]], [[0.5349, 0.263], [0.263, 0.4395]], [[0.5596, 0.2609], [0.2609, 0.3632]], [[0.5982, 0.2883], [0.2883, 0.362]], [[0.612, 0.2887], [0.2887, 0.3523]], [[0.6119, 0.288], [0.288, 0.3632]], [[0.5727, 0.2656], [0.2656, 0.3995]], [[0.5548, 0.2334], [0.2334, 0.3782]], [[0.6417, 0.2849], [0.2849, 0.3383]], [[0.7202, 0.3474], [0.3474, 0.3693]], [[0.6182, 0.2917], [0.2917, 0.3305]], [[0.5783, 0.2635], [0.2635, 0.3212]], [[0.5671, 0.251], [0.251, 0.3368]], [[0.5606, 0.2485], [0.2485, 0.3654]], [[0.5502, 0.248], [0.248, 0.3995]], [[0.5261, 0.2245], [0.2245, 0.419]], [[0.5222, 0.2179], [0.2179, 0.4639]], [[0.5346, 0.2616], [0.2616, 0.4475]], [[0.5791, 0.316], [0.316, 0.3611]], [[0.6246, 0.3503], [0.3503, 0.3343]], [[0.6008, 0.3437], [0.3437, 0.3738]], [[0.5907, 0.3233], [0.3233, 0.3701]], [[0.63, 0.3506], [0.3506, 0.4147]], [[0.5934, 0.3075], [0.3075, 0.3983]], [[0.6304, 0.3239], [0.3239, 0.4297]], [[0.5682, 0.253], [0.253, 0.3768]], [[0.6172, 0.2746], [0.2746, 0.4272]], [[0.627, 0.2824], [0.2824, 0.4279]], [[0.6197, 0.3111], [0.3111, 0.4765]], [[0.6095, 0.3122], [0.3122, 0.3661]], [[0.5781, 0.3079], [0.3079, 0.34]], [[0.5801, 0.2979], [0.2979, 0.3468]], [[0.5958, 0.3056], [0.3056, 0.3857]], [[0.6187, 0.3038], [0.3038, 0.39]], [[0.6071, 0.2909], [0.2909, 0.4058]], [[0.5709, 0.2465], [0.2465, 0.4419]], [[0.5708, 0.2436], [0.2436, 0.4678]], [[0.5927, 0.2297], [0.2297, 0.4227]], [[0.5823, 0.214], [0.214, 0.4103]], [[0.5797, 0.1937], [0.1937, 0.3685]], [[0.6095, 0.193], [0.193, 0.3816]], [[0.685, 0.2371], [0.2371, 0.3453]], [[0.6921, 0.2588], [0.2588, 0.2934]], [[0.5784, 0.2162], [0.2162, 0.3162]], [[0.6052, 0.2599], [0.2599, 0.3118]], [[0.6419, 0.3033], [0.3033, 0.2716]], [[0.7216, 0.3556], [0.3556, 0.266]], [[0.6495, 0.3139], [0.3139, 0.2868]], [[0.5355, 0.2371], [0.2371, 0.2756]], [[0.6168, 0.2989], [0.2989, 0.2903]], [[0.5807, 0.28], [0.28, 0.3072]], [[0.561, 0.2661], [0.2661, 0.3183]], [[0.5667, 0.267], [0.267, 0.3063]], [[0.5351, 0.2446], [0.2446, 0.312]], [[0.5856, 0.2844], [0.2844, 0.3361]], [[0.6076, 0.3151], [0.3151, 0.4127]], [[0.5614, 0.2763], [0.2763, 0.4233]], [[0.5233, 0.2357], [0.2357, 0.4048]], [[0.5066, 0.2101], [0.2101, 0.3679]], [[0.5264, 0.2341], [0.2341, 0.38]], [[0.5685, 0.2818], [0.2818, 0.4248]], [[0.6251, 0.3216], [0.3216, 0.4071]], [[0.5791, 0.2979], [0.2979, 0.3565]], [[0.5255, 0.267], [0.267, 0.2995]], [[0.6099, 0.3469], [0.3469, 0.3744]], [[0.6888, 0.3982], [0.3982, 0.3771]], [[0.5969, 0.3229], [0.3229, 0.3504]], [[0.5563, 0.2738], [0.2738, 0.2811]], [[0.6013, 0.3056], [0.3056, 0.3112]], [[0.7003, 0.4021], [0.4021, 0.4569]], [[0.6521, 0.3503], [0.3503, 0.3509]], [[0.5284, 0.2486], [0.2486, 0.3766]], [[0.5533, 0.2576], [0.2576, 0.2695]], [[0.5756, 0.2839], [0.2839, 0.4528]], [[0.6556, 0.326], [0.326, 0.334]], [[0.6062, 0.3055], [0.3055, 0.5097]], [[0.6054, 0.2852], [0.2852, 0.3181]], [[0.5813, 0.2761], [0.2761, 0.4087]], [[0.5447, 0.2368], [0.2368, 0.3531]], [[0.6092, 0.2658], [0.2658, 0.3163]], [[0.6324, 0.3033], [0.3033, 0.5236]], [[0.6223, 0.2697], [0.2697, 0.3225]], [[0.5743, 0.2326], [0.2326, 0.4136]], [[0.5758, 0.2429], [0.2429, 0.4061]], [[0.5843, 0.2307], [0.2307, 0.314]], [[0.5657, 0.2244], [0.2244, 0.4733]], [[0.5837, 0.2352], [0.2352, 0.4037]], [[0.6437, 0.269], [0.269, 0.3613]], [[0.5937, 0.2529], [0.2529, 0.5221]], [[0.6096, 0.255], [0.255, 0.3723]], [[0.5529, 0.2189], [0.2189, 0.2895]], [[0.5928, 0.2627], [0.2627, 0.3556]], [[0.6305, 0.3146], [0.3146, 0.393]], [[0.6598, 0.3325], [0.3325, 0.3212]], [[0.6089, 0.2909], [0.2909, 0.254]], [[0.5822, 0.2805], [0.2805, 0.2642]], [[0.5658, 0.2679], [0.2679, 0.2733]], [[0.6212, 0.2919], [0.2919, 0.2693]], [[0.6626, 0.3149], [0.3149, 0.2982]], [[0.6252, 0.2767], [0.2767, 0.3316]], [[0.6367, 0.2675], [0.2675, 0.3695]], [[0.6389, 0.2441], [0.2441, 0.3765]], [[0.6246, 0.209], [0.209, 0.3681]], [[0.6132, 0.1944], [0.1944, 0.3986]], [[0.6349, 0.1879], [0.1879, 0.4]], [[0.6428, 0.1918], [0.1918, 0.4317]], [[0.6784, 0.2157], [0.2157, 0.4162]], [[0.6983, 0.2055], [0.2055, 0.3706]], [[0.6563, 0.1785], [0.1785, 0.4662]], [[0.6596, 0.165], [0.165, 0.5445]], [[0.6897, 0.2156], [0.2156, 0.5503]], [[0.7061, 0.2367], [0.2367, 0.4723]], [[0.6955, 0.2401], [0.2401, 0.4372]], [[0.6817, 0.2467], [0.2467, 0.4475]], [[0.6847, 0.2738], [0.2738, 0.4776]], [[0.6381, 0.2466], [0.2466, 0.4901]], [[0.6287, 0.2571], [0.2571, 0.4408]], [[0.6286, 0.2699], [0.2699, 0.3483]], [[0.6806, 0.3103], [0.3103, 0.3423]], [[0.6508, 0.3017], [0.3017, 0.3824]], [[0.7005, 0.3481], [0.3481, 0.4565]], [[0.7019, 0.3611], [0.3611, 0.4786]], [[0.6976, 0.3638], [0.3638, 0.458]], [[0.6931, 0.3618], [0.3618, 0.3843]], [[0.6613, 0.3345], [0.3345, 0.3446]], [[0.6833, 0.3656], [0.3656, 0.4153]], [[0.7493, 0.4161], [0.4161, 0.483]], [[0.7659, 0.4181], [0.4181, 0.4749]], [[0.7484, 0.4119], [0.4119, 0.4798]], [[0.695, 0.3772], [0.3772, 0.5064]], [[0.6125, 0.3283], [0.3283, 0.4642]], [[0.6693, 0.3635], [0.3635, 0.4657]], [[0.7619, 0.4263], [0.4263, 0.4909]], [[0.6918, 0.3753], [0.3753, 0.4785]], [[0.6433, 0.3453], [0.3453, 0.5054]], [[0.6473, 0.359], [0.359, 0.4893]], [[0.636, 0.3338], [0.3338, 0.4387]], [[0.6503, 0.3455], [0.3455, 0.461]], [[0.6311, 0.336], [0.336, 0.4563]], [[0.6428, 0.3381], [0.3381, 0.4441]], [[0.6588, 0.3462], [0.3462, 0.4646]], [[0.6267, 0.3418], [0.3418, 0.5019]], [[0.655, 0.3582], [0.3582, 0.5061]], [[0.6345, 0.3455], [0.3455, 0.521]], [[0.6525, 0.3698], [0.3698, 0.5741]], [[0.6252, 0.3281], [0.3281, 0.4766]], [[0.653, 0.3369], [0.3369, 0.4416]], [[0.6421, 0.3471], [0.3471, 0.4574]], [[0.7034, 0.385], [0.385, 0.4552]], [[0.704, 0.3984], [0.3984, 0.4919]], [[0.703, 0.4116], [0.4116, 0.5525]], [[0.6545, 0.3654], [0.3654, 0.5652]], [[0.6973, 0.3927], [0.3927, 0.5356]], [[0.7142, 0.4125], [0.4125, 0.5293]], [[0.7214, 0.425], [0.425, 0.5591]], [[0.7179, 0.4063], [0.4063, 0.4869]], [[0.6875, 0.3654], [0.3654, 0.4055]], [[0.6805, 0.3744], [0.3744, 0.4639]], [[0.6937, 0.4015], [0.4015, 0.6053]], [[0.7629, 0.3958], [0.3958, 0.3911]], [[0.8204, 0.4862], [0.4862, 0.6823]], [[0.8362, 0.4423], [0.4423, 0.4399]], [[0.7408, 0.3917], [0.3917, 0.5312]], [[0.7469, 0.3936], [0.3936, 0.4771]], [[0.7628, 0.392], [0.392, 0.421]], [[0.8553, 0.4873], [0.4873, 0.6626]], [[0.7761, 0.404], [0.404, 0.4889]], [[0.7557, 0.3822], [0.3822, 0.4128]], [[0.7115, 0.3598], [0.3598, 0.5135]], [[0.7915, 0.4194], [0.4194, 0.579]], [[0.8096, 0.4143], [0.4143, 0.4886]], [[0.7852, 0.4051], [0.4051, 0.4842]], [[0.7768, 0.3913], [0.3913, 0.5794]], [[0.74, 0.3629], [0.3629, 0.5381]], [[0.7428, 0.3536], [0.3536, 0.491]], [[0.7221, 0.3288], [0.3288, 0.465]], [[0.7119, 0.3238], [0.3238, 0.4582]], [[0.7613, 0.3628], [0.3628, 0.5558]], [[0.7507, 0.3513], [0.3513, 0.6092]], [[0.7475, 0.3442], [0.3442, 0.5611]], [[0.7565, 0.3339], [0.3339, 0.4577]], [[0.6998, 0.2978], [0.2978, 0.4575]], [[0.7096, 0.2903], [0.2903, 0.4467]], [[0.692, 0.2935], [0.2935, 0.4165]], [[0.7202, 0.3348], [0.3348, 0.5305]], [[0.7021, 0.3113], [0.3113, 0.5828]], [[0.6927, 0.3088], [0.3088, 0.6239]]]
        }
    };
});
define("view/histogram", ["require", "exports", "model/bins", "d3", "jquery"], function (require, exports, bins_2, d3, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGHistogram {
        constructor(name, svgElement, model, conf) {
            this.svg = svgElement;
            this.model = model;
            this.conf = conf;
            this.fixed = false;
            this.name = name;
            this.model.addListener(this);
            this.refresh();
        }
        refresh() {
            if (this.fixed) {
                return;
            }
            let pad = this.conf.padding;
            let svgWidth = $(this.svg).width();
            let svgHeight = $(this.svg).height();
            let viewBoxSideLength = Math.min(svgWidth, svgHeight) - 2 * pad;
            let xOffset = (svgWidth - viewBoxSideLength) / 2;
            let yOffset = (svgHeight - viewBoxSideLength) / 2;
            let scale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxSideLength]);
            let s = scale.invert(viewBoxSideLength / this.model.numBins());
            this.s = s;
            this.pad = pad;
            this.width = svgWidth;
            this.height = svgHeight;
            this.viewBoxSideLength = viewBoxSideLength;
            this.xOffset = xOffset;
            this.yOffset = yOffset;
            let colors = this.conf.colors[this.name];
            if (colors == undefined) {
                colors = this.conf.colors["default"];
            }
            function absX(relX) {
                return xOffset + scale(relX);
            }
            function invAbsX(absX) {
                return scale.invert(absX - xOffset - document.getElementById(this.svg).getBoundingClientRect().left);
            }
            function absY(relY) {
                return svgHeight - yOffset - scale(relY);
            }
            d3.select(this.svg)
                .selectAll(".bottomBorder")
                .attr("x", absX(0))
                .attr("y", absY(0))
                .attr("height", scale(0.5))
                .attr("width", viewBoxSideLength)
                .attr("fill", this.conf.colors["border"][0])
                .attr("rx", 0.2 * s);
            var allItems = [].concat(...this.model.bins());
            d3.select(this.svg)
                .selectAll("." + this.name)
                .remove();
            d3.select(this.svg)
                .selectAll("rect ." + this.name)
                .data(allItems)
                .enter()
                .append("rect")
                .attr("class", this.name)
                .attr("width", scale(s * 0.85))
                .attr("height", scale(s * 0.85))
                .attr("x", (d) => absX(d.x * s + s * 0.075))
                .attr("y", (d) => absY((d.y + 1) * s - s * 0.075))
                .attr("fill", (d) => colors[d.x % colors.length]);
        }
        fix() {
            this.fixed = true;
        }
        unfix() {
            this.fixed = false;
        }
    }
    exports.SVGHistogram = SVGHistogram;
    class SVGInteractiveHistogram extends SVGHistogram {
        constructor(name, svgElement, model, conf) {
            super(name, svgElement, model, conf);
            this.model.addListener(this);
            this.refresh();
            d3.select(this.svg)
                .append("text")
                .text("*")
                .attr("class", "colHighlight")
                .attr("text-anchor", "middle")
                .attr("dominant-baseline", "middle");
        }
        refresh() {
            super.refresh();
            let scale = d3.scaleLinear().domain([0, 100]).range([0, this.viewBoxSideLength]);
            let xOffset = this.xOffset;
            let yOffset = this.yOffset;
            let svgHeight = this.height;
            let id = this.svg;
            function absX(relX) {
                return xOffset + scale(relX);
            }
            function invAbsX(absX) {
                return scale.invert(absX - xOffset - $(id).position().left);
            }
            function absY(relY) {
                return svgHeight - yOffset - scale(relY);
            }
            d3.select(this.svg)
                .on("click", () => this.selectCol(Math.floor(invAbsX(d3.event.x) / this.s)));
            if (this.model.selectedBin() != -1) {
                let binHeight = this.model.getBin(this.model.selectedBin()).length;
                d3.select(this.svg)
                    .selectAll(".colHighlight")
                    .attr("x", (d) => absX(this.s * this.model.selectedBin() + 0.5 * this.s))
                    .attr("y", (d) => absY(this.s * binHeight))
                    .attr("style", "font-size: " + scale(this.s) + "px;");
            }
        }
        selectCol(bin) {
            this.model.selectBin(bin);
        }
        incrSelectedBin() {
            if (this.model.selectedBin() != -1) {
                let curItems = this.model.getBin(this.model.selectedBin()).length;
                if ((curItems + 1) * this.s < 100) {
                    this.model.addItem(this.model.selectedBin());
                }
            }
        }
        decrSelectedBin() {
            if (this.model.selectedBin() != -1) {
                let curItems = this.model.getBin(this.model.selectedBin()).length;
                if (curItems > 1) {
                    this.model.removeItem(this.model.selectedBin());
                }
            }
        }
    }
    exports.SVGInteractiveHistogram = SVGInteractiveHistogram;
    class SVGPhantomHistogram extends SVGHistogram {
        constructor(name, svgElement, model, phantom, conf) {
            super(name, svgElement, model, conf);
            this.model.addListener(this);
            this.phantom = phantom;
            this.phantom.addListener(this);
            this.refresh();
        }
        refresh() {
            let scale = d3.scaleLinear().domain([0, 100]).range([0, this.viewBoxSideLength]);
            let xOffset = this.xOffset;
            let yOffset = this.yOffset;
            let svgHeight = this.height;
            function absX(relX) {
                return xOffset + scale(relX);
            }
            function invAbsX(absX) {
                return scale.invert(absX - xOffset);
            }
            function absY(relY) {
                return svgHeight - yOffset - scale(relY);
            }
            if (this.phantom != undefined) {
                let pdata = this.phantom.bins().map((bin) => bin[bin.length - 1]);
                let mdata = this.model.bins().map((bin) => bin[bin.length - 1]);
                mdata = mdata.map((v, k) => (v == undefined) ? new bins_2.BinItem(k, -1, "") : v);
                d3.select(this.svg)
                    .selectAll(".phantomIndicator")
                    .remove();
                d3.select(this.svg)
                    .selectAll(".phantomIndicatorCover")
                    .remove();
                d3.select(this.svg)
                    .selectAll(".phantomIndicatorLine")
                    .remove();
                d3.select(this.svg)
                    .selectAll("rect .phantomIndicator")
                    .data(pdata)
                    .enter()
                    .append("rect")
                    .attr("x", (d) => absX(d.x * this.s + this.s * 0.025))
                    .attr("y", (d) => absY((d.y + 1) * this.s - this.s * 0.025))
                    .attr("width", (d) => scale(this.s * 0.95))
                    .attr("height", (d) => scale(this.s * 0.95 * 0.25))
                    .attr("fill", "#AAAAAA")
                    .attr("class", "phantomIndicator");
                d3.select(this.svg)
                    .selectAll("rect .phantomIndicatorCover")
                    .data(pdata)
                    .enter()
                    .append("rect")
                    .attr("x", (d) => absX(d.x * this.s + this.s * 0.075))
                    .attr("y", (d) => absY((d.y + 1) * this.s - this.s * 0.075))
                    .attr("width", (d) => scale(this.s * 0.85))
                    .attr("height", (d) => scale(this.s * 0.85))
                    .attr("fill", "#FFFFFF")
                    .attr("class", "phantomIndicator");
                let overModelIdxs = Array.from({ length: pdata.length }, (v, k) => k).filter((v, k) => pdata[k].y > mdata[k].y);
                d3.select(this.svg)
                    .selectAll("line .phantomIndicatorLine")
                    .data(overModelIdxs)
                    .enter()
                    .append("line")
                    .attr("x1", (d) => absX(this.s * pdata[d].x + this.s / 2))
                    .attr("x2", (d) => absX(this.s * pdata[d].x + this.s / 2))
                    .attr("y1", (d) => absY(this.s * (mdata[d].y + 1) - 0.075 * this.s))
                    .attr("y2", (d) => absY(this.s * (pdata[d].y + 1) - 0.075 * this.s))
                    .attr("stroke", "#DDDDDD")
                    .attr("class", "phantomIndicatorLine");
            }
            super.refresh();
        }
    }
    exports.SVGPhantomHistogram = SVGPhantomHistogram;
});
define("model/trees", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class TreeNode {
        static fullTree(d) {
            if (d <= 1) {
                return new TreeLeaf();
            }
            else {
                return new TreeNode(this.fullTree(d - 1), this.fullTree(d - 1));
            }
        }
        static huffTree(binModel, requiredDepth) {
            let bins = binModel.bins();
            let total = bins.reduce((prev, cur) => prev + cur.length, 0);
            let binFreqs = bins.map((k) => k.length / total);
            let binNodes = Array.from({ length: bins.length }, (v, k) => {
                let tl = new TreeLeaf();
                tl.itemType = String(k);
                return tl;
            });
            let binSortKeys = Array.from({ length: bins.length }, (v, k) => [0, k]);
            let sort = function () {
                let idxs = Array.from({ length: binFreqs.length }, (v, k) => k);
                idxs.sort((a, b) => {
                    return (binFreqs[b] - binFreqs[a] != 0) ? (binFreqs[b] - binFreqs[a]) : (b - a);
                });
                let newBinFreqs = Array.from({ length: binFreqs.length }, (v, k) => binFreqs[idxs[k]]);
                let newBinNodes = Array.from({ length: binNodes.length }, (v, k) => binNodes[idxs[k]]);
                let newBinSortKeys = Array.from({ length: binSortKeys.length }, (v, k) => binSortKeys[idxs[k]]);
                binFreqs = newBinFreqs;
                binNodes = newBinNodes;
                binSortKeys = newBinSortKeys;
            };
            while (binFreqs.length > 1) {
                sort();
                binFreqs.push(binFreqs.pop() + binFreqs.pop());
                let a = binNodes.pop();
                let ak = binSortKeys.pop();
                let b = binNodes.pop();
                let bk = binSortKeys.pop();
                if (ak[0] < bk[0]) {
                    let lk = [ak[0] + 1, ak[1]];
                    binNodes.push(new TreeNode(b, a));
                    binSortKeys.push(lk);
                }
                else if (ak[0] > bk[0]) {
                    let lk = [bk[0] + 1, bk[1]];
                    binNodes.push(new TreeNode(a, b));
                    binSortKeys.push(lk);
                }
                else {
                    if (ak[1] > bk[1]) {
                        let lk = [ak[0] + 1, ak[1]];
                        binNodes.push(new TreeNode(b, a));
                        binSortKeys.push(lk);
                    }
                    else {
                        let lk = [bk[0] + 1, bk[1]];
                        binNodes.push(new TreeNode(a, b));
                        binSortKeys.push(lk);
                    }
                }
            }
            let huffTree = binNodes[0];
            let depth = huffTree.depth();
            if (requiredDepth != undefined) {
                depth = Math.max(depth, requiredDepth);
            }
            let balance = (layerIdx, nodeIdx, node) => {
                if (node.left().itemType && depth - (layerIdx + 1) > 1) {
                    let target = TreeNode.fullTree(depth - (layerIdx + 1));
                    let type = "c" + node.left().itemType;
                    target.treeMap((l, k, n) => { n.itemType = type; }, (l, k, n) => { n.itemType = type; });
                    target.itemType = node.left().itemType;
                    node.leftChild = target;
                }
                if (node.right().itemType && depth - (layerIdx + 1) > 1) {
                    let target = TreeNode.fullTree(depth - (layerIdx + 1));
                    let type = "c" + node.right().itemType;
                    target.treeMap((l, k, n) => { n.itemType = type; }, (l, k, n) => { n.itemType = type; });
                    target.itemType = node.right().itemType;
                    node.rightChild = target;
                }
            };
            huffTree.treeMap(balance, x => x);
            return huffTree;
        }
        constructor(leftChild, rightChild) {
            this.leftChild = leftChild;
            this.rightChild = rightChild;
            this.updateState();
        }
        addListener(listener) {
            this.listeners.push(listener);
        }
        refresh() {
            this.listeners.forEach((listener) => listener.refresh());
        }
        numLeaves() {
            return this.leafs;
        }
        depth() {
            return this.d;
        }
        layer(n) {
            if (n == 0) {
                return [this];
            }
            else {
                return this.leftChild.layer(n - 1).concat(this.rightChild.layer(n - 1));
            }
        }
        left() {
            return this.leftChild;
        }
        right() {
            return this.rightChild;
        }
        updateState() {
            this.leafs = this.leftChild.numLeaves() + this.rightChild.numLeaves();
            this.d = 1 + Math.max(this.leftChild.depth(), this.rightChild.depth());
        }
        _treeMap(layerIdx, nodeIdx, nodeFn, leafFn) {
            this.leftChild._treeMap(layerIdx + 1, 2 * nodeIdx, nodeFn, leafFn);
            this.rightChild._treeMap(layerIdx + 1, 2 * nodeIdx + 1, nodeFn, leafFn);
            nodeFn(layerIdx, nodeIdx, this);
            this.updateState();
        }
        treeMap(nodeFn, leafFn) {
            this._treeMap(0, 0, nodeFn, leafFn);
        }
    }
    exports.TreeNode = TreeNode;
    class TreeLeaf {
        addListener(listener) {
            this.listeners.push(listener);
        }
        refresh() {
            this.listeners.forEach((listener) => listener.refresh());
        }
        numLeaves() {
            return 1;
        }
        depth() {
            return 1;
        }
        layer(n) {
            if (n == 0) {
                return [this];
            }
            else {
                return [];
            }
        }
        _treeMap(layerIdx, nodeIdx, nodeFn, leafFn) {
            leafFn(layerIdx, nodeIdx, this);
        }
        treeMap(nodeFn, leafFn) {
            this._treeMap(0, 0, nodeFn, leafFn);
        }
    }
    exports.TreeLeaf = TreeLeaf;
});
define("view/binarytree", ["require", "exports", "model/trees", "d3", "jquery"], function (require, exports, trees_1, d3, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGBinaryTree {
        constructor(svgElement, initialDepth, conf) {
            this.svg = svgElement;
            this.tree = trees_1.TreeNode.fullTree(initialDepth);
            this.conf = conf;
            this.nodeColor = () => "#000";
            this.leafColor = () => "#000";
        }
        colorMap(nodeColor, leafColor) {
            this.nodeColor = (layerIdx, nodeIdx, node) => {
                node.color = nodeColor(layerIdx, nodeIdx, node);
            };
            this.leafColor = (layerIdx, nodeIdx, leaf) => {
                leaf.color = leafColor(layerIdx, nodeIdx, leaf);
            };
            this.refresh();
        }
        setDepth(n) {
            this.tree = trees_1.TreeNode.fullTree(n);
            this.refresh();
        }
        setTree(tree) {
            this.tree = tree;
            this.refresh();
        }
        highlightNode(layerIdx, nodeIdx) {
            this.attnNode = [layerIdx, nodeIdx];
            this.refresh();
        }
        refresh() {
            let numLeafs = this.tree.numLeaves();
            let itemSize = 100 / (2 * numLeafs - 1);
            let svgWidth = $(this.svg).width();
            let svgHeight = $(this.svg).height();
            let pad = this.conf.padding + (svgWidth / (2 * numLeafs - 1)) / 2;
            let viewBoxWidth = svgWidth - 2 * pad;
            let viewBoxHeight = svgHeight - 2 * pad;
            let wScale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxWidth]);
            let hScale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxHeight]);
            this.numLeafs = numLeafs;
            this.nodeRadius = hScale(itemSize / 2);
            this.width = svgWidth;
            this.height = svgHeight;
            this.viewBoxWidth = viewBoxWidth;
            this.viewBoxHeight = viewBoxHeight;
            function absX(relX) {
                return pad + wScale(relX);
            }
            function absY(relY) {
                return pad + hScale(relY);
            }
            let d = this.tree.depth();
            this.tree.treeMap((layerIdx, nodeIdx, node) => {
                node.x = (node.left().x + node.right().x) / 2;
                node.y = 100 * (d - (layerIdx + 1)) / d;
            }, (layerIdx, nodeIdx, leaf) => {
                leaf.x = 2 * nodeIdx * itemSize;
                leaf.y = 0;
            });
            d3.select(this.svg)
                .selectAll("#treeItem")
                .remove();
            d3.select(this.svg)
                .selectAll("#treeEdge")
                .remove();
            function isChildFn(targetLayer, targetNode) {
                return (layerIdx, nodeIdx) => {
                    let diff = targetLayer - layerIdx;
                    return diff >= 0 && Math.floor(targetNode / (Math.pow(2, diff))) == nodeIdx;
                };
            }
            let childCheck = (this.attnNode != undefined) ? isChildFn(this.attnNode[0], this.attnNode[1]) : () => false;
            function addEdge(svg, parent, child, cLayer, cIndex) {
                let pLayer = cLayer - 1;
                let pIndex = Math.floor(cIndex / 2);
                let highlight = (childCheck(pLayer, pIndex) && childCheck(cLayer, cIndex));
                let color = highlight ? "#0074D9" : "gray";
                let width = highlight ? hScale(itemSize / 3) : hScale(itemSize / 5);
                d3.select(svg)
                    .append("line")
                    .attr("id", "treeEdge")
                    .attr("x1", (d) => absX(parent.x + itemSize / 2))
                    .attr("x2", (d) => absX(child.x + itemSize / 2))
                    .attr("y1", (d) => absY(parent.y + itemSize / 2))
                    .attr("y2", (d) => absY(child.y + itemSize / 2))
                    .attr("stroke-width", width)
                    .attr("stroke", color);
            }
            this.tree.treeMap(this.nodeColor, this.leafColor);
            this.tree.treeMap((layerIdx, nodeIdx, node) => {
                addEdge(this.svg, node, node.left(), layerIdx + 1, 2 * nodeIdx);
                addEdge(this.svg, node, node.right(), layerIdx + 1, 2 * nodeIdx + 1);
            }, (layerIdx, leaf) => { });
            this.tree._treeMap(0, 0, (layerIdx, nodeIdx, node) => {
                d3.select(this.svg)
                    .append("circle")
                    .data([node])
                    .attr("id", "treeItem")
                    .attr("r", wScale(itemSize / 2))
                    .attr("cx", (d) => absX(d.x + itemSize / 2))
                    .attr("cy", (d) => absY(d.y + itemSize / 2))
                    .attr("fill", (d) => d.color)
                    .attr("stroke", (d) => childCheck(layerIdx, nodeIdx) ? "#0074D9" : "#000")
                    .attr("stroke-width", (d) => childCheck(layerIdx, nodeIdx) ? 3 : 1);
            }, (layerIdx, nodeIdx, leaf) => {
                d3.select(this.svg)
                    .append("circle")
                    .data([leaf])
                    .attr("id", "treeItem")
                    .attr("r", wScale(itemSize / 2))
                    .attr("cx", (d) => absX(d.x + itemSize / 2))
                    .attr("cy", (d) => absY(d.y + itemSize / 2))
                    .attr("fill", (d) => d.color)
                    .attr("stroke", (d) => childCheck(layerIdx, nodeIdx) ? "#0074D9" : "#000")
                    .attr("stroke-width", childCheck(layerIdx, nodeIdx) ? 3 : 1);
            });
        }
    }
    exports.SVGBinaryTree = SVGBinaryTree;
});
define("view/entropy", ["require", "exports", "model/trees", "view/histogram", "view/binarytree", "d3", "jquery"], function (require, exports, trees_2, histogram_1, binarytree_1, d3, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGSoloEntropy {
        constructor(divElement, model, conf) {
            this.conf = conf;
            let defaultIDs = ["svgHist", "svgBar", "svgTree"];
            this.div = divElement;
            this.svgHist = divElement + " > #" + defaultIDs[0];
            this.svgBar = divElement + " > #" + defaultIDs[1];
            this.svgTree = divElement + " > #" + defaultIDs[2];
            let d = d3.select(divElement);
            d.append("svg").attr("id", defaultIDs[0]);
            d.append("br");
            d.append("svg").attr("id", defaultIDs[1]);
            d.append("br");
            d.append("svg").attr("id", defaultIDs[2]);
            this.model = model;
            this.tree = new binarytree_1.SVGBinaryTree(this.svgTree, 0, conf);
            this.hist = new histogram_1.SVGInteractiveHistogram("entHist", this.svgHist, this.model, conf);
            this.model.addListener(this);
        }
        refresh() {
            let svgHeight = $(this.div).height();
            let sideLens = [svgHeight * (7 / 16), svgHeight * (1 / 8), svgHeight * (7 / 16)];
            d3.select(this.svgHist).attr("height", sideLens[0]).attr("width", sideLens[0]);
            d3.select(this.svgBar).attr("height", sideLens[1]).attr("width", sideLens[0]);
            d3.select(this.svgTree).attr("height", sideLens[2]).attr("width", sideLens[2]);
            let selectedBin = this.model.selectedBin();
            if (selectedBin != -1 && this.model.getBin(selectedBin).length > 0) {
                d3.select(this.svgTree).attr("style", "display: initial");
                d3.select(this.svgBar).attr("style", "display: initial");
                let items = this.model.getBin(selectedBin).length;
                let total = this.model.bins()
                    .reduce((running, cur) => (running + cur.length), 0);
                let distinct = total / items;
                let depth = Math.ceil(Math.log2(distinct)) + 1;
                this.tree.setDepth(depth);
                this.tree.refresh();
                let colors = this.conf.colors[this.hist.name];
                if (colors == undefined) {
                    colors = this.conf.colors["default"];
                }
                function isChildFn(targetLayer, targetNode) {
                    return (layerIdx, nodeIdx) => {
                        let diff = targetLayer - layerIdx;
                        return diff >= 0 && Math.floor(targetNode / (Math.pow(2, diff))) == nodeIdx;
                    };
                }
                let unit = 100 / (Math.pow(2, (depth - 1)));
                let markerLocs = Array.from({ length: (Math.pow(2, (depth - 1))) }, (value, key) => key * unit);
                let pad = this.conf.padding;
                let viewBoxHeight = sideLens[1] - 2 * pad;
                let viewBoxWidth = sideLens[0] - 2 * pad;
                let hScale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxHeight]);
                let wScale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxWidth]);
                function absX(relX) {
                    return pad + wScale(relX);
                }
                function absY(relY) {
                    return pad + hScale(relY);
                }
                d3.select(this.svgBar)
                    .selectAll("rect, line")
                    .remove();
                d3.select(this.svgBar)
                    .selectAll("rect")
                    .data(markerLocs)
                    .enter()
                    .append("rect")
                    .attr("x", (d) => absX(d))
                    .attr("y", absY(0))
                    .attr("width", wScale(unit))
                    .attr("height", hScale(100))
                    .attr("fill", (d) => (d == 0 ? colors[selectedBin % colors.length] : "#FFF"))
                    .attr("stroke", "#000")
                    .attr("stroke-width", sideLens[1] / 40);
            }
            else {
                d3.select(this.svgTree).attr("style", "display: none;");
                d3.select(this.svgBar).attr("style", "display: none;");
            }
            this.hist.refresh();
        }
    }
    exports.SVGSoloEntropy = SVGSoloEntropy;
    class SVGEntropy {
        constructor(divElement, model, conf) {
            this.conf = conf;
            let defaultIDs = ["svgHist", "svgTree"];
            this.div = divElement;
            this.svgHist = divElement + " > #" + defaultIDs[0];
            this.svgTree = divElement + " > #" + defaultIDs[1];
            let d = d3.select(divElement);
            d.append("svg").attr("id", defaultIDs[0]);
            d.append("svg").attr("id", defaultIDs[1]);
            this.model = model;
            this.tree = new binarytree_1.SVGBinaryTree(this.svgTree, 0, conf);
            this.hist = new histogram_1.SVGHistogram("entHist", this.svgHist, this.model, conf);
            this.model.addListener(this);
        }
        refresh() {
            let svgHeight = $(this.div).height();
            let svgWidth = $(this.div).width();
            d3.select(this.svgHist).attr("height", svgHeight / 2).attr("width", svgWidth);
            d3.select(this.svgTree).attr("height", svgHeight / 2).attr("width", svgWidth);
            d3.select(this.svgTree).attr("style", "display: initial");
            let colors = this.conf.colors[this.hist.name];
            if (colors == undefined) {
                colors = this.conf.colors["default"];
            }
            let h = trees_2.TreeNode.huffTree(this.model, this.targetDepth);
            this.tree.setTree(h);
            let color = (layerIdx, nodeIdx, node) => {
                if (node.itemType) {
                    if (node.itemType[0] == "c") {
                        let c = d3.color(colors[Number.parseInt(node.itemType[1]) % colors.length]);
                        c.opacity = 0.3;
                        return c.toString();
                    }
                    else {
                        return colors[Number.parseInt(node.itemType) % colors.length];
                    }
                }
                else {
                    return "#000";
                }
            };
            this.tree.colorMap(color, color);
            this.hist.refresh();
        }
        requireDepth(n) {
            this.targetDepth = n;
            this.refresh();
        }
        unsetDepth() {
            delete this.targetDepth;
            this.refresh();
        }
    }
    exports.SVGEntropy = SVGEntropy;
    class SVGInteractiveEntropy extends SVGEntropy {
        constructor(divElement, model, conf) {
            super(divElement, model, conf);
            this.hist = new histogram_1.SVGInteractiveHistogram("entHist", this.svgHist, this.model, conf);
        }
    }
    exports.SVGInteractiveEntropy = SVGInteractiveEntropy;
    class SVGIndicatorEntropy extends SVGInteractiveEntropy {
        constructor(divElement, model, conf) {
            super(divElement, model, conf);
            d3.select(this.svgTree)
                .append("line")
                .attr("id", "actualEntInd")
                .attr("x1", 0)
                .attr("x2", 0)
                .attr("y1", 0)
                .attr("y2", 0);
            d3.select(this.svgTree)
                .append("line")
                .attr("id", "realizedEntInd")
                .attr("x1", 0)
                .attr("x2", 0)
                .attr("y1", 0)
                .attr("y2", 0);
        }
        refresh() {
            super.refresh();
            if (this.model.selectedBin() != -1) {
                let treeModel = this.tree.tree;
                let binModel = this.model;
                let total = binModel.bins().reduce((p, c) => c.length + p, 0);
                let prob = binModel.bins().map(v => v.length / total);
                let binLayers = [];
                let treeFn = (layerIdx, nodeIdx, node) => {
                    if (node.itemType != undefined && node.itemType[0] != "c") {
                        binLayers.push([Number.parseInt(node.itemType), layerIdx]);
                    }
                };
                treeModel.treeMap(treeFn, treeFn);
                let actual = prob.reduce((p, c) => p + (c * Math.log2(1 / c)), 0);
                let realized = binLayers.reduce((p, c) => p + prob[c[0]] * c[1], 0);
                let pad = this.conf.padding + (this.tree.width / (2 * this.tree.numLeafs - 1)) / 2;
                let wScale = d3.scaleLinear().domain([0, 100]).range([0, this.tree.viewBoxWidth]);
                let hScale = d3.scaleLinear().domain([0, 100]).range([0, this.tree.viewBoxHeight]);
                let r = this.tree.nodeRadius;
                function absX(relX) {
                    return pad + wScale(relX);
                }
                function absY(relY) {
                    return pad + hScale(relY);
                }
                let d = treeModel.depth();
                d3.select("#actualEntInd")
                    .attr("x1", absX(0))
                    .attr("x2", absX(100))
                    .attr("y1", absY((100 / d) * (d - actual - 1)) + r)
                    .attr("y2", absY((100 / d) * (d - actual - 1)) + r)
                    .attr("stroke", "#AA2020")
                    .attr("stroke-width", "2px");
                d3.select("#realizedEntInd")
                    .attr("x1", absX(0))
                    .attr("x2", absX(100))
                    .attr("y1", absY((100 / d) * (d - realized - 1)) + r)
                    .attr("y2", absY((100 / d) * (d - realized - 1)) + r)
                    .attr("stroke", "#999")
                    .attr("stroke-width", "2px");
            }
        }
    }
    exports.SVGIndicatorEntropy = SVGIndicatorEntropy;
    class SVGInteractiveCrossEntropy {
        constructor(divElement, pModel, qModel, conf) {
            let defaultIDs = ["pEnt", "qEnt"];
            this.div = divElement;
            this.divSourceEnt = divElement + " > #" + defaultIDs[0];
            this.divTargetEnt = divElement + " > #" + defaultIDs[1];
            let d = d3.select(divElement);
            d.attr("class", "row");
            d.append("div").attr("id", defaultIDs[0]).attr("class", "col-6");
            d.append("div").attr("id", defaultIDs[1]).attr("class", "col-6");
            this.sourceModel = pModel;
            this.targetModel = qModel;
            this.conf = conf;
            this.sourceEnt = new SVGInteractiveEntropy(this.divSourceEnt, this.sourceModel, conf);
            this.targetEnt = new SVGEntropy(this.divTargetEnt, this.targetModel, conf);
            this.sourceModel.addListener(this);
            this.targetModel.addListener(this);
        }
        refresh() {
            let selectedBin = this.sourceModel.selectedBin();
            if (selectedBin != -1) {
                let findInTree = function (selectedBin, tree) {
                    let layerIdx = -1;
                    let nodeIdx = -1;
                    let d = 0;
                    while (d < tree.depth() && layerIdx == -1) {
                        let layer = tree.layer(d);
                        layer.forEach((v, i) => {
                            if (v.itemType == selectedBin + "") {
                                layerIdx = d;
                                nodeIdx = i;
                            }
                        });
                        d += 1;
                    }
                    return [layerIdx, nodeIdx];
                };
                let inSource = findInTree(selectedBin, this.sourceEnt.tree.tree);
                let inTarget = findInTree(selectedBin, this.targetEnt.tree.tree);
                if (inSource[0] == -1 || inTarget[0] == -1) {
                    this.sourceEnt.refresh();
                    this.targetEnt.refresh();
                    return;
                }
                this.sourceEnt.tree.highlightNode(inSource[0], inSource[1]);
                this.targetEnt.tree.highlightNode(inTarget[0], inTarget[1]);
            }
            let sourceTree = trees_2.TreeNode.huffTree(this.sourceEnt.model);
            let targetTree = trees_2.TreeNode.huffTree(this.targetEnt.model);
            let d = Math.max(sourceTree.depth(), targetTree.depth());
            this.sourceEnt.requireDepth(d);
            this.targetEnt.requireDepth(d);
            this.sourceEnt.refresh();
            this.targetEnt.refresh();
        }
    }
    exports.SVGInteractiveCrossEntropy = SVGInteractiveCrossEntropy;
});
define("view/heatmap", ["require", "exports", "d3"], function (require, exports, d3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGHeatmap {
        constructor(svgElement, model, conf) {
            this.svg = svgElement;
            this.model = model;
            this.conf = conf;
            this.model.addListener(this);
        }
        refresh() {
            let pad = this.conf.padding;
            let svgWidth = $(this.svg).width();
            let svgHeight = $(this.svg).height();
            let viewBoxSideLength = Math.min(svgWidth, svgHeight) - 2 * pad;
            let xOffset = (svgWidth - viewBoxSideLength) / 2;
            let yOffset = (svgHeight - viewBoxSideLength) / 2;
            let scale = d3.scaleLinear().domain([0, 100]).range([0, viewBoxSideLength]);
            let s = scale.invert(viewBoxSideLength / this.model.sideLength());
            this.pad = pad;
            this.width = svgWidth;
            this.height = svgHeight;
            this.viewBoxSideLength = viewBoxSideLength;
            this.xOffset = xOffset;
            this.yOffset = yOffset;
            function absR(relR) {
                return yOffset + scale(relR);
            }
            function absC(relC) {
                return xOffset + scale(relC);
            }
            let allCells = [].concat(...this.model.rows());
            let max = allCells.reduce((prev, cur) => Math.max(prev, cur.quantity), -Infinity);
            let selectedCol = this.model.selectedCol();
            d3.select(this.svg)
                .selectAll("rect")
                .remove();
            d3.select(this.svg)
                .selectAll("rect")
                .data(allCells)
                .enter()
                .append("rect")
                .attr("x", (d) => absC(d.c * s + 0.075 * s))
                .attr("y", (d) => absR(d.r * s + 0.075 * s))
                .attr("width", (d) => scale(s * 0.85))
                .attr("height", (d) => scale(s * 0.85))
                .attr("fill", (d) => d3.interpolateBlues(0.1 + 0.9 * (d.quantity / max)))
                .attr("stroke", (d) => selectedCol != -1 && d.c == selectedCol ? "#222" : "none");
        }
    }
    exports.SVGHeatmap = SVGHeatmap;
});
define("view/transport", ["require", "exports", "view/histogram", "view/heatmap", "model/heatmap", "d3"], function (require, exports, histogram_2, heatmap_1, heatmap_2, d3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGTransport {
        constructor(divElement, model, conf) {
            this.conf = conf;
            this.div = divElement;
            let defaultIds = ["svgRowHist", "svgColHist"];
            this.svgRowHist = this.div + " > #" + defaultIds[0];
            this.svgColHist = this.div + " > #" + defaultIds[1];
            this.svgColOverlay = this.div + " > #" + defaultIds[1];
            let d = d3.select(this.div);
            d.append("svg").attr("id", defaultIds[0]);
            d.append("svg").attr("id", defaultIds[1]);
            this.model = model;
            this.rslice = new heatmap_2.UnnormalizedMatrixSlice(this.model, heatmap_2.Slice.ROWS);
            this.cslice = new heatmap_2.UnnormalizedMatrixSlice(this.model, heatmap_2.Slice.COLS);
            this.colslices = Array.from({ length: this.model.sideLength() }, (v, k) => new heatmap_2.UnnormalizedMatrixSlice(this.model, heatmap_2.Slice.COL, k));
            this.rowHist = new histogram_2.SVGInteractiveHistogram("rowHist", this.svgRowHist, this.rslice, this.conf);
            this.colHist = new histogram_2.SVGHistogram("colHist", this.svgColHist, this.cslice, this.conf);
            this.model.addListener(this);
        }
        refresh() {
            let svgHeight = $(this.div).height();
            let svgWidth = $(this.div).width();
            let sideLength = Math.min((1 / 2) * svgWidth, svgHeight);
            d3.select(this.svgRowHist).attr("width", sideLength).attr("height", sideLength);
            d3.select(this.svgColHist).attr("width", sideLength).attr("height", sideLength);
            this.rowHist.refresh();
            this.colHist.refresh();
            if (this.model.selectedCol() != -1) {
                let slice = this.colslices[this.model.selectedCol()];
                this.colOverlay = new histogram_2.SVGHistogram("colOverlay", this.svgColOverlay, slice, this.conf);
                this.colOverlay.refresh();
            }
        }
    }
    exports.SVGTransport = SVGTransport;
    class SVGTransportMatrix extends SVGTransport {
        constructor(divElement, model, conf) {
            super(divElement, model, conf);
            let defaultId = "svgHeatmap";
            this.svgHeatMap = this.div + " > #" + defaultId;
            d3.select(this.div)
                .insert("br", this.svgColHist);
            d3.select(this.div)
                .insert("svg", this.svgColHist)
                .attr("id", defaultId);
            d3.select(this.svgColHist)
                .attr("style", "transform: rotate(90deg)");
            this.heatmap = new heatmap_1.SVGHeatmap(this.svgHeatMap, this.model, this.conf);
        }
        refresh() {
            let svgHeight = $(this.div).height();
            let svgWidth = $(this.div).width();
            let boxHeight = Math.min(svgHeight / 2, svgWidth / 2);
            d3.select(this.svgRowHist).attr("width", boxHeight).attr("height", boxHeight);
            d3.select(this.svgHeatMap).attr("width", boxHeight).attr("height", boxHeight);
            d3.select(this.svgColHist).attr("width", boxHeight).attr("height", boxHeight);
            this.rowHist.refresh();
            this.colHist.refresh();
            this.heatmap.refresh();
            if (this.model.selectedCol() != -1) {
                let slice = this.colslices[this.model.selectedCol()];
                this.colOverlay = new histogram_2.SVGHistogram("colOverlay", this.svgColOverlay, slice, this.conf);
                this.colOverlay.refresh();
            }
        }
    }
    exports.SVGTransportMatrix = SVGTransportMatrix;
    class SVGIndicatorTransport extends SVGTransport {
        constructor(divElement, model, conf) {
            super(divElement, model, conf);
            let defaultId = "arrowBar";
            this.svgArrowBar = this.div + " > #" + defaultId;
            d3.select(this.div)
                .append("svg")
                .attr("id", defaultId);
            let defs = d3.select(this.svgArrowBar).append("defs");
            defs.append("marker")
                .attr("id", "arrow")
                .attr("viewBox", "0 -5, 10, 10")
                .attr("refX", 5)
                .attr("refY", 0)
                .attr("markerWidth", 4)
                .attr("markerHeight", 4)
                .attr("orient", "auto")
                .append("path")
                .attr("d", "M0,-5L10,0L0,5");
        }
        refresh() {
            super.refresh();
            let svgWidth = $(this.div).width();
            let svgHeight = $(this.div).height();
            let height = svgHeight / 5;
            d3.select(this.svgArrowBar)
                .attr("width", svgWidth)
                .attr("height", height);
            if (this.rslice.selectedBin() != -1) {
                d3.select(this.svgArrowBar)
                    .selectAll(".arrowIndicator")
                    .remove();
                let width = this.colHist.viewBoxSideLength;
                let colxOffset = this.colHist.xOffset;
                let rowxOffset = this.rowHist.xOffset;
                let s = this.colHist.s;
                let pad = this.conf.padding;
                let arrowBar = this.svgArrowBar;
                let arrow = function (sBin, eBin) {
                    let wScale = d3.scaleLinear().domain([0, 100]).range([0, width]);
                    let start = colxOffset + wScale(s * sBin + 0.5 * s);
                    let end = width + 2 * pad + rowxOffset + wScale(s * eBin + 0.5 * s);
                    let p = `M${start},0  L ${start},20 L ${end},20 L ${end},5`;
                    d3.select(arrowBar)
                        .append("path")
                        .attr("d", p)
                        .attr("class", "arrowIndicator")
                        .attr("stroke", "#000")
                        .attr("stroke-width", 2)
                        .attr("fill", "none")
                        .attr("marker-end", "url(#arrow)");
                };
                let sBin = this.rslice.selectedBin();
                let slice = this.colslices[sBin];
                slice.bins().forEach((i) => i.length > 0 ? arrow(sBin, i[0].x) : "");
            }
        }
    }
    exports.SVGIndicatorTransport = SVGIndicatorTransport;
});
define("model/gaussian", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class Gaussian2D {
        constructor(mean, cov) {
            this.listeners = [];
            this.assign(mean, cov);
        }
        refresh() {
            this.listeners.forEach((l) => l.refresh());
        }
        addListener(listener) {
            this.listeners.push(listener);
        }
        assign(mean, cov) {
            if (mean.length != 2) {
                throw RangeError("Mean must be a length 2 array");
            }
            if (cov.length != 2 || cov[0].length != 2 || cov[1].length != 2) {
                throw RangeError("Covariance must be a 2x2 array");
            }
            this.mean = mean;
            this.cov = cov;
            let tr = cov[0][0] + cov[1][1];
            let det = (cov[0][0] * cov[1][1]) - (cov[0][1] * cov[1][0]);
            let e1 = (tr + Math.sqrt((tr * tr) - 4 * det)) / 2;
            let e2 = (tr - Math.sqrt((tr * tr) - 4 * det)) / 2;
            let v1 = [0, 0];
            let v2 = [0, 0];
            if (cov[0][1] == 0 && cov[1][0] == 0) {
                v1 = [1, 0];
                v2 = [0, 1];
            }
            else if (cov[0][1] == 0) {
                v1 = [e1 - cov[1][1], cov[1][0]];
                v2 = [e2 - cov[1][1], cov[1][0]];
            }
            else {
                v1 = [cov[0][1], e1 - cov[0][0]];
                v2 = [cov[0][1], e2 - cov[0][0]];
            }
            let v1_mag = Math.sqrt((v1[0] * v1[0] + v1[1] * v1[1]));
            let v2_mag = Math.sqrt((v2[0] * v2[0] + v2[1] * v2[1]));
            v1 = [v1[0] / v1_mag, v1[1] / v1_mag];
            v2 = [v2[0] / v2_mag, v2[1] / v2_mag];
            if (e2 > e1) {
                this.eigvals = [e2, e1];
                this.eigvecs = [v2, v1];
            }
            else {
                this.eigvals = [e1, e2];
                this.eigvecs = [v1, v2];
            }
            this.refresh();
        }
        eigenVectors() {
            return Array.from(this.eigvecs);
        }
        eigenValues() {
            return Array.from(this.eigvals);
        }
        meanVal() {
            return Array.from(this.mean);
        }
        covMatrix() {
            return Array.from(this.cov);
        }
    }
    exports.Gaussian2D = Gaussian2D;
});
define("view/gaussian", ["require", "exports", "model/gaussian", "d3", "jquery"], function (require, exports, gaussian_1, d3, $) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class SVGGaussian2D {
        constructor(name, svgElement, gaussian, bounds, conf) {
            this.name = name;
            this.svg = svgElement;
            this.gaussian = gaussian;
            this.conf = conf;
            this.bounds = bounds;
            gaussian.addListener(this);
            d3.select(this.svg)
                .append("text")
                .attr("id", "thetaLog");
        }
        refresh() {
            let pad = this.conf.padding;
            let svgWidth = $(this.svg).width();
            let svgHeight = $(this.svg).height();
            let viewBoxSideLength = Math.min(svgWidth, svgHeight) - 2 * pad;
            let xOffset = (svgWidth - viewBoxSideLength) / 2;
            let yOffset = (svgHeight - viewBoxSideLength) / 2;
            let wScale = d3.scaleLinear().domain([this.bounds[0][0], this.bounds[0][1]]).range([0, viewBoxSideLength]);
            let hScale = d3.scaleLinear().domain([this.bounds[1][0], this.bounds[1][1]]).range([0, viewBoxSideLength]);
            this.pad = pad;
            this.width = svgWidth;
            this.height = svgHeight;
            this.viewBoxSideLength = viewBoxSideLength;
            this.xOffset = xOffset;
            this.yOffset = yOffset;
            let gaussScale = 32;
            let colors = this.conf.colors[this.name];
            if (colors == undefined) {
                colors = this.conf.colors["default"];
            }
            function absX(relX) {
                return xOffset + wScale(relX);
            }
            function absY(relY) {
                return svgHeight - yOffset - hScale(relY);
            }
            let pcomponents = this.gaussian.eigenVectors();
            let mean = this.gaussian.meanVal();
            let v1 = pcomponents[0];
            let v2 = pcomponents[1];
            let pscales = this.gaussian.eigenValues();
            let rx = pscales[0];
            let ry = pscales[1];
            let angle = ((v1[0] == 0) ? Math.PI : -Math.atan(v1[1] / v1[0]));
            d3.select("#thetaLog")
                .text(180 * angle / Math.PI);
            let data = Array.from({ length: colors.length }, (v, k) => {
                k = colors.length - k - 1;
                return {
                    "cx": absX(mean[0]),
                    "cy": absY(mean[1]),
                    "rx": (rx * gaussScale * k),
                    "ry": (ry * gaussScale * k),
                    "theta": angle,
                    "color": colors[k],
                };
            });
            d3.select(this.svg)
                .selectAll("." + this.name)
                .remove();
            d3.select(this.svg)
                .selectAll(".levelCurve ." + this.name)
                .data(data)
                .enter()
                .append("ellipse")
                .attr("rx", (d) => d.rx)
                .attr("ry", (d) => d.ry)
                .attr("cx", (d) => d.cx)
                .attr("cy", (d) => d.cy)
                .attr("transform", (d) => "rotate(" + Math.floor(180 * d.theta / Math.PI) + " " + d.cx + " " + d.cy + ")")
                .attr("fill", (d) => d.color)
                .attr("class", "levelCurve " + this.name);
        }
        assign(mean, cov) {
            this.gaussian.assign(mean, cov);
        }
    }
    exports.SVGGaussian2D = SVGGaussian2D;
    class SVGAnimatedGaussian extends SVGGaussian2D {
        constructor(name, svgElement, fps, means, covs, bounds, conf) {
            super(name, svgElement, new gaussian_1.Gaussian2D(means[0], covs[0]), bounds, conf);
            this.means = means;
            this.covs = covs;
            this.fps = fps;
            this.frame = 0;
        }
        play() {
            let i = 0;
            this.timerId = setInterval(() => {
                if (this.frame >= this.means.length) {
                    this.pause();
                    this.reset();
                    return;
                }
                this.assign(this.means[this.frame], this.covs[this.frame]);
                this.frame++;
            }, 1000 / this.fps);
        }
        pause() {
            clearInterval(this.timerId);
            delete this.timerId;
        }
        reset() {
            this.frame = 0;
            this.assign(this.means[this.frame], this.covs[this.frame]);
        }
    }
    exports.SVGAnimatedGaussian = SVGAnimatedGaussian;
});
define("article", ["require", "exports", "d3", "jquery", "model/bins", "model/heatmap", "view/textbinder", "data", "view/histogram", "view/entropy", "view/transport", "view/gaussian", "model/model"], function (require, exports, d3, $, bins_3, heatmap_3, textbinder_1, data_1, histogram_3, entropy_1, transport_1, gaussian_2, model_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    let colors = {
        "border": ["#505050",],
        "default": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
        "rowHist": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
        "colHist": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
        "colOverlay": ["#000"]
    };
    let attnHash = {};
    let attn = undefined;
    const conf = new model_1.CONF(8, colors, 5);
    function main() {
        setupIntro();
    }
    exports.main = main;
    function setAttn(id) {
        attn = attnHash[id];
    }
    function registerAttn(id, m) {
        attnHash[id] = m;
        $(id).click(() => setAttn(id));
    }
    function userInput(dir) {
        if (attn) {
            attn(dir);
        }
    }
    function setupIntro() {
        document.addEventListener("keydown", event => {
            switch (event.key.toLowerCase()) {
                case ("h"):
                case ("a"):
                case ("arrowleft"):
                    userInput("left");
                    break;
                case ("l"):
                case ("d"):
                case ("arrowright"):
                    userInput("right");
                    break;
                case ("k"):
                case ("w"):
                case ("arrowup"):
                    userInput("up");
                    break;
                case ("j"):
                case ("s"):
                case ("arrowdown"):
                    userInput("down");
                    break;
            }
        });
        $("h1").on("swiperight", () => { alert("foo"); userInput("right"); });
        $(".container").on("swipeleft", () => { alert("foo2"); userInput("left"); });
        $(".container").on("swipeup", () => userInput("up"));
        $(".container").on("swipedown", () => userInput("down"));
        let cNames = [".maroon", ".red", ".orange", ".yellow", ".lime", ".green", ".blue", ".violet"];
        let colors = Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7));
        cNames.forEach((sel, i) => {
            d3.selectAll(".box" + sel)
                .append("rect")
                .attr("fill", colors[i])
                .attr("width", "100%")
                .attr("height", "100%");
        });
        let mLeft1 = bins_3.Histogram.fromArray(data_1.chisqr1["leftHistBins"]);
        let mRight1 = bins_3.Histogram.fromArray(data_1.chisqr1["rightHistBins"]);
        let hLeft1 = new histogram_3.SVGPhantomHistogram("chisqr-hist-1-left", "#chisqr-1-left-svg", mLeft1, mRight1, conf);
        let hRight1 = new histogram_3.SVGPhantomHistogram("chisqr-hist-1-right", "#chisqr-1-right-svg", mRight1, mLeft1, conf);
        hLeft1.refresh();
        hRight1.refresh();
        let chisqrval = new textbinder_1.LooseTextBinder("#chisqr-1-val", [mLeft1, mRight1], function (m) {
            let test = (a, b) => { return Math.pow((a - b), 2) / b; };
            let c = Array.from({ length: m[0].numBins() }, (v, k) => test(m[0].getBin(k).length, m[1].getBin(k).length))
                .reduce((prev, cur) => prev + cur, 0);
            return "" + Math.round(c * 100) / 100;
        });
        mLeft1.addListener(chisqrval);
        let mLeft2 = bins_3.Histogram.fromArray(data_1.chisqr2["leftHistBins"]);
        let mCenter2 = bins_3.Histogram.fromArray(data_1.chisqr2["centerHistBins"]);
        let mRight2 = bins_3.Histogram.fromArray(data_1.chisqr2["rightHistBins"]);
        let hLeft2 = new histogram_3.SVGPhantomHistogram("chisqr-hist-2-left", "#chisqr-2-left-svg", mLeft2, mCenter2, conf);
        let hCenter2 = new histogram_3.SVGHistogram("chisqr-hist-2-center", "#chisqr-2-center-svg", mCenter2, conf);
        let hRight2 = new histogram_3.SVGPhantomHistogram("chisqr-hist-2-right", "#chisqr-2-right-svg", mRight2, mCenter2, conf);
        hLeft2.refresh();
        hCenter2.refresh();
        hRight2.refresh();
        let chisqrvalL = new textbinder_1.LooseTextBinder("#chisqr-2-left-val", [mLeft2, mCenter2], function (m) {
            let test = (a, b) => { return Math.pow((a - b), 2) / b; };
            let c = Array.from({ length: m[0].numBins() }, (v, k) => test(m[0].getBin(k).length, m[1].getBin(k).length))
                .reduce((prev, cur) => prev + cur, 0);
            return "" + Math.round(c * 100) / 100;
        });
        let chisqrvalR = new textbinder_1.LooseTextBinder("#chisqr-2-right-val", [mRight2, mCenter2], function (m) {
            let test = (a, b) => { return Math.pow((a - b), 2) / b; };
            let c = Array.from({ length: m[0].numBins() }, (v, k) => test(m[0].getBin(k).length, m[1].getBin(k).length))
                .reduce((prev, cur) => prev + cur, 0);
            return "" + Math.round(c * 100) / 100;
        });
        mLeft2.addListener(chisqrvalL);
        mRight2.addListener(chisqrvalR);
        let mSimpleHist = bins_3.Histogram.fromArray(data_1.simpleHist["hist"]);
        let hSimpleHist = new histogram_3.SVGHistogram("simple-entropy-ex", "#simple-entropy-ex", mSimpleHist, conf);
        let mLowEnt = bins_3.Histogram.fromArray(data_1.entropyExs["lowEntropy"]);
        let mMedEnt = bins_3.Histogram.fromArray(data_1.entropyExs["medEntropy"]);
        let mHighEnt = bins_3.Histogram.fromArray(data_1.entropyExs["highEntropy"]);
        let hLowEnt = new histogram_3.SVGHistogram("entropy-ex", "#entropy-ex-active", mLowEnt, conf);
        let hMedEnt = new histogram_3.SVGHistogram("entropy-ex", "#entropy-ex-active", mMedEnt, conf);
        let hHighEnt = new histogram_3.SVGHistogram("entropy-ex", "#entropy-ex-active", mHighEnt, conf);
        let tLowEnt = new textbinder_1.TextBinder("#entropy-ex-val", mLowEnt, function (m) {
            let total = m.bins().reduce((p, c) => c.length + p, 0);
            let nats = (a) => Math.log2(total / a);
            let entropy = m.bins().reduce((p, c) => (c.length / total) * nats(c.length) + p, 0);
            return "" + Math.round(entropy * 100) / 100;
        });
        tLowEnt.refresh();
        let tMedEnt = new textbinder_1.TextBinder("#entropy-ex-val", mMedEnt, function (m) {
            let total = m.bins().reduce((p, c) => c.length + p, 0);
            let nats = (a) => Math.log2(total / a);
            let entropy = m.bins().reduce((p, c) => (c.length / total) * nats(c.length) + p, 0);
            return "" + Math.round(entropy * 100) / 100;
        });
        tMedEnt.refresh();
        let tHighEnt = new textbinder_1.TextBinder("#entropy-ex-val", mHighEnt, function (m) {
            let total = m.bins().reduce((p, c) => c.length + p, 0);
            let nats = (a) => Math.log2(total / a);
            let entropy = m.bins().reduce((p, c) => (c.length / total) * nats(c.length) + p, 0);
            return "" + Math.round(entropy * 100) / 100;
        });
        tHighEnt.refresh();
        let mActiveEnt = mMedEnt;
        $("#entropy-ex-low").click(() => { mActiveEnt = mLowEnt; mLowEnt.refresh(); });
        $("#entropy-ex-med").click(() => { mActiveEnt = mMedEnt; mMedEnt.refresh(); });
        $("#entropy-ex-high").click(() => { mActiveEnt = mHighEnt; mHighEnt.refresh(); });
        let mInteractiveEnt = bins_3.Histogram.full(8, 1);
        let interactiveEnt = new entropy_1.SVGInteractiveEntropy("#entropy-ex-interactive", mInteractiveEnt, conf);
        interactiveEnt.refresh();
        let interactiveEntHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    interactiveEnt.hist.selectCol(mInteractiveEnt.selectedBin() - 1);
                    break;
                case ("right"):
                    interactiveEnt.hist.selectCol(mInteractiveEnt.selectedBin() + 1);
                    break;
                case ("up"):
                    interactiveEnt.hist.incrSelectedBin();
                    break;
                case ("down"):
                    interactiveEnt.hist.decrSelectedBin();
                    break;
            }
        };
        registerAttn("#entropy-interactive", interactiveEntHandler);
        let qModel = bins_3.Histogram.fromArray(data_1.xEntropyExs["q"]);
        let pModel = bins_3.Histogram.full(8, 1);
        let interactiveXEnt = new entropy_1.SVGInteractiveCrossEntropy("#xentropy-ex-interactive", pModel, qModel, conf);
        interactiveXEnt.refresh();
        let relEnt = new textbinder_1.LooseTextBinder("#kl-ex-val", [pModel, qModel], function (m) {
            let p = m[0];
            let q = m[1];
            let totalP = p.bins().reduce((prev, c) => c.length + prev, 0);
            let totalQ = q.bins().reduce((prev, c) => c.length + prev, 0);
            let natsP = (a) => Math.log2(totalP / a);
            let natsQ = (a) => Math.log2(totalQ / a);
            let kl = p.bins().reduce((prev, c, i) => (c.length / totalP) * (natsQ(q.getBin(i).length) - natsP(c.length)) + prev, 0);
            return "" + Math.round(kl * 100) / 100;
        });
        relEnt.refresh();
        let interactiveXEntHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    interactiveXEnt.sourceEnt.hist.selectCol(pModel.selectedBin() - 1);
                    relEnt.refresh();
                    break;
                case ("right"):
                    interactiveXEnt.sourceEnt.hist.selectCol(pModel.selectedBin() + 1);
                    relEnt.refresh();
                    break;
                case ("up"):
                    interactiveXEnt.sourceEnt.hist.incrSelectedBin();
                    relEnt.refresh();
                    break;
                case ("down"):
                    interactiveXEnt.sourceEnt.hist.decrSelectedBin();
                    relEnt.refresh();
                    break;
            }
        };
        registerAttn("#xentropy-interactive", interactiveXEntHandler);
        let transportMatrix = heatmap_3.HeatMap.fromCSVStr(data_1.transportEx["matrix"]);
        let interactiveTransport = new transport_1.SVGIndicatorTransport("#transport-ex-interactive", transportMatrix, conf);
        interactiveTransport.refresh();
        let interactiveTransportHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    interactiveTransport.rowHist.selectCol(transportMatrix.selectedCol() - 1);
                    break;
                case ("right"):
                    interactiveTransport.rowHist.selectCol(transportMatrix.selectedCol() + 1);
            }
        };
        registerAttn("#transport-interactive", interactiveTransportHandler);
        let intTransportMatrix = heatmap_3.HeatMap.fromCSVStr(data_1.transportEx["matrix"]);
        let interactiveTransportMatrix = new transport_1.SVGTransportMatrix("#transport-matrix-ex-interactive", intTransportMatrix, conf);
        interactiveTransportMatrix.refresh();
        let interactiveTransportMatrixHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    interactiveTransportMatrix.rowHist.selectCol(intTransportMatrix.selectedCol() - 1);
                    break;
                case ("right"):
                    interactiveTransportMatrix.rowHist.selectCol(intTransportMatrix.selectedCol() + 1);
            }
        };
        registerAttn("#transport-matrix-interactive", interactiveTransportMatrixHandler);
        let optTransportMatrix = heatmap_3.HeatMap.fromCSVStr(data_1.transportEx["opt_matrix"]);
        let optInterativeTransportMatrix = new transport_1.SVGTransportMatrix("#opt-transport-matrix-ex-interactive", optTransportMatrix, conf);
        optInterativeTransportMatrix.refresh();
        let optInteractiveTransportMatrixHandler = function (dir) {
            switch (dir) {
                case ("left"):
                    optInterativeTransportMatrix.rowHist.selectCol(optTransportMatrix.selectedCol() - 1);
                    break;
                case ("right"):
                    optInterativeTransportMatrix.rowHist.selectCol(optTransportMatrix.selectedCol() + 1);
            }
        };
        registerAttn("#opt-transport-matrix-interactive", optInteractiveTransportMatrixHandler);
        let wEMean = data_1.optimizers["wganEasy"]["mean"];
        let wECov = data_1.optimizers["wganEasy"]["cov"];
        let svgGAnim = new gaussian_2.SVGAnimatedGaussian("wgan-easy", "#wgan-easy-optim-ex", 15, wEMean, wECov, [[-1, 5], [-1, 5]], conf);
        $("#wgan-easy-play").click(() => svgGAnim.play());
        $("#wgan-easy-pause").click(() => svgGAnim.pause());
        $("#wgan-easy-reset").click(() => svgGAnim.reset());
    }
    main();
});
define("main", ["require", "exports", "view/binarytree", "view/histogram", "view/entropy", "view/transport", "view/heatmap", "model/bins", "model/heatmap", "d3", "model/model", "view/gaussian", "data"], function (require, exports, tree, hist, ent, transport, hm, histModel, matModel, d3, model, gaussian_3, data_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function main() {
        let colors = {
            "border": ["#505050",],
            "default": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
            "rowHist": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
            "colHist": Array.from({ length: 8 }, (v, k) => d3.interpolateSpectral(k / 7)),
            "colOverlay": ["#000"]
        };
        let conf = new model.CONF(8, colors, 5);
        let m = new histModel.Histogram(8);
        let vt = new tree.SVGBinaryTree("#treesvg", 4, conf);
        vt.setDepth(6);
        let i = 0;
        setInterval(() => { vt.setDepth((i++ % 6) + 1); }, 500);
        m.setAll(1);
        let v = new hist.SVGInteractiveHistogram("v", "#svg", m, conf);
        let both = new ent.SVGEntropy("#plain-entropy0", m, conf);
        window.addEventListener("resize", () => { m.refresh(); });
        let mat = matModel.HeatMap.fromCSVStr('0,0,0,0,0,0,0,0\n0,2,0,0,0,0,0,1\n0,0,3,0,0,6,2,3\n0,1,0,0,0,0,0,0\n2,0,5,0,0,0,0,1\n2,7,6,1,0,1,0,0\n0,8,4,0,1,2,0,0\n1,3,0,1,1,0,2,1');
        let svgHm = new hm.SVGHeatmap("#hmsvg", mat, conf);
        svgHm.refresh();
        let matSlice = new matModel.MatrixSlice(mat, matModel.Slice.ROWS);
        let svgMatSlice = new hist.SVGInteractiveHistogram("matSlice", "#hmslicesvg", matSlice, conf);
        svgMatSlice.refresh();
        let svgTransportMatrix = new transport.SVGTransportMatrix("#plain-transport0", mat, conf);
        svgTransportMatrix.refresh();
        let svgTransport = new transport.SVGIndicatorTransport("#plain-transport1", mat, conf);
        svgTransport.refresh();
        document.addEventListener("keydown", event => {
            switch (event.key.toLowerCase()) {
                case ("h"):
                    v.selectCol(m.selectedBin() - 1);
                    break;
                case ("l"):
                    v.selectCol(m.selectedBin() + 1);
                    break;
                case ("k"):
                    v.incrSelectedBin();
                    break;
                case ("j"):
                    v.decrSelectedBin();
                    break;
            }
        });
        document.addEventListener("keydown", event => {
            switch (event.key.toLowerCase()) {
                case ("h"):
                    svgMatSlice.selectCol(matSlice.selectedBin() - 1);
                    break;
                case ("l"):
                    svgMatSlice.selectCol(matSlice.selectedBin() + 1);
                    break;
                case ("k"):
                    break;
                case ("j"):
                    break;
            }
        });
        let phantom = new histModel.Histogram(8);
        phantom.setAll(2);
        let phanthist = new hist.SVGPhantomHistogram("phist", "#phantomhist", m, phantom, conf);
        phanthist.refresh();
        let mean = data_2.optimizers["wganEasy"]["mean"];
        let cov = data_2.optimizers["wganEasy"]["cov"];
        let svgGAnim = new gaussian_3.SVGAnimatedGaussian("gssn", "#gaussian", 20, mean, cov, [[-1, 5], [-1, 5]], conf);
        svgGAnim.play();
    }
    exports.main = main;
    main();
});
//# sourceMappingURL=bundle.js.map